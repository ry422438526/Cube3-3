   1              		.arch armv5te
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"Farbe_sen.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	ColSen_init
  19              	ColSen_init:
  20              		.fnstart
  21              	.LFB11:
  22              		.file 1 "Farbe_sen.c"
   1:Farbe_sen.c   **** //
   2:Farbe_sen.c   **** //  Farbe_sen.c
   3:Farbe_sen.c   **** //  Cube3*3
   4:Farbe_sen.c   **** //
   5:Farbe_sen.c   **** //  Created by 杨春霞 on 12.11.15.
   6:Farbe_sen.c   **** //  Copyright © 2015 Chunxia Yang. All rights reserved.
   7:Farbe_sen.c   **** //
   8:Farbe_sen.c   **** 
   9:Farbe_sen.c   **** #include "Farbe_sen.h"
  10:Farbe_sen.c   **** #include <fcntl.h>
  11:Farbe_sen.c   **** #include <stdio.h>
  12:Farbe_sen.c   **** #include <sys/ioctl.h>
  13:Farbe_sen.c   **** #include <sys/mman.h>
  14:Farbe_sen.c   **** #ifdef __linux__
  15:Farbe_sen.c   **** #include "lms2012.h"
  16:Farbe_sen.c   **** #include <unistd.h>
  17:Farbe_sen.c   **** #endif
  18:Farbe_sen.c   **** #include "main.h"
  19:Farbe_sen.c   **** typedef enum
  20:Farbe_sen.c   **** {
  21:Farbe_sen.c   ****     WEISS=0,
  22:Farbe_sen.c   ****     BLAU=1,
  23:Farbe_sen.c   ****     GELB=2,
  24:Farbe_sen.c   ****     GRUEN=3,
  25:Farbe_sen.c   ****     ROT=4,
  26:Farbe_sen.c   ****     ORANGE=5
  27:Farbe_sen.c   **** }FABER;
  28:Farbe_sen.c   **** 
  29:Farbe_sen.c   **** #ifdef __linux__
  30:Farbe_sen.c   ****  int  PORT=0x0;
  31:Farbe_sen.c   **** const DATA8 RGB_RAW=4;     //color mode
  32:Farbe_sen.c   **** const DATA8 COLOR_SENSOR_TYPE=29;
  33:Farbe_sen.c   **** const int MAX_SAMPLES =10;
  34:Farbe_sen.c   **** int file;
  35:Farbe_sen.c   **** UART *pColorSensor;
  36:Farbe_sen.c   **** DEVCON DevCon;   //Configuration parameters
  37:Farbe_sen.c   **** #endif
  38:Farbe_sen.c   **** 
  39:Farbe_sen.c   **** #ifdef __linux__
  40:Farbe_sen.c   **** int ColSen_init()
  41:Farbe_sen.c   **** {
  23              		.loc 1 41 0
  24              		.cfi_startproc
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27 0000 04E02DE5 		str	lr, [sp, #-4]!
  28              		.save {lr}
  29              		.cfi_def_cfa_offset 4
  30              		.cfi_offset 14, -4
  31              		.pad #12
  32 0004 0CD04DE2 		sub	sp, sp, #12
  33              		.cfi_def_cfa_offset 16
  42:Farbe_sen.c   **** 
  43:Farbe_sen.c   ****     if((file = open(UART_DEVICE_NAME, O_RDWR | O_SYNC)) == -1)
  34              		.loc 1 43 0
  35 0008 AC009FE5 		ldr	r0, .L5
  36 000c AC109FE5 		ldr	r1, .L5+4
  37 0010 FEFFFFEB 		bl	open
  38              	.LVL0:
  39 0014 A8309FE5 		ldr	r3, .L5+8
  40 0018 000083E5 		str	r0, [r3]
  41 001c 010070E3 		cmn	r0, #1
  42 0020 0300001A 		bne	.L2
  44:Farbe_sen.c   ****     {
  45:Farbe_sen.c   ****         printf("Failed to open device\n");
  43              		.loc 1 45 0
  44 0024 9C009FE5 		ldr	r0, .L5+12
  45 0028 FEFFFFEB 		bl	printf
  46              	.LVL1:
  46:Farbe_sen.c   ****         return -1;
  47              		.loc 1 46 0
  48 002c 0000E0E3 		mvn	r0, #0
  49 0030 1F0000EA 		b	.L3
  50              	.L2:
  47:Farbe_sen.c   ****     }
  48:Farbe_sen.c   ****     
  49:Farbe_sen.c   ****     pColorSensor =(UART*)mmap(0, sizeof(UART),PROT_READ | PROT_WRITE, MAP_FILE | MAP_SHARED,file,0)
  51              		.loc 1 49 0
  52 0034 00008DE5 		str	r0, [sp]
  53 0038 0000A0E3 		mov	r0, #0
  54 003c 04008DE5 		str	r0, [sp, #4]
  55 0040 84109FE5 		ldr	r1, .L5+16
  56 0044 0320A0E3 		mov	r2, #3
  57 0048 0130A0E3 		mov	r3, #1
  58 004c FEFFFFEB 		bl	mmap
  59              	.LVL2:
  60 0050 78309FE5 		ldr	r3, .L5+20
  61 0054 000083E5 		str	r0, [r3]
  50:Farbe_sen.c   ****     
  51:Farbe_sen.c   ****     if (pColorSensor == MAP_FAILED)
  62              		.loc 1 51 0
  63 0058 010070E3 		cmn	r0, #1
  64 005c 0300001A 		bne	.L4
  52:Farbe_sen.c   ****     {
  53:Farbe_sen.c   ****         printf("Failed to map Color Sensor device\n");
  65              		.loc 1 53 0
  66 0060 6C009FE5 		ldr	r0, .L5+24
  67 0064 FEFFFFEB 		bl	printf
  68              	.LVL3:
  54:Farbe_sen.c   ****         return -1;
  69              		.loc 1 54 0
  70 0068 0000E0E3 		mvn	r0, #0
  71 006c 100000EA 		b	.L3
  72              	.L4:
  55:Farbe_sen.c   ****     }
  56:Farbe_sen.c   ****     DevCon.Mode[PORT]=RGB_RAW;      //DeviceConnection
  73              		.loc 1 56 0
  74 0070 60309FE5 		ldr	r3, .L5+28
  75 0074 001093E5 		ldr	r1, [r3]
  76 0078 5C209FE5 		ldr	r2, .L5+32
  77 007c 013082E0 		add	r3, r2, r1
  78 0080 0400A0E3 		mov	r0, #4
  79 0084 0800C3E5 		strb	r0, [r3, #8]
  57:Farbe_sen.c   ****     DevCon.Connection[PORT]=CONN_INPUT_UART;   //Universal Asynchronous Receiver/Transmitter
  80              		.loc 1 57 0
  81 0088 7A00A0E3 		mov	r0, #122
  82 008c 0100C2E7 		strb	r0, [r2, r1]
  58:Farbe_sen.c   ****     DevCon.Type[PORT]=COLOR_SENSOR_TYPE;
  83              		.loc 1 58 0
  84 0090 1D10A0E3 		mov	r1, #29
  85 0094 0410C3E5 		strb	r1, [r3, #4]
  59:Farbe_sen.c   ****     ioctl(file,UART_SET_CONN,&DevCon);
  86              		.loc 1 59 0
  87 0098 24309FE5 		ldr	r3, .L5+8
  88 009c 000093E5 		ldr	r0, [r3]
  89 00a0 38109FE5 		ldr	r1, .L5+36
  90 00a4 FEFFFFEB 		bl	ioctl
  91              	.LVL4:
  60:Farbe_sen.c   ****     printf("Device is ready \n");
  92              		.loc 1 60 0
  93 00a8 34009FE5 		ldr	r0, .L5+40
  94 00ac FEFFFFEB 		bl	printf
  95              	.LVL5:
  61:Farbe_sen.c   ****     return 0;
  96              		.loc 1 61 0
  97 00b0 0000A0E3 		mov	r0, #0
  98              	.L3:
  62:Farbe_sen.c   **** }
  99              		.loc 1 62 0
 100 00b4 0CD08DE2 		add	sp, sp, #12
 101              		@ sp needed
 102 00b8 04F09DE4 		ldr	pc, [sp], #4
 103              	.L6:
 104              		.align	2
 105              	.L5:
 106 00bc 00000000 		.word	.LC0
 107 00c0 02101000 		.word	1052674
 108 00c4 00000000 		.word	file
 109 00c8 10000000 		.word	.LC1
 110 00cc F8A60000 		.word	42744
 111 00d0 00000000 		.word	pColorSensor
 112 00d4 28000000 		.word	.LC2
 113 00d8 00000000 		.word	.LANCHOR0
 114 00dc 00000000 		.word	DevCon
 115 00e0 00750CC0 		.word	-1072925440
 116 00e4 4C000000 		.word	.LC3
 117              		.cfi_endproc
 118              	.LFE11:
 119              		.fnend
 121              		.align	2
 122              		.global	ColSen_close
 124              	ColSen_close:
 125              		.fnstart
 126              	.LFB13:
  63:Farbe_sen.c   **** #endif
  64:Farbe_sen.c   **** 
  65:Farbe_sen.c   **** int ColSen_getData()   //Center:zenteral Position
  66:Farbe_sen.c   **** {
  67:Farbe_sen.c   **** #ifdef __linux__
  68:Farbe_sen.c   ****     int MAX_Werte=0;
  69:Farbe_sen.c   ****     float rot,gruen,blau;
  70:Farbe_sen.c   ****     int Color_color;
  71:Farbe_sen.c   ****     int Color_data_r=0;
  72:Farbe_sen.c   ****     int Color_data_g=0;
  73:Farbe_sen.c   ****     int Color_data_b=0;
  74:Farbe_sen.c   ****     sleep(1);
  75:Farbe_sen.c   ****     Color_data_r=(unsigned char)pColorSensor->Raw[PORT][0][0]+(unsigned char)(pColorSensor->Raw[POR
  76:Farbe_sen.c   ****     Color_data_g=(unsigned char)pColorSensor->Raw[PORT][0][2]+(unsigned char)(pColorSensor->Raw[POR
  77:Farbe_sen.c   ****     Color_data_b=(unsigned char)pColorSensor->Raw[PORT][0][4]+(unsigned char)(pColorSensor->Raw[POR
  78:Farbe_sen.c   ****     //Color_data_blank=(unsigned int)pColorSensor->Raw[PORT][0][6]+(unsigned int)(pColorSensor->Raw
  79:Farbe_sen.c   ****     // usleep(10000);
  80:Farbe_sen.c   ****     MAX_Werte=MAX_RGB(MAX_RGB(Color_data_r, Color_data_g),Color_data_b);
  81:Farbe_sen.c   ****     rot   =(Color_data_r*1.0)/MAX_Werte;
  82:Farbe_sen.c   ****     gruen =(Color_data_g*1.0)/MAX_Werte;
  83:Farbe_sen.c   ****     blau  =(Color_data_b*1.0)/MAX_Werte;
  84:Farbe_sen.c   ****     Color_color=Color_col(rot,gruen,blau);
  85:Farbe_sen.c   ****     printf("COLOR_MAX is %d", MAX_Werte);
  86:Farbe_sen.c   ****     printf("color_data is (%d, %d, %d)", Color_data_r,Color_data_g,Color_data_b);
  87:Farbe_sen.c   ****     switch(Color_color){
  88:Farbe_sen.c   ****         case 0:
  89:Farbe_sen.c   ****             printf("\033[1;30m   %d\033[0m",Color_color);
  90:Farbe_sen.c   ****             break;
  91:Farbe_sen.c   ****             
  92:Farbe_sen.c   ****         case 1:
  93:Farbe_sen.c   ****             printf("\033[1;34m   %d\033[0m",Color_color);
  94:Farbe_sen.c   ****             break;
  95:Farbe_sen.c   ****             
  96:Farbe_sen.c   ****         case 2:
  97:Farbe_sen.c   ****             printf("\033[1;33m   %d\033[0m",Color_color);
  98:Farbe_sen.c   ****             break;
  99:Farbe_sen.c   ****             
 100:Farbe_sen.c   ****         case 3:
 101:Farbe_sen.c   ****             printf("\033[1;32m   %d\033[0m",Color_color);
 102:Farbe_sen.c   ****             break;
 103:Farbe_sen.c   ****             
 104:Farbe_sen.c   ****         case 4:
 105:Farbe_sen.c   ****             printf("\033[1;35m   %d\033[0m",Color_color);
 106:Farbe_sen.c   ****             break;
 107:Farbe_sen.c   ****             
 108:Farbe_sen.c   ****         case 5:
 109:Farbe_sen.c   ****             printf("\033[1;31m   %d\033[0m",Color_color);
 110:Farbe_sen.c   ****             break;
 111:Farbe_sen.c   ****     }
 112:Farbe_sen.c   ****     printf("\n\r");
 113:Farbe_sen.c   ****     sleep(1);
 114:Farbe_sen.c   ****     return Color_color;
 115:Farbe_sen.c   ****     // senden daten zu PC
 116:Farbe_sen.c   **** #endif
 117:Farbe_sen.c   ****     
 118:Farbe_sen.c   **** #ifndef __linux__
 119:Farbe_sen.c   ****     return 0;
 120:Farbe_sen.c   **** #endif
 121:Farbe_sen.c   **** }
 122:Farbe_sen.c   **** 
 123:Farbe_sen.c   **** int ColSen_close()
 124:Farbe_sen.c   **** {
 127              		.loc 1 124 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 00e8 08402DE9 		stmfd	sp!, {r3, lr}
 132              		.save {r3, lr}
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 3, -8
 135              		.cfi_offset 14, -4
 125:Farbe_sen.c   ****     printf("Close the Color Sensor");
 136              		.loc 1 125 0
 137 00ec 14009FE5 		ldr	r0, .L8
 138 00f0 FEFFFFEB 		bl	printf
 139              	.LVL6:
 126:Farbe_sen.c   **** #ifdef __linux__
 127:Farbe_sen.c   ****     close(file);
 140              		.loc 1 127 0
 141 00f4 10309FE5 		ldr	r3, .L8+4
 142 00f8 000093E5 		ldr	r0, [r3]
 143 00fc FEFFFFEB 		bl	close
 144              	.LVL7:
 128:Farbe_sen.c   **** #endif
 129:Farbe_sen.c   ****     return 0;
 130:Farbe_sen.c   **** }
 145              		.loc 1 130 0
 146 0100 0000A0E3 		mov	r0, #0
 147 0104 0880BDE8 		ldmfd	sp!, {r3, pc}
 148              	.L9:
 149              		.align	2
 150              	.L8:
 151 0108 60000000 		.word	.LC4
 152 010c 00000000 		.word	file
 153              		.cfi_endproc
 154              	.LFE13:
 155              		.fnend
 157              		.align	2
 158              		.global	MAX_RGB
 160              	MAX_RGB:
 161              		.fnstart
 162              	.LFB14:
 131:Farbe_sen.c   **** 
 132:Farbe_sen.c   **** 
 133:Farbe_sen.c   **** int MAX_RGB(int a,int b)
 134:Farbe_sen.c   **** {
 163              		.loc 1 134 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168              	.LVL8:
 135:Farbe_sen.c   ****     if (a>=b) {
 136:Farbe_sen.c   ****         return a;
 137:Farbe_sen.c   ****     }else{
 138:Farbe_sen.c   ****         return b;
 139:Farbe_sen.c   ****     }
 140:Farbe_sen.c   **** }
 169              		.loc 1 140 0
 170 0110 010050E1 		cmp	r0, r1
 171 0114 0100A0B1 		movlt	r0, r1
 172              	.LVL9:
 173 0118 1EFF2FE1 		bx	lr
 174              		.cfi_endproc
 175              	.LFE14:
 176              		.fnend
 178              		.global	__aeabi_fcmpeq
 179              		.global	__aeabi_fcmpgt
 180              		.global	__aeabi_f2d
 181              		.global	__aeabi_dcmplt
 182              		.global	__aeabi_dcmpgt
 183              		.align	2
 184              		.global	Color_col
 186              	Color_col:
 187              		.fnstart
 188              	.LFB15:
 141:Farbe_sen.c   **** 
 142:Farbe_sen.c   **** FARBE Color_col(float rot, float gruen,float blau)
 143:Farbe_sen.c   **** {
 189              		.loc 1 143 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              	.LVL10:
 194 011c F8402DE9 		stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 195              		.save {r3, r4, r5, r6, r7, lr}
 196              		.cfi_def_cfa_offset 24
 197              		.cfi_offset 3, -24
 198              		.cfi_offset 4, -20
 199              		.cfi_offset 5, -16
 200              		.cfi_offset 6, -12
 201              		.cfi_offset 7, -8
 202              		.cfi_offset 14, -4
 203 0120 0060A0E1 		mov	r6, r0
 204 0124 0140A0E1 		mov	r4, r1
 205 0128 0270A0E1 		mov	r7, r2
 206              	.LVL11:
 144:Farbe_sen.c   ****     
 145:Farbe_sen.c   ****     int Color_col=0;
 146:Farbe_sen.c   ****     if (rot==1) {
 207              		.loc 1 146 0
 208 012c FE15A0E3 		mov	r1, #1065353216
 209              	.LVL12:
 210 0130 FEFFFFEB 		bl	__aeabi_fcmpeq
 211              	.LVL13:
 212 0134 000050E3 		cmp	r0, #0
 145:Farbe_sen.c   ****     if (rot==1) {
 213              		.loc 1 145 0
 214 0138 0050A003 		moveq	r5, #0
 215              		.loc 1 146 0
 216 013c 1600000A 		beq	.L12
 147:Farbe_sen.c   ****         if(gruen>0.5)
 217              		.loc 1 147 0
 218 0140 0400A0E1 		mov	r0, r4
 219 0144 3F14A0E3 		mov	r1, #1056964608
 220 0148 FEFFFFEB 		bl	__aeabi_fcmpgt
 221              	.LVL14:
 222 014c 000050E3 		cmp	r0, #0
 148:Farbe_sen.c   ****         {
 149:Farbe_sen.c   ****             Color_col=GELB;
 223              		.loc 1 149 0
 224 0150 0250A013 		movne	r5, #2
 147:Farbe_sen.c   ****         if(gruen>0.5)
 225              		.loc 1 147 0
 226 0154 1000001A 		bne	.L12
 150:Farbe_sen.c   ****         }else if ((gruen<0.3)||(blau<0.1)){
 227              		.loc 1 150 0
 228 0158 0400A0E1 		mov	r0, r4
 229 015c FEFFFFEB 		bl	__aeabi_f2d
 230              	.LVL15:
 231 0160 90209FE5 		ldr	r2, .L27
 232 0164 90309FE5 		ldr	r3, .L27+4
 233 0168 FEFFFFEB 		bl	__aeabi_dcmplt
 234              	.LVL16:
 235 016c 000050E3 		cmp	r0, #0
 151:Farbe_sen.c   ****             Color_col=ROT;
 236              		.loc 1 151 0
 237 0170 0450A013 		movne	r5, #4
 150:Farbe_sen.c   ****         }else if ((gruen<0.3)||(blau<0.1)){
 238              		.loc 1 150 0
 239 0174 0800001A 		bne	.L12
 150:Farbe_sen.c   ****         }else if ((gruen<0.3)||(blau<0.1)){
 240              		.loc 1 150 0 is_stmt 0 discriminator 1
 241 0178 0700A0E1 		mov	r0, r7
 242 017c FEFFFFEB 		bl	__aeabi_f2d
 243              	.LVL17:
 244 0180 78209FE5 		ldr	r2, .L27+8
 245 0184 78309FE5 		ldr	r3, .L27+12
 246 0188 FEFFFFEB 		bl	__aeabi_dcmplt
 247              	.LVL18:
 152:Farbe_sen.c   ****         }else{
 153:Farbe_sen.c   ****             Color_col=ORANGE;
 248              		.loc 1 153 0 is_stmt 1 discriminator 1
 249 018c 000050E3 		cmp	r0, #0
 250 0190 0450A013 		movne	r5, #4
 251 0194 0550A003 		moveq	r5, #5
 252 0198 FFFFFFEA 		b	.L12
 253              	.L12:
 254              	.LVL19:
 154:Farbe_sen.c   ****         }
 155:Farbe_sen.c   ****     }
 156:Farbe_sen.c   ****     if(gruen==1)
 255              		.loc 1 156 0
 256 019c 0400A0E1 		mov	r0, r4
 257 01a0 FE15A0E3 		mov	r1, #1065353216
 258 01a4 FEFFFFEB 		bl	__aeabi_fcmpeq
 259              	.LVL20:
 260 01a8 000050E3 		cmp	r0, #0
 261 01ac 0F00000A 		beq	.L15
 157:Farbe_sen.c   ****     {
 158:Farbe_sen.c   ****         if(rot<0.3)
 262              		.loc 1 158 0
 263 01b0 0600A0E1 		mov	r0, r6
 264 01b4 FEFFFFEB 		bl	__aeabi_f2d
 265              	.LVL21:
 266 01b8 38209FE5 		ldr	r2, .L27
 267 01bc 38309FE5 		ldr	r3, .L27+4
 268 01c0 FEFFFFEB 		bl	__aeabi_dcmplt
 269              	.LVL22:
 270 01c4 000050E3 		cmp	r0, #0
 159:Farbe_sen.c   ****         {
 160:Farbe_sen.c   ****             Color_col=GRUEN;
 271              		.loc 1 160 0
 272 01c8 0350A013 		movne	r5, #3
 273              	.LVL23:
 158:Farbe_sen.c   ****         {
 274              		.loc 1 158 0
 275 01cc 0700001A 		bne	.L15
 161:Farbe_sen.c   ****         }else if (blau>0.8){
 276              		.loc 1 161 0
 277 01d0 0700A0E1 		mov	r0, r7
 278 01d4 FEFFFFEB 		bl	__aeabi_f2d
 279              	.LVL24:
 280 01d8 20209FE5 		ldr	r2, .L27+8
 281 01dc 24309FE5 		ldr	r3, .L27+16
 282 01e0 FEFFFFEB 		bl	__aeabi_dcmpgt
 283              	.LVL25:
 160:Farbe_sen.c   ****         }else if (blau>0.8){
 284              		.loc 1 160 0
 285 01e4 005090E2 		adds	r5, r0, #0
 286 01e8 0150A013 		movne	r5, #1
 287 01ec FFFFFFEA 		b	.L15
 288              	.L15:
 289              	.LVL26:
 162:Farbe_sen.c   ****             Color_col=BLAU;
 163:Farbe_sen.c   ****         }else{
 164:Farbe_sen.c   ****             Color_col=WEISS;
 165:Farbe_sen.c   ****         }
 166:Farbe_sen.c   ****     }
 167:Farbe_sen.c   ****     return Color_col;
 168:Farbe_sen.c   **** }
 290              		.loc 1 168 0
 291 01f0 0500A0E1 		mov	r0, r5
 292 01f4 F880BDE8 		ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
 293              	.L28:
 294              		.align	2
 295              	.L27:
 296 01f8 33333333 		.word	858993459
 297 01fc 3333D33F 		.word	1070805811
 298 0200 9A999999 		.word	-1717986918
 299 0204 9999B93F 		.word	1069128089
 300 0208 9999E93F 		.word	1072273817
 301              		.cfi_endproc
 302              	.LFE15:
 303              		.fnend
 305              		.global	__aeabi_i2d
 306              		.global	__aeabi_ddiv
 307              		.global	__aeabi_d2f
 308              		.align	2
 309              		.global	ColSen_getData
 311              	ColSen_getData:
 312              		.fnstart
 313              	.LFB12:
  66:Farbe_sen.c   **** #ifdef __linux__
 314              		.loc 1 66 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318 020c F84F2DE9 		stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 319              		.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 320              		.cfi_def_cfa_offset 40
 321              		.cfi_offset 3, -40
 322              		.cfi_offset 4, -36
 323              		.cfi_offset 5, -32
 324              		.cfi_offset 6, -28
 325              		.cfi_offset 7, -24
 326              		.cfi_offset 8, -20
 327              		.cfi_offset 9, -16
 328              		.cfi_offset 10, -12
 329              		.cfi_offset 11, -8
 330              		.cfi_offset 14, -4
 331              	.LVL27:
  74:Farbe_sen.c   ****     Color_data_r=(unsigned char)pColorSensor->Raw[PORT][0][0]+(unsigned char)(pColorSensor->Raw[POR
 332              		.loc 1 74 0
 333 0210 0100A0E3 		mov	r0, #1
 334 0214 FEFFFFEB 		bl	sleep
 335              	.LVL28:
  75:Farbe_sen.c   ****     Color_data_g=(unsigned char)pColorSensor->Raw[PORT][0][2]+(unsigned char)(pColorSensor->Raw[POR
 336              		.loc 1 75 0
 337 0218 68319FE5 		ldr	r3, .L38
 338 021c 002093E5 		ldr	r2, [r3]
 339 0220 64319FE5 		ldr	r3, .L38+4
 340 0224 003093E5 		ldr	r3, [r3]
 341 0228 961DA0E3 		mov	r1, #9600
 342 022c 912323E0 		mla	r3, r1, r3, r2
 343 0230 58219FE5 		ldr	r2, .L38+8
 344 0234 0280D3E7 		ldrb	r8, [r3, r2]	@ zero_extendqisi2
 345              	.LVL29:
  76:Farbe_sen.c   ****     Color_data_b=(unsigned char)pColorSensor->Raw[PORT][0][4]+(unsigned char)(pColorSensor->Raw[POR
 346              		.loc 1 76 0
 347 0238 022082E2 		add	r2, r2, #2
 348 023c 0270D3E7 		ldrb	r7, [r3, r2]	@ zero_extendqisi2
 349              	.LVL30:
  77:Farbe_sen.c   ****     //Color_data_blank=(unsigned int)pColorSensor->Raw[PORT][0][6]+(unsigned int)(pColorSensor->Raw
 350              		.loc 1 77 0
 351 0240 022082E2 		add	r2, r2, #2
 352 0244 0260D3E7 		ldrb	r6, [r3, r2]	@ zero_extendqisi2
 353              	.LVL31:
 354 0248 080057E1 		cmp	r7, r8
 355 024c 0790A0A1 		movge	r9, r7
 356 0250 0890A0B1 		movlt	r9, r8
 357              	.LVL32:
 358 0254 060059E1 		cmp	r9, r6
 359 0258 0690A0B1 		movlt	r9, r6
 360              	.LVL33:
  81:Farbe_sen.c   ****     gruen =(Color_data_g*1.0)/MAX_Werte;
 361              		.loc 1 81 0
 362 025c 0900A0E1 		mov	r0, r9
 363 0260 FEFFFFEB 		bl	__aeabi_i2d
 364              	.LVL34:
 365 0264 0040A0E1 		mov	r4, r0
 366 0268 0150A0E1 		mov	r5, r1
 367              	.LVL35:
 368 026c 0800A0E1 		mov	r0, r8
 369 0270 FEFFFFEB 		bl	__aeabi_i2d
 370              	.LVL36:
 371 0274 0420A0E1 		mov	r2, r4
 372 0278 0530A0E1 		mov	r3, r5
 373 027c FEFFFFEB 		bl	__aeabi_ddiv
 374              	.LVL37:
 375 0280 FEFFFFEB 		bl	__aeabi_d2f
 376              	.LVL38:
 377 0284 00B0A0E1 		mov	fp, r0
  82:Farbe_sen.c   ****     blau  =(Color_data_b*1.0)/MAX_Werte;
 378              		.loc 1 82 0
 379 0288 0700A0E1 		mov	r0, r7
 380 028c FEFFFFEB 		bl	__aeabi_i2d
 381              	.LVL39:
 382 0290 0420A0E1 		mov	r2, r4
 383 0294 0530A0E1 		mov	r3, r5
 384 0298 FEFFFFEB 		bl	__aeabi_ddiv
 385              	.LVL40:
 386 029c FEFFFFEB 		bl	__aeabi_d2f
 387              	.LVL41:
 388 02a0 00A0A0E1 		mov	r10, r0
  83:Farbe_sen.c   ****     Color_color=Color_col(rot,gruen,blau);
 389              		.loc 1 83 0
 390 02a4 0600A0E1 		mov	r0, r6
 391 02a8 FEFFFFEB 		bl	__aeabi_i2d
 392              	.LVL42:
 393 02ac 0420A0E1 		mov	r2, r4
 394 02b0 0530A0E1 		mov	r3, r5
 395 02b4 FEFFFFEB 		bl	__aeabi_ddiv
 396              	.LVL43:
 397 02b8 FEFFFFEB 		bl	__aeabi_d2f
 398              	.LVL44:
 399 02bc 0020A0E1 		mov	r2, r0
  84:Farbe_sen.c   ****     printf("COLOR_MAX is %d", MAX_Werte);
 400              		.loc 1 84 0
 401 02c0 0B00A0E1 		mov	r0, fp
 402 02c4 0A10A0E1 		mov	r1, r10
 403 02c8 FEFFFFEB 		bl	Color_col
 404              	.LVL45:
 405 02cc 0040A0E1 		mov	r4, r0
 406              	.LVL46:
  85:Farbe_sen.c   ****     printf("color_data is (%d, %d, %d)", Color_data_r,Color_data_g,Color_data_b);
 407              		.loc 1 85 0
 408 02d0 BC009FE5 		ldr	r0, .L38+12
 409              	.LVL47:
 410 02d4 0910A0E1 		mov	r1, r9
 411 02d8 FEFFFFEB 		bl	printf
 412              	.LVL48:
  86:Farbe_sen.c   ****     switch(Color_color){
 413              		.loc 1 86 0
 414 02dc B4009FE5 		ldr	r0, .L38+16
 415 02e0 0810A0E1 		mov	r1, r8
 416 02e4 0720A0E1 		mov	r2, r7
 417 02e8 0630A0E1 		mov	r3, r6
 418 02ec FEFFFFEB 		bl	printf
 419              	.LVL49:
  87:Farbe_sen.c   ****         case 0:
 420              		.loc 1 87 0
 421 02f0 050054E3 		cmp	r4, #5
 422 02f4 04F19F97 		ldrls	pc, [pc, r4, asl #2]
 423 02f8 1C0000EA 		b	.L30
 424              	.L32:
 425 02fc 14030000 		.word	.L31
 426 0300 24030000 		.word	.L33
 427 0304 34030000 		.word	.L34
 428 0308 44030000 		.word	.L35
 429 030c 54030000 		.word	.L36
 430 0310 64030000 		.word	.L37
 431              	.L31:
  89:Farbe_sen.c   ****             break;
 432              		.loc 1 89 0
 433 0314 80009FE5 		ldr	r0, .L38+20
 434 0318 0010A0E3 		mov	r1, #0
 435 031c FEFFFFEB 		bl	printf
 436              	.LVL50:
  90:Farbe_sen.c   ****             
 437              		.loc 1 90 0
 438 0320 120000EA 		b	.L30
 439              	.L33:
  93:Farbe_sen.c   ****             break;
 440              		.loc 1 93 0
 441 0324 74009FE5 		ldr	r0, .L38+24
 442 0328 0110A0E3 		mov	r1, #1
 443 032c FEFFFFEB 		bl	printf
 444              	.LVL51:
  94:Farbe_sen.c   ****             
 445              		.loc 1 94 0
 446 0330 0E0000EA 		b	.L30
 447              	.L34:
  97:Farbe_sen.c   ****             break;
 448              		.loc 1 97 0
 449 0334 68009FE5 		ldr	r0, .L38+28
 450 0338 0210A0E3 		mov	r1, #2
 451 033c FEFFFFEB 		bl	printf
 452              	.LVL52:
  98:Farbe_sen.c   ****             
 453              		.loc 1 98 0
 454 0340 0A0000EA 		b	.L30
 455              	.L35:
 101:Farbe_sen.c   ****             break;
 456              		.loc 1 101 0
 457 0344 5C009FE5 		ldr	r0, .L38+32
 458 0348 0310A0E3 		mov	r1, #3
 459 034c FEFFFFEB 		bl	printf
 460              	.LVL53:
 102:Farbe_sen.c   ****             
 461              		.loc 1 102 0
 462 0350 060000EA 		b	.L30
 463              	.L36:
 105:Farbe_sen.c   ****             break;
 464              		.loc 1 105 0
 465 0354 50009FE5 		ldr	r0, .L38+36
 466 0358 0410A0E3 		mov	r1, #4
 467 035c FEFFFFEB 		bl	printf
 468              	.LVL54:
 106:Farbe_sen.c   ****             
 469              		.loc 1 106 0
 470 0360 020000EA 		b	.L30
 471              	.L37:
 109:Farbe_sen.c   ****             break;
 472              		.loc 1 109 0
 473 0364 44009FE5 		ldr	r0, .L38+40
 474 0368 0510A0E3 		mov	r1, #5
 475 036c FEFFFFEB 		bl	printf
 476              	.LVL55:
 477              	.L30:
 112:Farbe_sen.c   ****     sleep(1);
 478              		.loc 1 112 0
 479 0370 3C009FE5 		ldr	r0, .L38+44
 480 0374 FEFFFFEB 		bl	printf
 481              	.LVL56:
 113:Farbe_sen.c   ****     return Color_color;
 482              		.loc 1 113 0
 483 0378 0100A0E3 		mov	r0, #1
 484 037c FEFFFFEB 		bl	sleep
 485              	.LVL57:
 121:Farbe_sen.c   **** 
 486              		.loc 1 121 0
 487 0380 0400A0E1 		mov	r0, r4
 488 0384 F88FBDE8 		ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 489              	.L39:
 490              		.align	2
 491              	.L38:
 492 0388 00000000 		.word	pColorSensor
 493 038c 00000000 		.word	.LANCHOR0
 494 0390 60100000 		.word	4192
 495 0394 78000000 		.word	.LC5
 496 0398 88000000 		.word	.LC6
 497 039c A4000000 		.word	.LC7
 498 03a0 B8000000 		.word	.LC8
 499 03a4 CC000000 		.word	.LC9
 500 03a8 E0000000 		.word	.LC10
 501 03ac F4000000 		.word	.LC11
 502 03b0 08010000 		.word	.LC12
 503 03b4 1C010000 		.word	.LC13
 504              		.cfi_endproc
 505              	.LFE12:
 506              		.fnend
 508              		.comm	DevCon,12,4
 509              		.comm	pColorSensor,4,4
 510              		.comm	file,4,4
 511              		.global	MAX_SAMPLES
 512              		.global	COLOR_SENSOR_TYPE
 513              		.global	RGB_RAW
 514              		.global	PORT
 515              		.section	.rodata
 516              		.align	2
 519              	MAX_SAMPLES:
 520 0000 0A000000 		.word	10
 523              	COLOR_SENSOR_TYPE:
 524 0004 1D       		.byte	29
 527              	RGB_RAW:
 528 0005 04       		.byte	4
 529 0006 0000     		.section	.rodata.str1.4,"aMS",%progbits,1
 530              		.align	2
 531              	.LC0:
 532 0000 2F646576 		.ascii	"/dev/lms_uart\000"
 532      2F6C6D73 
 532      5F756172 
 532      7400
 533 000e 0000     		.space	2
 534              	.LC1:
 535 0010 4661696C 		.ascii	"Failed to open device\012\000"
 535      65642074 
 535      6F206F70 
 535      656E2064 
 535      65766963 
 536 0027 00       		.space	1
 537              	.LC2:
 538 0028 4661696C 		.ascii	"Failed to map Color Sensor device\012\000"
 538      65642074 
 538      6F206D61 
 538      7020436F 
 538      6C6F7220 
 539 004b 00       		.space	1
 540              	.LC3:
 541 004c 44657669 		.ascii	"Device is ready \012\000"
 541      63652069 
 541      73207265 
 541      61647920 
 541      0A00
 542 005e 0000     		.space	2
 543              	.LC4:
 544 0060 436C6F73 		.ascii	"Close the Color Sensor\000"
 544      65207468 
 544      6520436F 
 544      6C6F7220 
 544      53656E73 
 545 0077 00       		.space	1
 546              	.LC5:
 547 0078 434F4C4F 		.ascii	"COLOR_MAX is %d\000"
 547      525F4D41 
 547      58206973 
 547      20256400 
 548              	.LC6:
 549 0088 636F6C6F 		.ascii	"color_data is (%d, %d, %d)\000"
 549      725F6461 
 549      74612069 
 549      73202825 
 549      642C2025 
 550 00a3 00       		.space	1
 551              	.LC7:
 552 00a4 1B5B313B 		.ascii	"\033[1;30m   %d\033[0m\000"
 552      33306D20 
 552      20202564 
 552      1B5B306D 
 552      00
 553 00b5 000000   		.space	3
 554              	.LC8:
 555 00b8 1B5B313B 		.ascii	"\033[1;34m   %d\033[0m\000"
 555      33346D20 
 555      20202564 
 555      1B5B306D 
 555      00
 556 00c9 000000   		.space	3
 557              	.LC9:
 558 00cc 1B5B313B 		.ascii	"\033[1;33m   %d\033[0m\000"
 558      33336D20 
 558      20202564 
 558      1B5B306D 
 558      00
 559 00dd 000000   		.space	3
 560              	.LC10:
 561 00e0 1B5B313B 		.ascii	"\033[1;32m   %d\033[0m\000"
 561      33326D20 
 561      20202564 
 561      1B5B306D 
 561      00
 562 00f1 000000   		.space	3
 563              	.LC11:
 564 00f4 1B5B313B 		.ascii	"\033[1;35m   %d\033[0m\000"
 564      33356D20 
 564      20202564 
 564      1B5B306D 
 564      00
 565 0105 000000   		.space	3
 566              	.LC12:
 567 0108 1B5B313B 		.ascii	"\033[1;31m   %d\033[0m\000"
 567      33316D20 
 567      20202564 
 567      1B5B306D 
 567      00
 568 0119 000000   		.space	3
 569              	.LC13:
 570 011c 0A0D00   		.ascii	"\012\015\000"
 571 011f 00       		.bss
 572              		.align	2
 573              	.LANCHOR0 = . + 0
 576              	PORT:
 577 0000 00000000 		.space	4
 578              		.text
 579              	.Letext0:
 580              		.file 2 "/usr/local/carlson-minot/crosscompilers/lib/gcc/arm-none-linux-gnueabi/4.8.3/include/stdd
 581              		.file 3 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 582              		.file 4 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 583              		.file 5 "Farbe_sen.h"
 584              		.file 6 "lmstypes.h"
 585              		.file 7 "bytecodes.h"
 586              		.file 8 "lms2012.h"
 587              		.file 9 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 588              		.file 10 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
 589              		.file 11 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
 590              		.file 12 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
 591              		.file 13 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Farbe_sen.c
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:16     .text:0000000000000000 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:19     .text:0000000000000000 ColSen_init
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:106    .text:00000000000000bc $d
                            *COM*:0000000000000004 file
                            *COM*:0000000000000004 pColorSensor
                            *COM*:000000000000000c DevCon
                       .ARM.exidx:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:121    .text:00000000000000e8 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:124    .text:00000000000000e8 ColSen_close
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:151    .text:0000000000000108 $d
                       .ARM.extab:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:157    .text:0000000000000110 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:160    .text:0000000000000110 MAX_RGB
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:186    .text:000000000000011c Color_col
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:296    .text:00000000000001f8 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:308    .text:000000000000020c $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:311    .text:000000000000020c ColSen_getData
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:425    .text:00000000000002fc $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:433    .text:0000000000000314 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:492    .text:0000000000000388 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:519    .rodata:0000000000000000 MAX_SAMPLES
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:523    .rodata:0000000000000004 COLOR_SENSOR_TYPE
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:527    .rodata:0000000000000005 RGB_RAW
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:576    .bss:0000000000000000 PORT
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:516    .rodata:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:530    .rodata.str1.4:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccnVl5Cs.s:572    .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
open
printf
mmap
ioctl
__aeabi_unwind_cpp_pr0
close
__aeabi_unwind_cpp_pr1
__aeabi_fcmpeq
__aeabi_fcmpgt
__aeabi_f2d
__aeabi_dcmplt
__aeabi_dcmpgt
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2f
sleep
