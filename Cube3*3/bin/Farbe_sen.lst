   1              		.arch armv5te
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"Farbe_sen.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	ColSen_init
  19              	ColSen_init:
  20              		.fnstart
  21              	.LFB11:
  22              		.file 1 "Farbe_sen.c"
   1:Farbe_sen.c   **** //
   2:Farbe_sen.c   **** //  Farbe_sen.c
   3:Farbe_sen.c   **** //  Cube3*3
   4:Farbe_sen.c   **** //
   5:Farbe_sen.c   **** //  Created by 杨春霞 on 12.11.15.
   6:Farbe_sen.c   **** //  Copyright © 2015 Chunxia Yang. All rights reserved.
   7:Farbe_sen.c   **** //
   8:Farbe_sen.c   **** 
   9:Farbe_sen.c   **** #include "Farbe_sen.h"
  10:Farbe_sen.c   **** #include <fcntl.h>
  11:Farbe_sen.c   **** #include <stdio.h>
  12:Farbe_sen.c   **** #include <sys/ioctl.h>
  13:Farbe_sen.c   **** #include <sys/mman.h>
  14:Farbe_sen.c   **** #ifdef __linux__
  15:Farbe_sen.c   **** #include "lms2012.h"
  16:Farbe_sen.c   **** #include <unistd.h>
  17:Farbe_sen.c   **** #endif
  18:Farbe_sen.c   **** #include "main.h"
  19:Farbe_sen.c   **** typedef enum
  20:Farbe_sen.c   **** {
  21:Farbe_sen.c   ****     WEISS=0,
  22:Farbe_sen.c   ****     BLAU=1,
  23:Farbe_sen.c   ****     GELB=2,
  24:Farbe_sen.c   ****     GRUEN=3,
  25:Farbe_sen.c   ****     ROT=4,
  26:Farbe_sen.c   ****     ORANGE=5
  27:Farbe_sen.c   **** }FABER;
  28:Farbe_sen.c   **** 
  29:Farbe_sen.c   **** #ifdef __linux__
  30:Farbe_sen.c   ****  int  PORT=0x0;
  31:Farbe_sen.c   **** const DATA8 RGB_RAW=4;     //color mode
  32:Farbe_sen.c   **** const DATA8 COLOR_SENSOR_TYPE=29;
  33:Farbe_sen.c   **** const int MAX_SAMPLES =10;
  34:Farbe_sen.c   **** int file;
  35:Farbe_sen.c   **** UART *pColorSensor;
  36:Farbe_sen.c   **** DEVCON DevCon;   //Configuration parameters
  37:Farbe_sen.c   **** #endif
  38:Farbe_sen.c   **** 
  39:Farbe_sen.c   **** #ifdef __linux__
  40:Farbe_sen.c   **** int ColSen_init()
  41:Farbe_sen.c   **** {
  23              		.loc 1 41 0
  24              		.cfi_startproc
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27 0000 04E02DE5 		str	lr, [sp, #-4]!
  28              		.save {lr}
  29              		.cfi_def_cfa_offset 4
  30              		.cfi_offset 14, -4
  31              		.pad #12
  32 0004 0CD04DE2 		sub	sp, sp, #12
  33              		.cfi_def_cfa_offset 16
  42:Farbe_sen.c   **** 
  43:Farbe_sen.c   ****     if((file = open(UART_DEVICE_NAME, O_RDWR | O_SYNC)) == -1)
  34              		.loc 1 43 0
  35 0008 AC009FE5 		ldr	r0, .L5
  36 000c AC109FE5 		ldr	r1, .L5+4
  37 0010 FEFFFFEB 		bl	open
  38              	.LVL0:
  39 0014 A8309FE5 		ldr	r3, .L5+8
  40 0018 000083E5 		str	r0, [r3]
  41 001c 010070E3 		cmn	r0, #1
  42 0020 0300001A 		bne	.L2
  44:Farbe_sen.c   ****     {
  45:Farbe_sen.c   ****         printf("Failed to open device\n");
  43              		.loc 1 45 0
  44 0024 9C009FE5 		ldr	r0, .L5+12
  45 0028 FEFFFFEB 		bl	printf
  46              	.LVL1:
  46:Farbe_sen.c   ****         return -1;
  47              		.loc 1 46 0
  48 002c 0000E0E3 		mvn	r0, #0
  49 0030 1F0000EA 		b	.L3
  50              	.L2:
  47:Farbe_sen.c   ****     }
  48:Farbe_sen.c   ****     
  49:Farbe_sen.c   ****     pColorSensor =(UART*)mmap(0, sizeof(UART),PROT_READ | PROT_WRITE, MAP_FILE | MAP_SHARED,file,0)
  51              		.loc 1 49 0
  52 0034 00008DE5 		str	r0, [sp]
  53 0038 0000A0E3 		mov	r0, #0
  54 003c 04008DE5 		str	r0, [sp, #4]
  55 0040 84109FE5 		ldr	r1, .L5+16
  56 0044 0320A0E3 		mov	r2, #3
  57 0048 0130A0E3 		mov	r3, #1
  58 004c FEFFFFEB 		bl	mmap
  59              	.LVL2:
  60 0050 78309FE5 		ldr	r3, .L5+20
  61 0054 000083E5 		str	r0, [r3]
  50:Farbe_sen.c   ****     
  51:Farbe_sen.c   ****     if (pColorSensor == MAP_FAILED)
  62              		.loc 1 51 0
  63 0058 010070E3 		cmn	r0, #1
  64 005c 0300001A 		bne	.L4
  52:Farbe_sen.c   ****     {
  53:Farbe_sen.c   ****         printf("Failed to map Color Sensor device\n");
  65              		.loc 1 53 0
  66 0060 6C009FE5 		ldr	r0, .L5+24
  67 0064 FEFFFFEB 		bl	printf
  68              	.LVL3:
  54:Farbe_sen.c   ****         return -1;
  69              		.loc 1 54 0
  70 0068 0000E0E3 		mvn	r0, #0
  71 006c 100000EA 		b	.L3
  72              	.L4:
  55:Farbe_sen.c   ****     }
  56:Farbe_sen.c   ****     DevCon.Mode[PORT]=RGB_RAW;      //DeviceConnection
  73              		.loc 1 56 0
  74 0070 60309FE5 		ldr	r3, .L5+28
  75 0074 001093E5 		ldr	r1, [r3]
  76 0078 5C209FE5 		ldr	r2, .L5+32
  77 007c 013082E0 		add	r3, r2, r1
  78 0080 0400A0E3 		mov	r0, #4
  79 0084 0800C3E5 		strb	r0, [r3, #8]
  57:Farbe_sen.c   ****     DevCon.Connection[PORT]=CONN_INPUT_UART;   //Universal Asynchronous Receiver/Transmitter
  80              		.loc 1 57 0
  81 0088 7A00A0E3 		mov	r0, #122
  82 008c 0100C2E7 		strb	r0, [r2, r1]
  58:Farbe_sen.c   ****     DevCon.Type[PORT]=COLOR_SENSOR_TYPE;
  83              		.loc 1 58 0
  84 0090 1D10A0E3 		mov	r1, #29
  85 0094 0410C3E5 		strb	r1, [r3, #4]
  59:Farbe_sen.c   ****     ioctl(file,UART_SET_CONN,&DevCon);
  86              		.loc 1 59 0
  87 0098 24309FE5 		ldr	r3, .L5+8
  88 009c 000093E5 		ldr	r0, [r3]
  89 00a0 38109FE5 		ldr	r1, .L5+36
  90 00a4 FEFFFFEB 		bl	ioctl
  91              	.LVL4:
  60:Farbe_sen.c   ****     printf("Device is ready \n\r");
  92              		.loc 1 60 0
  93 00a8 34009FE5 		ldr	r0, .L5+40
  94 00ac FEFFFFEB 		bl	printf
  95              	.LVL5:
  61:Farbe_sen.c   ****     return 0;
  96              		.loc 1 61 0
  97 00b0 0000A0E3 		mov	r0, #0
  98              	.L3:
  62:Farbe_sen.c   **** }
  99              		.loc 1 62 0
 100 00b4 0CD08DE2 		add	sp, sp, #12
 101              		@ sp needed
 102 00b8 04F09DE4 		ldr	pc, [sp], #4
 103              	.L6:
 104              		.align	2
 105              	.L5:
 106 00bc 00000000 		.word	.LC0
 107 00c0 02101000 		.word	1052674
 108 00c4 00000000 		.word	file
 109 00c8 10000000 		.word	.LC1
 110 00cc F8A60000 		.word	42744
 111 00d0 00000000 		.word	pColorSensor
 112 00d4 28000000 		.word	.LC2
 113 00d8 00000000 		.word	.LANCHOR0
 114 00dc 00000000 		.word	DevCon
 115 00e0 00750CC0 		.word	-1072925440
 116 00e4 4C000000 		.word	.LC3
 117              		.cfi_endproc
 118              	.LFE11:
 119              		.fnend
 121              		.align	2
 122              		.global	ColSen_close
 124              	ColSen_close:
 125              		.fnstart
 126              	.LFB13:
  63:Farbe_sen.c   **** #endif
  64:Farbe_sen.c   **** 
  65:Farbe_sen.c   **** int ColSen_getData()   //Center:zenteral Position
  66:Farbe_sen.c   **** {
  67:Farbe_sen.c   **** #ifdef __linux__
  68:Farbe_sen.c   ****     int MAX_Werte=0;
  69:Farbe_sen.c   ****     float rot,gruen,blau,blank;
  70:Farbe_sen.c   ****     int Color_color =0;
  71:Farbe_sen.c   ****     int Color_data_r=0;
  72:Farbe_sen.c   ****     int Color_data_g=0;
  73:Farbe_sen.c   ****     int Color_data_b=0;
  74:Farbe_sen.c   ****     int Color_data_blank=0;
  75:Farbe_sen.c   ****     sleep(1);
  76:Farbe_sen.c   ****     Color_data_r=(unsigned char)pColorSensor->Raw[PORT][0][0]+(unsigned char)(pColorSensor->Raw[POR
  77:Farbe_sen.c   ****     Color_data_g=(unsigned char)pColorSensor->Raw[PORT][0][2]+(unsigned char)(pColorSensor->Raw[POR
  78:Farbe_sen.c   ****     Color_data_b=(unsigned char)pColorSensor->Raw[PORT][0][4]+(unsigned char)(pColorSensor->Raw[POR
  79:Farbe_sen.c   ****     Color_data_blank=(unsigned int)pColorSensor->Raw[PORT][0][6]+(unsigned int)(pColorSensor->Raw[P
  80:Farbe_sen.c   ****     //usleep(100000);
  81:Farbe_sen.c   ****     
  82:Farbe_sen.c   ****     
  83:Farbe_sen.c   ****     
  84:Farbe_sen.c   ****     
  85:Farbe_sen.c   ****     //MAX_Werte=MAX_RGB(MAX_RGB(Color_data_r, Color_data_g),Color_data_b);
  86:Farbe_sen.c   ****     /*rot   =(Color_data_r*1.0)/MAX_Werte;
  87:Farbe_sen.c   ****     gruen =(Color_data_g*1.0)/MAX_Werte;
  88:Farbe_sen.c   ****     blau  =(Color_data_b*1.0)/MAX_Werte;
  89:Farbe_sen.c   ****     Color_color=Color_col(rot,gruen,blau);
  90:Farbe_sen.c   ****     printf("COLOR_MAX is %d ", MAX_Werte);*/
  91:Farbe_sen.c   ****     Color_color=Color_col(Color_data_r*1.0,Color_data_g*1.0,Color_data_b*1.0);
  92:Farbe_sen.c   ****     printf("color_data is (%5d, %5d, %5d, %5d)",Color_data_r,Color_data_g,Color_data_b,Color_data_b
  93:Farbe_sen.c   ****     //printf("%5d, %5d, %5d, %5d", Color_data_r,Color_data_g,Color_data_b,Color_data_blank);
  94:Farbe_sen.c   **** #if 1
  95:Farbe_sen.c   ****     switch(Color_color){
  96:Farbe_sen.c   ****         case 0:
  97:Farbe_sen.c   ****             printf("\033[1;30m   %d\033[0m",Color_color);
  98:Farbe_sen.c   ****             break;
  99:Farbe_sen.c   ****             
 100:Farbe_sen.c   ****         case 1:
 101:Farbe_sen.c   ****             printf("\033[1;34m   %d\033[0m",Color_color);
 102:Farbe_sen.c   ****             break;
 103:Farbe_sen.c   ****             
 104:Farbe_sen.c   ****         case 2:
 105:Farbe_sen.c   ****             printf("\033[1;33m   %d\033[0m",Color_color);
 106:Farbe_sen.c   ****             break;
 107:Farbe_sen.c   ****             
 108:Farbe_sen.c   ****         case 3:
 109:Farbe_sen.c   ****             printf("\033[1;32m   %d\033[0m",Color_color);
 110:Farbe_sen.c   ****             break;
 111:Farbe_sen.c   ****             
 112:Farbe_sen.c   ****         case 4:
 113:Farbe_sen.c   ****             printf("\033[1;35m   %d\033[0m",Color_color);
 114:Farbe_sen.c   ****             break;
 115:Farbe_sen.c   ****             
 116:Farbe_sen.c   ****         case 5:
 117:Farbe_sen.c   ****             printf("\033[1;31m   %d\033[0m",Color_color);
 118:Farbe_sen.c   ****             break;
 119:Farbe_sen.c   ****     }
 120:Farbe_sen.c   **** #endif
 121:Farbe_sen.c   ****     printf("\n\r");
 122:Farbe_sen.c   **** //    sleep(1);
 123:Farbe_sen.c   ****     return Color_color;
 124:Farbe_sen.c   ****     // senden daten zu PC
 125:Farbe_sen.c   **** #endif
 126:Farbe_sen.c   ****     
 127:Farbe_sen.c   **** #ifndef __linux__
 128:Farbe_sen.c   ****     return 0;
 129:Farbe_sen.c   **** #endif
 130:Farbe_sen.c   **** }
 131:Farbe_sen.c   **** 
 132:Farbe_sen.c   **** int ColSen_close()
 133:Farbe_sen.c   **** {
 127              		.loc 1 133 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 00e8 08402DE9 		stmfd	sp!, {r3, lr}
 132              		.save {r3, lr}
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 3, -8
 135              		.cfi_offset 14, -4
 134:Farbe_sen.c   ****     printf("Close the Color Sensor");
 136              		.loc 1 134 0
 137 00ec 14009FE5 		ldr	r0, .L8
 138 00f0 FEFFFFEB 		bl	printf
 139              	.LVL6:
 135:Farbe_sen.c   **** #ifdef __linux__
 136:Farbe_sen.c   ****     close(file);
 140              		.loc 1 136 0
 141 00f4 10309FE5 		ldr	r3, .L8+4
 142 00f8 000093E5 		ldr	r0, [r3]
 143 00fc FEFFFFEB 		bl	close
 144              	.LVL7:
 137:Farbe_sen.c   **** #endif
 138:Farbe_sen.c   ****     return 0;
 139:Farbe_sen.c   **** }
 145              		.loc 1 139 0
 146 0100 0000A0E3 		mov	r0, #0
 147 0104 0880BDE8 		ldmfd	sp!, {r3, pc}
 148              	.L9:
 149              		.align	2
 150              	.L8:
 151 0108 60000000 		.word	.LC4
 152 010c 00000000 		.word	file
 153              		.cfi_endproc
 154              	.LFE13:
 155              		.fnend
 157              		.align	2
 158              		.global	MAX_RGB
 160              	MAX_RGB:
 161              		.fnstart
 162              	.LFB14:
 140:Farbe_sen.c   **** 
 141:Farbe_sen.c   **** 
 142:Farbe_sen.c   **** int MAX_RGB(int a,int b)
 143:Farbe_sen.c   **** {
 163              		.loc 1 143 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168              	.LVL8:
 144:Farbe_sen.c   ****     if (a>=b) {
 145:Farbe_sen.c   ****         return a;
 146:Farbe_sen.c   ****     }else{
 147:Farbe_sen.c   ****         return b;
 148:Farbe_sen.c   ****     }
 149:Farbe_sen.c   **** }
 169              		.loc 1 149 0
 170 0110 010050E1 		cmp	r0, r1
 171 0114 0100A0B1 		movlt	r0, r1
 172              	.LVL9:
 173 0118 1EFF2FE1 		bx	lr
 174              		.cfi_endproc
 175              	.LFE14:
 176              		.fnend
 178              		.global	__aeabi_fcmpge
 179              		.global	__aeabi_f2d
 180              		.global	__aeabi_dmul
 181              		.global	__aeabi_dcmpgt
 182              		.global	__aeabi_dcmplt
 183              		.global	__aeabi_fcmpgt
 184              		.global	__aeabi_fcmplt
 185              		.global	__aeabi_ddiv
 186              		.global	__aeabi_dcmpge
 187              		.global	__aeabi_fadd
 188              		.global	__aeabi_fmul
 189              		.align	2
 190              		.global	Color_col
 192              	Color_col:
 193              		.fnstart
 194              	.LFB15:
 150:Farbe_sen.c   **** 
 151:Farbe_sen.c   **** 
 152:Farbe_sen.c   **** /*FARBE Color_col(float rot, float gruen,float blau)
 153:Farbe_sen.c   **** {
 154:Farbe_sen.c   ****     
 155:Farbe_sen.c   ****     int Color_col=0;
 156:Farbe_sen.c   ****     if (rot==1) {
 157:Farbe_sen.c   ****         if(gruen>0.5)
 158:Farbe_sen.c   ****         {
 159:Farbe_sen.c   ****             Color_col=GELB;
 160:Farbe_sen.c   ****         }else if ((gruen<0.3)&&(blau<0.1)){
 161:Farbe_sen.c   ****             Color_col=ROT;
 162:Farbe_sen.c   ****         }else{
 163:Farbe_sen.c   ****             Color_col=ORANGE;
 164:Farbe_sen.c   ****         }
 165:Farbe_sen.c   ****     }
 166:Farbe_sen.c   ****     if(gruen==1)
 167:Farbe_sen.c   ****     {
 168:Farbe_sen.c   ****         if((rot<0.4)||(blau<0.3))
 169:Farbe_sen.c   ****         {
 170:Farbe_sen.c   ****             Color_col=GRUEN;
 171:Farbe_sen.c   ****         }else if (blau>0.8){
 172:Farbe_sen.c   ****             Color_col=BLAU;
 173:Farbe_sen.c   ****         }else{
 174:Farbe_sen.c   ****             Color_col=WEISS;
 175:Farbe_sen.c   ****         }
 176:Farbe_sen.c   ****     }
 177:Farbe_sen.c   ****     return Color_col;
 178:Farbe_sen.c   **** }
 179:Farbe_sen.c   **** */
 180:Farbe_sen.c   **** FARBE Color_col(float rot, float gruen,float blau)
 181:Farbe_sen.c   **** {
 195              		.loc 1 181 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 16
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              	.LVL10:
 200 011c F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 201              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 202              		.cfi_def_cfa_offset 36
 203              		.cfi_offset 4, -36
 204              		.cfi_offset 5, -32
 205              		.cfi_offset 6, -28
 206              		.cfi_offset 7, -24
 207              		.cfi_offset 8, -20
 208              		.cfi_offset 9, -16
 209              		.cfi_offset 10, -12
 210              		.cfi_offset 11, -8
 211              		.cfi_offset 14, -4
 212              		.pad #20
 213 0120 14D04DE2 		sub	sp, sp, #20
 214              		.cfi_def_cfa_offset 56
 215 0124 00B0A0E1 		mov	fp, r0
 216 0128 01A0A0E1 		mov	r10, r1
 217 012c 04208DE5 		str	r2, [sp, #4]	@ float
 218              	.LVL11:
 182:Farbe_sen.c   ****     int Farbe=-1;
 183:Farbe_sen.c   ****     
 184:Farbe_sen.c   ****     if ((rot>=20)||(gruen>=20)||(blau>=20)){
 219              		.loc 1 184 0
 220 0130 78139FE5 		ldr	r1, .L64
 221              	.LVL12:
 222 0134 FEFFFFEB 		bl	__aeabi_fcmpge
 223              	.LVL13:
 224 0138 000050E3 		cmp	r0, #0
 225 013c 0900001A 		bne	.L12
 226              		.loc 1 184 0 is_stmt 0 discriminator 1
 227 0140 0A00A0E1 		mov	r0, r10
 228 0144 64139FE5 		ldr	r1, .L64
 229 0148 FEFFFFEB 		bl	__aeabi_fcmpge
 230              	.LVL14:
 231 014c 000050E3 		cmp	r0, #0
 232 0150 0400001A 		bne	.L12
 233 0154 04009DE5 		ldr	r0, [sp, #4]	@ float
 234 0158 50139FE5 		ldr	r1, .L64
 235 015c FEFFFFEB 		bl	__aeabi_fcmpge
 236              	.LVL15:
 237 0160 000050E3 		cmp	r0, #0
 238 0164 C600000A 		beq	.L59
 239              	.L12:
 185:Farbe_sen.c   ****         if ((rot>blau*1.35)&&(gruen>blau*1.35))
 240              		.loc 1 185 0 is_stmt 1
 241 0168 0B00A0E1 		mov	r0, fp
 242 016c FEFFFFEB 		bl	__aeabi_f2d
 243              	.LVL16:
 244 0170 0040A0E1 		mov	r4, r0
 245 0174 0150A0E1 		mov	r5, r1
 246 0178 04009DE5 		ldr	r0, [sp, #4]	@ float
 247 017c FEFFFFEB 		bl	__aeabi_f2d
 248              	.LVL17:
 249 0180 F800CDE1 		strd	r0, [sp, #8]
 250 0184 28239FE5 		ldr	r2, .L64+4
 251 0188 28339FE5 		ldr	r3, .L64+8
 252 018c FEFFFFEB 		bl	__aeabi_dmul
 253              	.LVL18:
 254 0190 0080A0E1 		mov	r8, r0
 255 0194 0190A0E1 		mov	r9, r1
 256 0198 0400A0E1 		mov	r0, r4
 257 019c 0510A0E1 		mov	r1, r5
 258 01a0 0820A0E1 		mov	r2, r8
 259 01a4 0930A0E1 		mov	r3, r9
 260 01a8 FEFFFFEB 		bl	__aeabi_dcmpgt
 261              	.LVL19:
 262 01ac 000050E3 		cmp	r0, #0
 263 01b0 B500000A 		beq	.L60
 264              		.loc 1 185 0 is_stmt 0 discriminator 1
 265 01b4 0A00A0E1 		mov	r0, r10
 266 01b8 FEFFFFEB 		bl	__aeabi_f2d
 267              	.LVL20:
 268 01bc 0060A0E1 		mov	r6, r0
 269 01c0 0170A0E1 		mov	r7, r1
 270 01c4 0800A0E1 		mov	r0, r8
 271 01c8 0910A0E1 		mov	r1, r9
 272 01cc 0620A0E1 		mov	r2, r6
 273 01d0 0730A0E1 		mov	r3, r7
 274 01d4 FEFFFFEB 		bl	__aeabi_dcmplt
 275              	.LVL21:
 276 01d8 000050E3 		cmp	r0, #0
 277 01dc AC00000A 		beq	.L61
 186:Farbe_sen.c   ****         {
 187:Farbe_sen.c   ****             if (((rot>gruen)&&(rot<gruen*1.1))||((gruen>rot)&&(gruen<rot*1.1))){
 278              		.loc 1 187 0 is_stmt 1
 279 01e0 0B00A0E1 		mov	r0, fp
 280 01e4 0A10A0E1 		mov	r1, r10
 281 01e8 FEFFFFEB 		bl	__aeabi_fcmpgt
 282              	.LVL22:
 283 01ec 000050E3 		cmp	r0, #0
 284 01f0 0C00000A 		beq	.L17
 285              		.loc 1 187 0 is_stmt 0 discriminator 1
 286 01f4 0600A0E1 		mov	r0, r6
 287 01f8 0710A0E1 		mov	r1, r7
 288 01fc B0229FE5 		ldr	r2, .L64+4
 289 0200 B4329FE5 		ldr	r3, .L64+12
 290 0204 FEFFFFEB 		bl	__aeabi_dmul
 291              	.LVL23:
 292 0208 0020A0E1 		mov	r2, r0
 293 020c 0130A0E1 		mov	r3, r1
 294 0210 0400A0E1 		mov	r0, r4
 295 0214 0510A0E1 		mov	r1, r5
 296 0218 FEFFFFEB 		bl	__aeabi_dcmplt
 297              	.LVL24:
 298 021c 000050E3 		cmp	r0, #0
 188:Farbe_sen.c   ****                 Farbe= WEISS;
 299              		.loc 1 188 0 is_stmt 1 discriminator 1
 300 0220 0000A013 		movne	r0, #0
 187:Farbe_sen.c   ****                 Farbe= WEISS;
 301              		.loc 1 187 0 discriminator 1
 302 0224 9F00001A 		bne	.L13
 303              	.L17:
 187:Farbe_sen.c   ****                 Farbe= WEISS;
 304              		.loc 1 187 0 is_stmt 0 discriminator 2
 305 0228 0B00A0E1 		mov	r0, fp
 306 022c 0A10A0E1 		mov	r1, r10
 307 0230 FEFFFFEB 		bl	__aeabi_fcmplt
 308              	.LVL25:
 309 0234 000050E3 		cmp	r0, #0
 310 0238 0C00000A 		beq	.L19
 187:Farbe_sen.c   ****                 Farbe= WEISS;
 311              		.loc 1 187 0 discriminator 1
 312 023c 0400A0E1 		mov	r0, r4
 313 0240 0510A0E1 		mov	r1, r5
 314 0244 68229FE5 		ldr	r2, .L64+4
 315 0248 6C329FE5 		ldr	r3, .L64+12
 316 024c FEFFFFEB 		bl	__aeabi_dmul
 317              	.LVL26:
 318 0250 0020A0E1 		mov	r2, r0
 319 0254 0130A0E1 		mov	r3, r1
 320 0258 0600A0E1 		mov	r0, r6
 321 025c 0710A0E1 		mov	r1, r7
 322 0260 FEFFFFEB 		bl	__aeabi_dcmplt
 323              	.LVL27:
 324 0264 000050E3 		cmp	r0, #0
 325              		.loc 1 188 0 is_stmt 1 discriminator 1
 326 0268 0000A013 		movne	r0, #0
 187:Farbe_sen.c   ****                 Farbe= WEISS;
 327              		.loc 1 187 0 discriminator 1
 328 026c 8D00001A 		bne	.L13
 329              	.L19:
 189:Farbe_sen.c   ****             }else if(((rot>gruen/0.75)&&(rot<gruen/0.55))||((rot>blau/0.25)&&(rot<blau/0.15))){
 330              		.loc 1 189 0
 331 0270 0600A0E1 		mov	r0, r6
 332 0274 0710A0E1 		mov	r1, r7
 333 0278 0020A0E3 		mov	r2, #0
 334 027c 3C329FE5 		ldr	r3, .L64+16
 335 0280 FEFFFFEB 		bl	__aeabi_ddiv
 336              	.LVL28:
 337 0284 0020A0E1 		mov	r2, r0
 338 0288 0130A0E1 		mov	r3, r1
 339 028c 0400A0E1 		mov	r0, r4
 340 0290 0510A0E1 		mov	r1, r5
 341 0294 FEFFFFEB 		bl	__aeabi_dcmpgt
 342              	.LVL29:
 343 0298 000050E3 		cmp	r0, #0
 344 029c 0C00000A 		beq	.L21
 345              		.loc 1 189 0 is_stmt 0 discriminator 1
 346 02a0 0600A0E1 		mov	r0, r6
 347 02a4 0710A0E1 		mov	r1, r7
 348 02a8 04229FE5 		ldr	r2, .L64+4
 349 02ac 10329FE5 		ldr	r3, .L64+20
 350 02b0 FEFFFFEB 		bl	__aeabi_ddiv
 351              	.LVL30:
 352 02b4 0020A0E1 		mov	r2, r0
 353 02b8 0130A0E1 		mov	r3, r1
 354 02bc 0400A0E1 		mov	r0, r4
 355 02c0 0510A0E1 		mov	r1, r5
 356 02c4 FEFFFFEB 		bl	__aeabi_dcmplt
 357              	.LVL31:
 358 02c8 000050E3 		cmp	r0, #0
 190:Farbe_sen.c   ****                 Farbe=  GELB;
 359              		.loc 1 190 0 is_stmt 1 discriminator 1
 360 02cc 0200A013 		movne	r0, #2
 189:Farbe_sen.c   ****             }else if(((rot>gruen/0.75)&&(rot<gruen/0.55))||((rot>blau/0.25)&&(rot<blau/0.15))){
 361              		.loc 1 189 0 discriminator 1
 362 02d0 7400001A 		bne	.L13
 363              	.L21:
 189:Farbe_sen.c   ****             }else if(((rot>gruen/0.75)&&(rot<gruen/0.55))||((rot>blau/0.25)&&(rot<blau/0.15))){
 364              		.loc 1 189 0 is_stmt 0 discriminator 2
 365 02d4 D800CDE1 		ldrd	r0, [sp, #8]
 366 02d8 0020A0E3 		mov	r2, #0
 367 02dc E4319FE5 		ldr	r3, .L64+24
 368 02e0 FEFFFFEB 		bl	__aeabi_dmul
 369              	.LVL32:
 370 02e4 0020A0E1 		mov	r2, r0
 371 02e8 0130A0E1 		mov	r3, r1
 372 02ec 0400A0E1 		mov	r0, r4
 373 02f0 0510A0E1 		mov	r1, r5
 374 02f4 FEFFFFEB 		bl	__aeabi_dcmpgt
 375              	.LVL33:
 376 02f8 000050E3 		cmp	r0, #0
 377 02fc 0B00000A 		beq	.L23
 189:Farbe_sen.c   ****             }else if(((rot>gruen/0.75)&&(rot<gruen/0.55))||((rot>blau/0.25)&&(rot<blau/0.15))){
 378              		.loc 1 189 0 discriminator 1
 379 0300 D800CDE1 		ldrd	r0, [sp, #8]
 380 0304 C0219FE5 		ldr	r2, .L64+28
 381 0308 C0319FE5 		ldr	r3, .L64+32
 382 030c FEFFFFEB 		bl	__aeabi_ddiv
 383              	.LVL34:
 384 0310 0020A0E1 		mov	r2, r0
 385 0314 0130A0E1 		mov	r3, r1
 386 0318 0400A0E1 		mov	r0, r4
 387 031c 0510A0E1 		mov	r1, r5
 388 0320 FEFFFFEB 		bl	__aeabi_dcmplt
 389              	.LVL35:
 390 0324 000050E3 		cmp	r0, #0
 391              		.loc 1 190 0 is_stmt 1 discriminator 1
 392 0328 0200A013 		movne	r0, #2
 189:Farbe_sen.c   ****             }else if(((rot>gruen/0.75)&&(rot<gruen/0.55))||((rot>blau/0.25)&&(rot<blau/0.15))){
 393              		.loc 1 189 0 discriminator 1
 394 032c 5D00001A 		bne	.L13
 395              	.L23:
 191:Farbe_sen.c   ****             }else if ((rot>=2.5*gruen)&&(rot>0.4*blau)&&(gruen>=2*blau)){
 396              		.loc 1 191 0
 397 0330 0600A0E1 		mov	r0, r6
 398 0334 0710A0E1 		mov	r1, r7
 399 0338 0020A0E3 		mov	r2, #0
 400 033c 90319FE5 		ldr	r3, .L64+36
 401 0340 FEFFFFEB 		bl	__aeabi_dmul
 402              	.LVL36:
 403 0344 0020A0E1 		mov	r2, r0
 404 0348 0130A0E1 		mov	r3, r1
 405 034c 0400A0E1 		mov	r0, r4
 406 0350 0510A0E1 		mov	r1, r5
 407 0354 FEFFFFEB 		bl	__aeabi_dcmpge
 408              	.LVL37:
 409 0358 000050E3 		cmp	r0, #0
 410 035c 1300000A 		beq	.L25
 411              		.loc 1 191 0 is_stmt 0 discriminator 1
 412 0360 D800CDE1 		ldrd	r0, [sp, #8]
 413 0364 48219FE5 		ldr	r2, .L64+4
 414 0368 68319FE5 		ldr	r3, .L64+40
 415 036c FEFFFFEB 		bl	__aeabi_dmul
 416              	.LVL38:
 417 0370 0020A0E1 		mov	r2, r0
 418 0374 0130A0E1 		mov	r3, r1
 419 0378 0400A0E1 		mov	r0, r4
 420 037c 0510A0E1 		mov	r1, r5
 421 0380 FEFFFFEB 		bl	__aeabi_dcmpgt
 422              	.LVL39:
 423 0384 000050E3 		cmp	r0, #0
 424 0388 0800000A 		beq	.L25
 425 038c 04009DE5 		ldr	r0, [sp, #4]	@ float
 426 0390 0010A0E1 		mov	r1, r0
 427 0394 FEFFFFEB 		bl	__aeabi_fadd
 428              	.LVL40:
 429 0398 0010A0E1 		mov	r1, r0
 430 039c 0A00A0E1 		mov	r0, r10
 431 03a0 FEFFFFEB 		bl	__aeabi_fcmpge
 432              	.LVL41:
 433 03a4 000050E3 		cmp	r0, #0
 192:Farbe_sen.c   ****                 Farbe=  ORANGE;
 434              		.loc 1 192 0 is_stmt 1 discriminator 1
 435 03a8 0500A013 		movne	r0, #5
 191:Farbe_sen.c   ****             }else if ((rot>=2.5*gruen)&&(rot>0.4*blau)&&(gruen>=2*blau)){
 436              		.loc 1 191 0 discriminator 1
 437 03ac 3D00001A 		bne	.L13
 438              	.L25:
 193:Farbe_sen.c   ****             }else if ((rot>2*gruen)&&(rot>3*blau)) {
 439              		.loc 1 193 0
 440 03b0 0A00A0E1 		mov	r0, r10
 441 03b4 0A10A0E1 		mov	r1, r10
 442 03b8 FEFFFFEB 		bl	__aeabi_fadd
 443              	.LVL42:
 444 03bc 0040A0E1 		mov	r4, r0
 445 03c0 0B00A0E1 		mov	r0, fp
 446 03c4 0410A0E1 		mov	r1, r4
 447 03c8 FEFFFFEB 		bl	__aeabi_fcmpgt
 448              	.LVL43:
 449 03cc 000050E3 		cmp	r0, #0
 450 03d0 0800000A 		beq	.L28
 451              		.loc 1 193 0 is_stmt 0 discriminator 1
 452 03d4 04009DE5 		ldr	r0, [sp, #4]	@ float
 453 03d8 FC109FE5 		ldr	r1, .L64+44
 454 03dc FEFFFFEB 		bl	__aeabi_fmul
 455              	.LVL44:
 456 03e0 0010A0E1 		mov	r1, r0
 457 03e4 0B00A0E1 		mov	r0, fp
 458 03e8 FEFFFFEB 		bl	__aeabi_fcmpgt
 459              	.LVL45:
 460 03ec 000050E3 		cmp	r0, #0
 194:Farbe_sen.c   ****                 Farbe=  ROT;
 461              		.loc 1 194 0 is_stmt 1 discriminator 1
 462 03f0 0400A013 		movne	r0, #4
 193:Farbe_sen.c   ****             }else if ((rot>2*gruen)&&(rot>3*blau)) {
 463              		.loc 1 193 0 discriminator 1
 464 03f4 2B00001A 		bne	.L13
 465              	.L28:
 195:Farbe_sen.c   ****             }else if ((gruen>2*rot)&&(gruen>2*blau)) {
 466              		.loc 1 195 0
 467 03f8 0B00A0E1 		mov	r0, fp
 468 03fc 0B10A0E1 		mov	r1, fp
 469 0400 FEFFFFEB 		bl	__aeabi_fadd
 470              	.LVL46:
 471 0404 0050A0E1 		mov	r5, r0
 472 0408 0A00A0E1 		mov	r0, r10
 473 040c 0510A0E1 		mov	r1, r5
 474 0410 FEFFFFEB 		bl	__aeabi_fcmpgt
 475              	.LVL47:
 476 0414 000050E3 		cmp	r0, #0
 477 0418 0800000A 		beq	.L30
 478              		.loc 1 195 0 is_stmt 0 discriminator 1
 479 041c 04009DE5 		ldr	r0, [sp, #4]	@ float
 480 0420 0010A0E1 		mov	r1, r0
 481 0424 FEFFFFEB 		bl	__aeabi_fadd
 482              	.LVL48:
 483 0428 0010A0E1 		mov	r1, r0
 484 042c 0A00A0E1 		mov	r0, r10
 485 0430 FEFFFFEB 		bl	__aeabi_fcmpgt
 486              	.LVL49:
 487 0434 000050E3 		cmp	r0, #0
 196:Farbe_sen.c   ****                 Farbe=  GRUEN;
 488              		.loc 1 196 0 is_stmt 1 discriminator 1
 489 0438 0300A013 		movne	r0, #3
 195:Farbe_sen.c   ****             }else if ((gruen>2*rot)&&(gruen>2*blau)) {
 490              		.loc 1 195 0 discriminator 1
 491 043c 1900001A 		bne	.L13
 492              	.L30:
 197:Farbe_sen.c   ****             }else if ((blau>gruen)&&(blau<2*gruen)&&(blau>2*rot)) {
 493              		.loc 1 197 0
 494 0440 0A00A0E1 		mov	r0, r10
 495 0444 04109DE5 		ldr	r1, [sp, #4]	@ float
 496 0448 FEFFFFEB 		bl	__aeabi_fcmplt
 497              	.LVL50:
 498 044c 000050E3 		cmp	r0, #0
 499 0450 1100000A 		beq	.L62
 500              		.loc 1 197 0 is_stmt 0 discriminator 1
 501 0454 04009DE5 		ldr	r0, [sp, #4]	@ float
 502 0458 0410A0E1 		mov	r1, r4
 503 045c FEFFFFEB 		bl	__aeabi_fcmplt
 504              	.LVL51:
 505 0460 000050E3 		cmp	r0, #0
 506 0464 0E00000A 		beq	.L63
 507 0468 04009DE5 		ldr	r0, [sp, #4]	@ float
 508 046c 0510A0E1 		mov	r1, r5
 509 0470 FEFFFFEB 		bl	__aeabi_fcmpgt
 510              	.LVL52:
 511 0474 000050E3 		cmp	r0, #0
 182:Farbe_sen.c   ****     
 512              		.loc 1 182 0 is_stmt 1 discriminator 1
 513 0478 0100A013 		movne	r0, #1
 514 047c 0000E003 		mvneq	r0, #0
 515 0480 080000EA 		b	.L13
 516              	.L59:
 182:Farbe_sen.c   ****     
 517              		.loc 1 182 0 is_stmt 0
 518 0484 0000E0E3 		mvn	r0, #0
 519 0488 060000EA 		b	.L13
 520              	.L60:
 521 048c 0000E0E3 		mvn	r0, #0
 522 0490 040000EA 		b	.L13
 523              	.L61:
 524 0494 0000E0E3 		mvn	r0, #0
 525 0498 020000EA 		b	.L13
 526              	.L62:
 527 049c 0000E0E3 		mvn	r0, #0
 528 04a0 000000EA 		b	.L13
 529              	.L63:
 530 04a4 0000E0E3 		mvn	r0, #0
 531              	.L13:
 532              	.LVL53:
 198:Farbe_sen.c   ****                 Farbe=  BLAU;
 199:Farbe_sen.c   ****             }
 200:Farbe_sen.c   ****         }
 201:Farbe_sen.c   ****     }
 202:Farbe_sen.c   ****     return Farbe;
 203:Farbe_sen.c   **** }
 533              		.loc 1 203 0 is_stmt 1
 534 04a8 14D08DE2 		add	sp, sp, #20
 535              		@ sp needed
 536 04ac F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 537              	.LVL54:
 538              	.L65:
 539              		.align	2
 540              	.L64:
 541 04b0 0000A041 		.word	1101004800
 542 04b4 9A999999 		.word	-1717986918
 543 04b8 9999F53F 		.word	1073060249
 544 04bc 9999F13F 		.word	1072798105
 545 04c0 0000E83F 		.word	1072168960
 546 04c4 9999E13F 		.word	1071749529
 547 04c8 00001040 		.word	1074790400
 548 04cc 33333333 		.word	858993459
 549 04d0 3333C33F 		.word	1069757235
 550 04d4 00000440 		.word	1074003968
 551 04d8 9999D93F 		.word	1071225241
 552 04dc 00004040 		.word	1077936128
 553              		.cfi_endproc
 554              	.LFE15:
 555              		.fnend
 557              		.global	__aeabi_i2d
 558              		.global	__aeabi_d2f
 559              		.align	2
 560              		.global	ColSen_getData
 562              	ColSen_getData:
 563              		.fnstart
 564              	.LFB12:
  66:Farbe_sen.c   **** #ifdef __linux__
 565              		.loc 1 66 0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569 04e0 F0432DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
 570              		.save {r4, r5, r6, r7, r8, r9, lr}
 571              		.cfi_def_cfa_offset 28
 572              		.cfi_offset 4, -28
 573              		.cfi_offset 5, -24
 574              		.cfi_offset 6, -20
 575              		.cfi_offset 7, -16
 576              		.cfi_offset 8, -12
 577              		.cfi_offset 9, -8
 578              		.cfi_offset 14, -4
 579              		.pad #12
 580 04e4 0CD04DE2 		sub	sp, sp, #12
 581              		.cfi_def_cfa_offset 40
 582              	.LVL55:
  75:Farbe_sen.c   ****     Color_data_r=(unsigned char)pColorSensor->Raw[PORT][0][0]+(unsigned char)(pColorSensor->Raw[POR
 583              		.loc 1 75 0
 584 04e8 0100A0E3 		mov	r0, #1
 585 04ec FEFFFFEB 		bl	sleep
 586              	.LVL56:
  76:Farbe_sen.c   ****     Color_data_g=(unsigned char)pColorSensor->Raw[PORT][0][2]+(unsigned char)(pColorSensor->Raw[POR
 587              		.loc 1 76 0
 588 04f0 28319FE5 		ldr	r3, .L75
 589 04f4 003093E5 		ldr	r3, [r3]
 590 04f8 24219FE5 		ldr	r2, .L75+4
 591 04fc 002092E5 		ldr	r2, [r2]
 592 0500 964DA0E3 		mov	r4, #9600
 593 0504 923424E0 		mla	r4, r2, r4, r3
 594 0508 18319FE5 		ldr	r3, .L75+8
 595 050c 0380D4E7 		ldrb	r8, [r4, r3]	@ zero_extendqisi2
 596              	.LVL57:
  77:Farbe_sen.c   ****     Color_data_b=(unsigned char)pColorSensor->Raw[PORT][0][4]+(unsigned char)(pColorSensor->Raw[POR
 597              		.loc 1 77 0
 598 0510 023083E2 		add	r3, r3, #2
 599 0514 0370D4E7 		ldrb	r7, [r4, r3]	@ zero_extendqisi2
 600              	.LVL58:
  78:Farbe_sen.c   ****     Color_data_blank=(unsigned int)pColorSensor->Raw[PORT][0][6]+(unsigned int)(pColorSensor->Raw[P
 601              		.loc 1 78 0
 602 0518 023083E2 		add	r3, r3, #2
 603 051c 0360D4E7 		ldrb	r6, [r4, r3]	@ zero_extendqisi2
 604              	.LVL59:
  91:Farbe_sen.c   ****     printf("color_data is (%5d, %5d, %5d, %5d)",Color_data_r,Color_data_g,Color_data_b,Color_data_b
 605              		.loc 1 91 0
 606 0520 0800A0E1 		mov	r0, r8
 607 0524 FEFFFFEB 		bl	__aeabi_i2d
 608              	.LVL60:
 609 0528 FEFFFFEB 		bl	__aeabi_d2f
 610              	.LVL61:
 611 052c 0090A0E1 		mov	r9, r0
 612 0530 0700A0E1 		mov	r0, r7
 613 0534 FEFFFFEB 		bl	__aeabi_i2d
 614              	.LVL62:
 615 0538 FEFFFFEB 		bl	__aeabi_d2f
 616              	.LVL63:
 617 053c 0050A0E1 		mov	r5, r0
 618 0540 0600A0E1 		mov	r0, r6
 619 0544 FEFFFFEB 		bl	__aeabi_i2d
 620              	.LVL64:
 621 0548 FEFFFFEB 		bl	__aeabi_d2f
 622              	.LVL65:
 623 054c 0020A0E1 		mov	r2, r0
 624 0550 0900A0E1 		mov	r0, r9
 625 0554 0510A0E1 		mov	r1, r5
 626 0558 FEFFFFEB 		bl	Color_col
 627              	.LVL66:
 628 055c 0050A0E1 		mov	r5, r0
 629              	.LVL67:
  79:Farbe_sen.c   ****     //usleep(100000);
 630              		.loc 1 79 0
 631 0560 C4309FE5 		ldr	r3, .L75+12
 632 0564 D32094E1 		ldrsb	r2, [r4, r3]
 633 0568 013043E2 		sub	r3, r3, #1
 634 056c D33094E1 		ldrsb	r3, [r4, r3]
 635 0570 023483E0 		add	r3, r3, r2, asl #8
  92:Farbe_sen.c   ****     //printf("%5d, %5d, %5d, %5d", Color_data_r,Color_data_g,Color_data_b,Color_data_blank);
 636              		.loc 1 92 0
 637 0574 00308DE5 		str	r3, [sp]
 638 0578 B0009FE5 		ldr	r0, .L75+16
 639              	.LVL68:
 640 057c 0810A0E1 		mov	r1, r8
 641 0580 0720A0E1 		mov	r2, r7
 642 0584 0630A0E1 		mov	r3, r6
 643 0588 FEFFFFEB 		bl	printf
 644              	.LVL69:
  95:Farbe_sen.c   ****         case 0:
 645              		.loc 1 95 0
 646 058c 050055E3 		cmp	r5, #5
 647 0590 05F19F97 		ldrls	pc, [pc, r5, asl #2]
 648 0594 1C0000EA 		b	.L67
 649              	.L69:
 650 0598 B0050000 		.word	.L68
 651 059c C0050000 		.word	.L70
 652 05a0 D0050000 		.word	.L71
 653 05a4 E0050000 		.word	.L72
 654 05a8 F0050000 		.word	.L73
 655 05ac 00060000 		.word	.L74
 656              	.L68:
  97:Farbe_sen.c   ****             break;
 657              		.loc 1 97 0
 658 05b0 7C009FE5 		ldr	r0, .L75+20
 659 05b4 0010A0E3 		mov	r1, #0
 660 05b8 FEFFFFEB 		bl	printf
 661              	.LVL70:
  98:Farbe_sen.c   ****             
 662              		.loc 1 98 0
 663 05bc 120000EA 		b	.L67
 664              	.L70:
 101:Farbe_sen.c   ****             break;
 665              		.loc 1 101 0
 666 05c0 70009FE5 		ldr	r0, .L75+24
 667 05c4 0110A0E3 		mov	r1, #1
 668 05c8 FEFFFFEB 		bl	printf
 669              	.LVL71:
 102:Farbe_sen.c   ****             
 670              		.loc 1 102 0
 671 05cc 0E0000EA 		b	.L67
 672              	.L71:
 105:Farbe_sen.c   ****             break;
 673              		.loc 1 105 0
 674 05d0 64009FE5 		ldr	r0, .L75+28
 675 05d4 0210A0E3 		mov	r1, #2
 676 05d8 FEFFFFEB 		bl	printf
 677              	.LVL72:
 106:Farbe_sen.c   ****             
 678              		.loc 1 106 0
 679 05dc 0A0000EA 		b	.L67
 680              	.L72:
 109:Farbe_sen.c   ****             break;
 681              		.loc 1 109 0
 682 05e0 58009FE5 		ldr	r0, .L75+32
 683 05e4 0310A0E3 		mov	r1, #3
 684 05e8 FEFFFFEB 		bl	printf
 685              	.LVL73:
 110:Farbe_sen.c   ****             
 686              		.loc 1 110 0
 687 05ec 060000EA 		b	.L67
 688              	.L73:
 113:Farbe_sen.c   ****             break;
 689              		.loc 1 113 0
 690 05f0 4C009FE5 		ldr	r0, .L75+36
 691 05f4 0410A0E3 		mov	r1, #4
 692 05f8 FEFFFFEB 		bl	printf
 693              	.LVL74:
 114:Farbe_sen.c   ****             
 694              		.loc 1 114 0
 695 05fc 020000EA 		b	.L67
 696              	.L74:
 117:Farbe_sen.c   ****             break;
 697              		.loc 1 117 0
 698 0600 40009FE5 		ldr	r0, .L75+40
 699 0604 0510A0E3 		mov	r1, #5
 700 0608 FEFFFFEB 		bl	printf
 701              	.LVL75:
 702              	.L67:
 121:Farbe_sen.c   **** //    sleep(1);
 703              		.loc 1 121 0
 704 060c 38009FE5 		ldr	r0, .L75+44
 705 0610 FEFFFFEB 		bl	printf
 706              	.LVL76:
 130:Farbe_sen.c   **** 
 707              		.loc 1 130 0
 708 0614 0500A0E1 		mov	r0, r5
 709 0618 0CD08DE2 		add	sp, sp, #12
 710              		@ sp needed
 711 061c F083BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
 712              	.LVL77:
 713              	.L76:
 714              		.align	2
 715              	.L75:
 716 0620 00000000 		.word	pColorSensor
 717 0624 00000000 		.word	.LANCHOR0
 718 0628 60100000 		.word	4192
 719 062c 67100000 		.word	4199
 720 0630 78000000 		.word	.LC5
 721 0634 9C000000 		.word	.LC6
 722 0638 B0000000 		.word	.LC7
 723 063c C4000000 		.word	.LC8
 724 0640 D8000000 		.word	.LC9
 725 0644 EC000000 		.word	.LC10
 726 0648 00010000 		.word	.LC11
 727 064c 14010000 		.word	.LC12
 728              		.cfi_endproc
 729              	.LFE12:
 730              		.fnend
 732              		.comm	DevCon,12,4
 733              		.comm	pColorSensor,4,4
 734              		.comm	file,4,4
 735              		.global	MAX_SAMPLES
 736              		.global	COLOR_SENSOR_TYPE
 737              		.global	RGB_RAW
 738              		.global	PORT
 739              		.section	.rodata
 740              		.align	2
 743              	MAX_SAMPLES:
 744 0000 0A000000 		.word	10
 747              	COLOR_SENSOR_TYPE:
 748 0004 1D       		.byte	29
 751              	RGB_RAW:
 752 0005 04       		.byte	4
 753 0006 0000     		.section	.rodata.str1.4,"aMS",%progbits,1
 754              		.align	2
 755              	.LC0:
 756 0000 2F646576 		.ascii	"/dev/lms_uart\000"
 756      2F6C6D73 
 756      5F756172 
 756      7400
 757 000e 0000     		.space	2
 758              	.LC1:
 759 0010 4661696C 		.ascii	"Failed to open device\012\000"
 759      65642074 
 759      6F206F70 
 759      656E2064 
 759      65766963 
 760 0027 00       		.space	1
 761              	.LC2:
 762 0028 4661696C 		.ascii	"Failed to map Color Sensor device\012\000"
 762      65642074 
 762      6F206D61 
 762      7020436F 
 762      6C6F7220 
 763 004b 00       		.space	1
 764              	.LC3:
 765 004c 44657669 		.ascii	"Device is ready \012\015\000"
 765      63652069 
 765      73207265 
 765      61647920 
 765      0A0D00
 766 005f 00       		.space	1
 767              	.LC4:
 768 0060 436C6F73 		.ascii	"Close the Color Sensor\000"
 768      65207468 
 768      6520436F 
 768      6C6F7220 
 768      53656E73 
 769 0077 00       		.space	1
 770              	.LC5:
 771 0078 636F6C6F 		.ascii	"color_data is (%5d, %5d, %5d, %5d)\000"
 771      725F6461 
 771      74612069 
 771      73202825 
 771      35642C20 
 772 009b 00       		.space	1
 773              	.LC6:
 774 009c 1B5B313B 		.ascii	"\033[1;30m   %d\033[0m\000"
 774      33306D20 
 774      20202564 
 774      1B5B306D 
 774      00
 775 00ad 000000   		.space	3
 776              	.LC7:
 777 00b0 1B5B313B 		.ascii	"\033[1;34m   %d\033[0m\000"
 777      33346D20 
 777      20202564 
 777      1B5B306D 
 777      00
 778 00c1 000000   		.space	3
 779              	.LC8:
 780 00c4 1B5B313B 		.ascii	"\033[1;33m   %d\033[0m\000"
 780      33336D20 
 780      20202564 
 780      1B5B306D 
 780      00
 781 00d5 000000   		.space	3
 782              	.LC9:
 783 00d8 1B5B313B 		.ascii	"\033[1;32m   %d\033[0m\000"
 783      33326D20 
 783      20202564 
 783      1B5B306D 
 783      00
 784 00e9 000000   		.space	3
 785              	.LC10:
 786 00ec 1B5B313B 		.ascii	"\033[1;35m   %d\033[0m\000"
 786      33356D20 
 786      20202564 
 786      1B5B306D 
 786      00
 787 00fd 000000   		.space	3
 788              	.LC11:
 789 0100 1B5B313B 		.ascii	"\033[1;31m   %d\033[0m\000"
 789      33316D20 
 789      20202564 
 789      1B5B306D 
 789      00
 790 0111 000000   		.space	3
 791              	.LC12:
 792 0114 0A0D00   		.ascii	"\012\015\000"
 793 0117 00       		.bss
 794              		.align	2
 795              	.LANCHOR0 = . + 0
 798              	PORT:
 799 0000 00000000 		.space	4
 800              		.text
 801              	.Letext0:
 802              		.file 2 "/usr/local/carlson-minot/crosscompilers/lib/gcc/arm-none-linux-gnueabi/4.8.3/include/stdd
 803              		.file 3 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 804              		.file 4 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 805              		.file 5 "Farbe_sen.h"
 806              		.file 6 "lmstypes.h"
 807              		.file 7 "bytecodes.h"
 808              		.file 8 "lms2012.h"
 809              		.file 9 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 810              		.file 10 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
 811              		.file 11 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
 812              		.file 12 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
 813              		.file 13 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Farbe_sen.c
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:16     .text:0000000000000000 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:19     .text:0000000000000000 ColSen_init
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:106    .text:00000000000000bc $d
                            *COM*:0000000000000004 file
                            *COM*:0000000000000004 pColorSensor
                            *COM*:000000000000000c DevCon
                       .ARM.exidx:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:121    .text:00000000000000e8 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:124    .text:00000000000000e8 ColSen_close
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:151    .text:0000000000000108 $d
                       .ARM.extab:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:157    .text:0000000000000110 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:160    .text:0000000000000110 MAX_RGB
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:192    .text:000000000000011c Color_col
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:541    .text:00000000000004b0 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:559    .text:00000000000004e0 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:562    .text:00000000000004e0 ColSen_getData
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:650    .text:0000000000000598 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:658    .text:00000000000005b0 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:716    .text:0000000000000620 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:743    .rodata:0000000000000000 MAX_SAMPLES
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:747    .rodata:0000000000000004 COLOR_SENSOR_TYPE
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:751    .rodata:0000000000000005 RGB_RAW
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:798    .bss:0000000000000000 PORT
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:740    .rodata:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:754    .rodata.str1.4:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc4YG580.s:794    .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
open
printf
mmap
ioctl
__aeabi_unwind_cpp_pr0
close
__aeabi_unwind_cpp_pr1
__aeabi_fcmpge
__aeabi_f2d
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_ddiv
__aeabi_dcmpge
__aeabi_fadd
__aeabi_fmul
__aeabi_i2d
__aeabi_d2f
sleep
