   1              		.arch armv5te
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"Arm_motor.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	arm_setpos
  19              	arm_setpos:
  20              		.fnstart
  21              	.LFB22:
  22              		.file 1 "Arm_motor.c"
   1:Arm_motor.c   **** //
   2:Arm_motor.c   **** //  Arm_motor.c
   3:Arm_motor.c   **** //  Cube3*3
   4:Arm_motor.c   **** //
   5:Arm_motor.c   **** //  Created by 杨春霞 on 12.11.15.
   6:Arm_motor.c   **** //  Copyright © 2015 Chunxia Yang. All rights reserved.
   7:Arm_motor.c   **** //
   8:Arm_motor.c   **** 
   9:Arm_motor.c   **** 
  10:Arm_motor.c   **** #include <fcntl.h>
  11:Arm_motor.c   **** #include <stdio.h>
  12:Arm_motor.c   **** #include <sys/mman.h>
  13:Arm_motor.c   **** 
  14:Arm_motor.c   **** #ifdef __linux__
  15:Arm_motor.c   **** #include "lms2012.h"
  16:Arm_motor.c   **** #include "../lms2012/c_output.h"
  17:Arm_motor.c   **** #endif
  18:Arm_motor.c   **** 
  19:Arm_motor.c   **** #include <unistd.h>
  20:Arm_motor.c   **** #include <stdlib.h>
  21:Arm_motor.c   **** #include "Arm_motor.h"
  22:Arm_motor.c   **** 
  23:Arm_motor.c   **** 
  24:Arm_motor.c   **** #ifdef __linux__
  25:Arm_motor.c   **** const int MOTOR_SPEED=20;//power:0~100
  26:Arm_motor.c   **** const char MOTOR_PORT_A = 0x01; //Ausfahrbarer Greifarm Motor;
  27:Arm_motor.c   **** 
  28:Arm_motor.c   **** OUTPUT_GLOBALS OutputInstance;
  29:Arm_motor.c   **** 
  30:Arm_motor.c   **** int arm_referenz=0;
  31:Arm_motor.c   **** int arm_ist=0;
  32:Arm_motor.c   **** const int arm_winkel[]={4,-83,-150,-240,-330};//-85   231   330
  33:Arm_motor.c   **** #endif
  34:Arm_motor.c   **** 
  35:Arm_motor.c   **** 
  36:Arm_motor.c   **** int arm_init()
  37:Arm_motor.c   **** {
  38:Arm_motor.c   **** #ifdef __linux__
  39:Arm_motor.c   ****     
  40:Arm_motor.c   ****     cOutputInit();
  41:Arm_motor.c   ****     cOutputSpeed(MOTOR_PORT_A,MOTOR_SPEED);
  42:Arm_motor.c   ****     cOutputStart(MOTOR_PORT_A);
  43:Arm_motor.c   ****     int old_TachoSensor;
  44:Arm_motor.c   ****     old_TachoSensor=cOutputGetCount(0);
  45:Arm_motor.c   ****     usleep(1000000);
  46:Arm_motor.c   ****     while(old_TachoSensor!=cOutputGetCount(0)){
  47:Arm_motor.c   ****         old_TachoSensor=cOutputGetCount(0);
  48:Arm_motor.c   ****         usleep(10000);
  49:Arm_motor.c   ****     }
  50:Arm_motor.c   ****     cOutputStop(MOTOR_PORT_A,1);
  51:Arm_motor.c   ****     arm_referenz=cOutputGetCount(0);
  52:Arm_motor.c   ****     arm_ist = 0;
  53:Arm_motor.c   ****     arm_setpos(4);
  54:Arm_motor.c   **** #endif
  55:Arm_motor.c   ****     return 0;
  56:Arm_motor.c   **** }
  57:Arm_motor.c   **** 
  58:Arm_motor.c   **** 
  59:Arm_motor.c   **** 
  60:Arm_motor.c   **** 
  61:Arm_motor.c   **** int arm_setpos(int arm_soll)
  62:Arm_motor.c   **** {
  23              		.loc 1 62 0
  24              		.cfi_startproc
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27              	.LVL0:
  28 0000 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
  29              		.save {r4, r5, r6, r7, r8, lr}
  30              		.cfi_def_cfa_offset 24
  31              		.cfi_offset 4, -24
  32              		.cfi_offset 5, -20
  33              		.cfi_offset 6, -16
  34              		.cfi_offset 7, -12
  35              		.cfi_offset 8, -8
  36              		.cfi_offset 14, -4
  37 0004 0070A0E1 		mov	r7, r0
  63:Arm_motor.c   **** #ifdef __linux__
  64:Arm_motor.c   ****     if(arm_winkel[arm_ist]<arm_winkel[arm_soll]){
  38              		.loc 1 64 0
  39 0008 C4309FE5 		ldr	r3, .L8
  40 000c 004193E7 		ldr	r4, [r3, r0, asl #2]
  41 0010 C0209FE5 		ldr	r2, .L8+4
  42 0014 002092E5 		ldr	r2, [r2]
  43 0018 023193E7 		ldr	r3, [r3, r2, asl #2]
  44 001c 040053E1 		cmp	r3, r4
  45 0020 110000AA 		bge	.L2
  65:Arm_motor.c   ****         cOutputSpeed(MOTOR_PORT_A,MOTOR_SPEED);
  46              		.loc 1 65 0
  47 0024 0100A0E3 		mov	r0, #1
  48              	.LVL1:
  49 0028 1410A0E3 		mov	r1, #20
  50 002c FEFFFFEB 		bl	cOutputSpeed
  51              	.LVL2:
  66:Arm_motor.c   ****         cOutputStart(MOTOR_PORT_A);
  52              		.loc 1 66 0
  53 0030 0100A0E3 		mov	r0, #1
  54 0034 FEFFFFEB 		bl	cOutputStart
  55              	.LVL3:
  67:Arm_motor.c   ****         while ((cOutputGetCount(0)-arm_referenz) < arm_winkel[arm_soll])
  56              		.loc 1 67 0
  57 0038 0060A0E3 		mov	r6, #0
  58 003c 94509FE5 		ldr	r5, .L8+4
  68:Arm_motor.c   ****         {
  69:Arm_motor.c   ****             usleep(10000);
  59              		.loc 1 69 0
  60 0040 94809FE5 		ldr	r8, .L8+8
  67:Arm_motor.c   ****         while ((cOutputGetCount(0)-arm_referenz) < arm_winkel[arm_soll])
  61              		.loc 1 67 0
  62 0044 010000EA 		b	.L3
  63              	.L4:
  64              		.loc 1 69 0
  65 0048 0800A0E1 		mov	r0, r8
  66 004c FEFFFFEB 		bl	usleep
  67              	.LVL4:
  68              	.L3:
  67:Arm_motor.c   ****         while ((cOutputGetCount(0)-arm_referenz) < arm_winkel[arm_soll])
  69              		.loc 1 67 0 discriminator 1
  70 0050 0600A0E1 		mov	r0, r6
  71 0054 FEFFFFEB 		bl	cOutputGetCount
  72              	.LVL5:
  73 0058 043095E5 		ldr	r3, [r5, #4]
  74 005c 000063E0 		rsb	r0, r3, r0
  75 0060 000054E1 		cmp	r4, r0
  76 0064 F7FFFFCA 		bgt	.L4
  77 0068 100000EA 		b	.L5
  78              	.LVL6:
  79              	.L2:
  70:Arm_motor.c   ****         }
  71:Arm_motor.c   ****     }else{
  72:Arm_motor.c   ****         cOutputSpeed(MOTOR_PORT_A,-MOTOR_SPEED);
  80              		.loc 1 72 0
  81 006c 0100A0E3 		mov	r0, #1
  82              	.LVL7:
  83 0070 1310E0E3 		mvn	r1, #19
  84 0074 FEFFFFEB 		bl	cOutputSpeed
  85              	.LVL8:
  73:Arm_motor.c   ****         cOutputStart(MOTOR_PORT_A);
  86              		.loc 1 73 0
  87 0078 0100A0E3 		mov	r0, #1
  88 007c FEFFFFEB 		bl	cOutputStart
  89              	.LVL9:
  74:Arm_motor.c   ****         while ((cOutputGetCount(0)-arm_referenz) > arm_winkel[arm_soll])
  90              		.loc 1 74 0
  91 0080 0060A0E3 		mov	r6, #0
  92 0084 4C509FE5 		ldr	r5, .L8+4
  75:Arm_motor.c   ****         {
  76:Arm_motor.c   ****             usleep(10000);
  93              		.loc 1 76 0
  94 0088 4C809FE5 		ldr	r8, .L8+8
  74:Arm_motor.c   ****         while ((cOutputGetCount(0)-arm_referenz) > arm_winkel[arm_soll])
  95              		.loc 1 74 0
  96 008c 010000EA 		b	.L6
  97              	.L7:
  98              		.loc 1 76 0
  99 0090 0800A0E1 		mov	r0, r8
 100 0094 FEFFFFEB 		bl	usleep
 101              	.LVL10:
 102              	.L6:
  74:Arm_motor.c   ****         while ((cOutputGetCount(0)-arm_referenz) > arm_winkel[arm_soll])
 103              		.loc 1 74 0 discriminator 1
 104 0098 0600A0E1 		mov	r0, r6
 105 009c FEFFFFEB 		bl	cOutputGetCount
 106              	.LVL11:
 107 00a0 043095E5 		ldr	r3, [r5, #4]
 108 00a4 000063E0 		rsb	r0, r3, r0
 109 00a8 000054E1 		cmp	r4, r0
 110 00ac F7FFFFBA 		blt	.L7
 111              	.L5:
  77:Arm_motor.c   ****         }
  78:Arm_motor.c   ****         
  79:Arm_motor.c   ****     }
  80:Arm_motor.c   ****     cOutputStop(MOTOR_PORT_A,1);
 112              		.loc 1 80 0
 113 00b0 0100A0E3 		mov	r0, #1
 114 00b4 0010A0E1 		mov	r1, r0
 115 00b8 FEFFFFEB 		bl	cOutputStop
 116              	.LVL12:
  81:Arm_motor.c   ****     arm_ist=arm_soll;
 117              		.loc 1 81 0
 118 00bc 14309FE5 		ldr	r3, .L8+4
 119 00c0 007083E5 		str	r7, [r3]
  82:Arm_motor.c   ****     usleep(100000);
 120              		.loc 1 82 0
 121 00c4 14009FE5 		ldr	r0, .L8+12
 122 00c8 FEFFFFEB 		bl	usleep
 123              	.LVL13:
  83:Arm_motor.c   **** #endif
  84:Arm_motor.c   ****     return 0;
  85:Arm_motor.c   **** }
 124              		.loc 1 85 0
 125 00cc 0000A0E3 		mov	r0, #0
 126 00d0 F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 127              	.L9:
 128              		.align	2
 129              	.L8:
 130 00d4 00000000 		.word	.LANCHOR0
 131 00d8 00000000 		.word	.LANCHOR1
 132 00dc 10270000 		.word	10000
 133 00e0 A0860100 		.word	100000
 134              		.cfi_endproc
 135              	.LFE22:
 136              		.fnend
 138              		.align	2
 139              		.global	arm_init
 141              	arm_init:
 142              		.fnstart
 143              	.LFB21:
  37:Arm_motor.c   **** #ifdef __linux__
 144              		.loc 1 37 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148 00e4 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 149              		.save {r4, r5, r6, lr}
 150              		.cfi_def_cfa_offset 16
 151              		.cfi_offset 4, -16
 152              		.cfi_offset 5, -12
 153              		.cfi_offset 6, -8
 154              		.cfi_offset 14, -4
  40:Arm_motor.c   ****     cOutputSpeed(MOTOR_PORT_A,MOTOR_SPEED);
 155              		.loc 1 40 0
 156 00e8 FEFFFFEB 		bl	cOutputInit
 157              	.LVL14:
  41:Arm_motor.c   ****     cOutputStart(MOTOR_PORT_A);
 158              		.loc 1 41 0
 159 00ec 0100A0E3 		mov	r0, #1
 160 00f0 1410A0E3 		mov	r1, #20
 161 00f4 FEFFFFEB 		bl	cOutputSpeed
 162              	.LVL15:
  42:Arm_motor.c   ****     int old_TachoSensor;
 163              		.loc 1 42 0
 164 00f8 0100A0E3 		mov	r0, #1
 165 00fc FEFFFFEB 		bl	cOutputStart
 166              	.LVL16:
  44:Arm_motor.c   ****     usleep(1000000);
 167              		.loc 1 44 0
 168 0100 0000A0E3 		mov	r0, #0
 169 0104 FEFFFFEB 		bl	cOutputGetCount
 170              	.LVL17:
 171 0108 0050A0E1 		mov	r5, r0
 172              	.LVL18:
  45:Arm_motor.c   ****     while(old_TachoSensor!=cOutputGetCount(0)){
 173              		.loc 1 45 0
 174 010c 64009FE5 		ldr	r0, .L13
 175              	.LVL19:
 176 0110 FEFFFFEB 		bl	usleep
 177              	.LVL20:
  46:Arm_motor.c   ****         old_TachoSensor=cOutputGetCount(0);
 178              		.loc 1 46 0
 179 0114 0040A0E3 		mov	r4, #0
  48:Arm_motor.c   ****     }
 180              		.loc 1 48 0
 181 0118 5C609FE5 		ldr	r6, .L13+4
  46:Arm_motor.c   ****         old_TachoSensor=cOutputGetCount(0);
 182              		.loc 1 46 0
 183 011c 040000EA 		b	.L11
 184              	.L12:
  47:Arm_motor.c   ****         usleep(10000);
 185              		.loc 1 47 0
 186 0120 0400A0E1 		mov	r0, r4
 187 0124 FEFFFFEB 		bl	cOutputGetCount
 188              	.LVL21:
 189 0128 0050A0E1 		mov	r5, r0
 190              	.LVL22:
  48:Arm_motor.c   ****     }
 191              		.loc 1 48 0
 192 012c 0600A0E1 		mov	r0, r6
 193              	.LVL23:
 194 0130 FEFFFFEB 		bl	usleep
 195              	.LVL24:
 196              	.L11:
  46:Arm_motor.c   ****         old_TachoSensor=cOutputGetCount(0);
 197              		.loc 1 46 0 discriminator 1
 198 0134 0400A0E1 		mov	r0, r4
 199 0138 FEFFFFEB 		bl	cOutputGetCount
 200              	.LVL25:
 201 013c 050050E1 		cmp	r0, r5
 202 0140 F6FFFF1A 		bne	.L12
  50:Arm_motor.c   ****     arm_referenz=cOutputGetCount(0);
 203              		.loc 1 50 0
 204 0144 0100A0E3 		mov	r0, #1
 205 0148 0010A0E1 		mov	r1, r0
 206 014c FEFFFFEB 		bl	cOutputStop
 207              	.LVL26:
  51:Arm_motor.c   ****     arm_ist = 0;
 208              		.loc 1 51 0
 209 0150 0000A0E3 		mov	r0, #0
 210 0154 FEFFFFEB 		bl	cOutputGetCount
 211              	.LVL27:
 212 0158 20309FE5 		ldr	r3, .L13+8
 213 015c 040083E5 		str	r0, [r3, #4]
  52:Arm_motor.c   ****     arm_setpos(4);
 214              		.loc 1 52 0
 215 0160 0040A0E3 		mov	r4, #0
 216 0164 004083E5 		str	r4, [r3]
  53:Arm_motor.c   **** #endif
 217              		.loc 1 53 0
 218 0168 0400A0E3 		mov	r0, #4
 219 016c FEFFFFEB 		bl	arm_setpos
 220              	.LVL28:
  56:Arm_motor.c   **** 
 221              		.loc 1 56 0
 222 0170 0400A0E1 		mov	r0, r4
 223 0174 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 224              	.L14:
 225              		.align	2
 226              	.L13:
 227 0178 40420F00 		.word	1000000
 228 017c 10270000 		.word	10000
 229 0180 00000000 		.word	.LANCHOR1
 230              		.cfi_endproc
 231              	.LFE21:
 232              		.fnend
 234              		.align	2
 235              		.global	arm_close
 237              	arm_close:
 238              		.fnstart
 239              	.LFB23:
  86:Arm_motor.c   **** 
  87:Arm_motor.c   **** 
  88:Arm_motor.c   **** int arm_close()
  89:Arm_motor.c   **** {
 240              		.loc 1 89 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244 0184 08402DE9 		stmfd	sp!, {r3, lr}
 245              		.save {r3, lr}
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 3, -8
 248              		.cfi_offset 14, -4
  90:Arm_motor.c   **** #ifdef __linux__
  91:Arm_motor.c   ****     cOutputExit();
 249              		.loc 1 91 0
 250 0188 FEFFFFEB 		bl	cOutputExit
 251              	.LVL29:
  92:Arm_motor.c   **** #endif
  93:Arm_motor.c   ****     return 0;
  94:Arm_motor.c   **** }...
 252              		.loc 1 94 0
 253 018c 0000A0E3 		mov	r0, #0
 254 0190 0880BDE8 		ldmfd	sp!, {r3, pc}
 255              		.cfi_endproc
 256              	.LFE23:
 257              		.fnend
 259              		.global	arm_winkel
 260              		.global	arm_ist
 261              		.global	arm_referenz
 262              		.comm	OutputInstance,64,4
 263              		.global	MOTOR_PORT_A
 264              		.global	MOTOR_SPEED
 265              		.section	.rodata
 266              		.align	2
 267              	.LANCHOR0 = . + 0
 270              	arm_winkel:
 271 0000 04000000 		.word	4
 272 0004 ADFFFFFF 		.word	-83
 273 0008 6AFFFFFF 		.word	-150
 274 000c 10FFFFFF 		.word	-240
 275 0010 B6FEFFFF 		.word	-330
 278              	MOTOR_PORT_A:
 279 0014 01       		.byte	1
 280 0015 000000   		.space	3
 283              	MOTOR_SPEED:
 284 0018 14000000 		.word	20
 285              		.bss
 286              		.align	2
 287              	.LANCHOR1 = . + 0
 290              	arm_ist:
 291 0000 00000000 		.space	4
 294              	arm_referenz:
 295 0004 00000000 		.space	4
 296              		.text
 297              	.Letext0:
 298              		.file 2 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 299              		.file 3 "/usr/local/carlson-minot/crosscompilers/lib/gcc/arm-none-linux-gnueabi/4.8.3/include/stdd
 300              		.file 4 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 301              		.file 5 "lmstypes.h"
 302              		.file 6 "bytecodes.h"
 303              		.file 7 "lms2012.h"
 304              		.file 8 "../lms2012/c_output.h"
 305              		.file 9 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 306              		.file 10 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Arm_motor.c
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:16     .text:0000000000000000 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:19     .text:0000000000000000 arm_setpos
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:130    .text:00000000000000d4 $d
                       .ARM.exidx:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:138    .text:00000000000000e4 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:141    .text:00000000000000e4 arm_init
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:227    .text:0000000000000178 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:234    .text:0000000000000184 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:237    .text:0000000000000184 arm_close
                       .ARM.extab:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:270    .rodata:0000000000000000 arm_winkel
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:290    .bss:0000000000000000 arm_ist
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:294    .bss:0000000000000004 arm_referenz
                            *COM*:0000000000000040 OutputInstance
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:278    .rodata:0000000000000014 MOTOR_PORT_A
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:283    .rodata:0000000000000018 MOTOR_SPEED
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:266    .rodata:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccP6HnWy.s:286    .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
cOutputSpeed
cOutputStart
usleep
cOutputGetCount
cOutputStop
__aeabi_unwind_cpp_pr0
cOutputInit
cOutputExit
__aeabi_unwind_cpp_pr1
