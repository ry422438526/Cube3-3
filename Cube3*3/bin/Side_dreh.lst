   1              		.arch armv5te
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"Side_dreh.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	klappen
  19              	klappen:
  20              		.fnstart
  21              	.LFB11:
  22              		.file 1 "Side_dreh.c"
   1:Side_dreh.c   **** //
   2:Side_dreh.c   **** //  Side_dreh.c
   3:Side_dreh.c   **** //  Cube3*3
   4:Side_dreh.c   **** //
   5:Side_dreh.c   **** //  Created by 杨春霞 on 12.11.15.
   6:Side_dreh.c   **** //  Copyright © 2015 Chunxia Yang. All rights reserved.
   7:Side_dreh.c   **** //
   8:Side_dreh.c   **** 
   9:Side_dreh.c   **** #include <stdio.h>
  10:Side_dreh.c   **** #include "Side_dreh.h"
  11:Side_dreh.c   **** 
  12:Side_dreh.c   **** #ifdef __linux__
  13:Side_dreh.c   **** #include "Arm_motor.h"
  14:Side_dreh.c   **** #include "Dreh_motor.h"
  15:Side_dreh.c   **** #endif
  16:Side_dreh.c   **** 
  17:Side_dreh.c   **** #include "main.h"
  18:Side_dreh.c   **** #include "unistd.h"
  19:Side_dreh.c   **** #include "print_mode.h"
  20:Side_dreh.c   **** 
  21:Side_dreh.c   **** int Count=0;
  22:Side_dreh.c   **** void klappen()
  23:Side_dreh.c   **** {
  23              		.loc 1 23 0
  24              		.cfi_startproc
  25              		@ args = 0, pretend = 0, frame = 72
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  28              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  29              		.cfi_def_cfa_offset 36
  30              		.cfi_offset 4, -36
  31              		.cfi_offset 5, -32
  32              		.cfi_offset 6, -28
  33              		.cfi_offset 7, -24
  34              		.cfi_offset 8, -20
  35              		.cfi_offset 9, -16
  36              		.cfi_offset 10, -12
  37              		.cfi_offset 11, -8
  38              		.cfi_offset 14, -4
  39              		.pad #76
  40 0004 4CD04DE2 		sub	sp, sp, #76
  41              		.cfi_def_cfa_offset 112
  24:Side_dreh.c   **** #ifdef __linux__
  25:Side_dreh.c   ****     arm_setpos(3);
  42              		.loc 1 25 0
  43 0008 0300A0E3 		mov	r0, #3
  44 000c FEFFFFEB 		bl	arm_setpos
  45              	.LVL0:
  26:Side_dreh.c   ****     arm_setpos(2);
  46              		.loc 1 26 0
  47 0010 0200A0E3 		mov	r0, #2
  48 0014 FEFFFFEB 		bl	arm_setpos
  49              	.LVL1:
  27:Side_dreh.c   ****     arm_setpos(4);
  50              		.loc 1 27 0
  51 0018 0400A0E3 		mov	r0, #4
  52 001c FEFFFFEB 		bl	arm_setpos
  53              	.LVL2:
  54 0020 0070A0E3 		mov	r7, #0
  28:Side_dreh.c   **** #endif
  29:Side_dreh.c   ****     int i,j;
  30:Side_dreh.c   ****     unsigned char temp_color_data[6][9];
  31:Side_dreh.c   ****     for(i=0;i<3;i++)
  55              		.loc 1 31 0
  56 0024 07E0A0E1 		mov	lr, r7
  57 0028 F8A09FE5 		ldr	r10, .L11
  58 002c 3D208DE2 		add	r2, sp, #61
  59 0030 04208DE5 		str	r2, [sp, #4]
  60 0034 12308DE2 		add	r3, sp, #18
  61 0038 08308DE5 		str	r3, [sp, #8]
  62 003c 180000EA 		b	.L2
  63              	.LVL3:
  64              	.L6:
  32:Side_dreh.c   ****     {
  33:Side_dreh.c   ****         for (j=0; j<3; j++)
  34:Side_dreh.c   ****         {
  35:Side_dreh.c   ****             temp_color_data[1][3*i+j]=color_data[1][3*j+(2-i)]; //
  65              		.loc 1 35 0 discriminator 2
  66 0040 0980D0E5 		ldrb	r8, [r0, #9]	@ zero_extendqisi2
  67 0044 0980C3E5 		strb	r8, [r3, #9]
  36:Side_dreh.c   ****             temp_color_data[3][3*i+j]=color_data[3][3*(2-j)+i]; //
  68              		.loc 1 36 0 discriminator 2
  69 0048 2180D1E5 		ldrb	r8, [r1, #33]	@ zero_extendqisi2
  70 004c 1B80C3E5 		strb	r8, [r3, #27]
  37:Side_dreh.c   ****             temp_color_data[5][3*i+j]=color_data[2][3*(2-j)+i]; //
  71              		.loc 1 37 0 discriminator 2
  72 0050 1880D1E5 		ldrb	r8, [r1, #24]	@ zero_extendqisi2
  73 0054 2D80C3E5 		strb	r8, [r3, #45]
  38:Side_dreh.c   ****             temp_color_data[2][3*(2-j)+i]=color_data[4][3*(2-i)+(2-j)];//
  74              		.loc 1 38 0 discriminator 2
  75 0058 018074E5 		ldrb	r8, [r4, #-1]!	@ zero_extendqisi2
  76 005c 1880CCE5 		strb	r8, [ip, #24]
  39:Side_dreh.c   ****             temp_color_data[4][3*(2-i)+(2-j)]=color_data[0][3*j+(2-i)];//
  77              		.loc 1 39 0 discriminator 2
  78 0060 0380D0E4 		ldrb	r8, [r0], #3	@ zero_extendqisi2
  79 0064 018065E5 		strb	r8, [r5, #-1]!
  40:Side_dreh.c   ****             temp_color_data[0][3*j+(2-i)]=color_data[5][3*i+j];//
  80              		.loc 1 40 0 discriminator 2
  81 0068 0180F6E5 		ldrb	r8, [r6, #1]!	@ zero_extendqisi2
  82 006c 0280C9E7 		strb	r8, [r9, r2]
  83              	.LVL4:
  84 0070 032082E2 		add	r2, r2, #3
  85 0074 013083E2 		add	r3, r3, #1
  86              	.LVL5:
  87 0078 031041E2 		sub	r1, r1, #3
  88 007c 03C04CE2 		sub	ip, ip, #3
  33:Side_dreh.c   ****         {
  89              		.loc 1 33 0 discriminator 2
  90 0080 090052E3 		cmp	r2, #9
  91 0084 EDFFFF1A 		bne	.L6
  31:Side_dreh.c   ****     {
  92              		.loc 1 31 0
  93 0088 01E08EE2 		add	lr, lr, #1
  94              	.LVL6:
  95 008c 037087E2 		add	r7, r7, #3
  96              	.LVL7:
  97 0090 03005EE3 		cmp	lr, #3
  98 0094 00C0A003 		moveq	ip, #0
  99 0098 0CE0A001 		moveq	lr, ip
 100              	.LVL8:
 101 009c 0C409D05 		ldreq	r4, [sp, #12]
 102 00a0 1800000A 		beq	.L5
 103              	.LVL9:
 104              	.L2:
 105 00a4 0CA08DE5 		str	r10, [sp, #12]
 106 00a8 10B08DE2 		add	fp, sp, #16
 107 00ac 78809FE5 		ldr	r8, .L11+4
 108 00b0 076088E0 		add	r6, r8, r7
  23:Side_dreh.c   **** #ifdef __linux__
 109              		.loc 1 23 0 discriminator 1
 110 00b4 04209DE5 		ldr	r2, [sp, #4]
 111 00b8 025067E0 		rsb	r5, r7, r2
 112 00bc 0EC08BE0 		add	ip, fp, lr
 113 00c0 013088E2 		add	r3, r8, #1
 114 00c4 034067E0 		rsb	r4, r7, r3
 115 00c8 0E108AE0 		add	r1, r10, lr
 116 00cc 07308BE0 		add	r3, fp, r7
 117 00d0 2A8048E2 		sub	r8, r8, #42
 118 00d4 08006EE0 		rsb	r0, lr, r8
 119 00d8 0020A0E3 		mov	r2, #0
 120 00dc 08809DE5 		ldr	r8, [sp, #8]
 121 00e0 08906EE0 		rsb	r9, lr, r8
 122 00e4 D5FFFFEA 		b	.L6
 123              	.LVL10:
 124              	.L9:
  41:Side_dreh.c   ****         }
  42:Side_dreh.c   ****     }
  43:Side_dreh.c   ****     
  44:Side_dreh.c   ****     int a,b;
  45:Side_dreh.c   ****     for (a=0;a<6;a++)
  46:Side_dreh.c   ****     {
  47:Side_dreh.c   ****         for (b=0;b<9;b++)
  48:Side_dreh.c   ****         {
  49:Side_dreh.c   ****             color_data[a][b]=temp_color_data[a][b];
 125              		.loc 1 49 0 discriminator 2
 126 00e8 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 127 00ec 0320C0E7 		strb	r2, [r0, r3]
  47:Side_dreh.c   ****         {
 128              		.loc 1 47 0 discriminator 2
 129 00f0 013083E2 		add	r3, r3, #1
 130              	.LVL11:
 131 00f4 090053E3 		cmp	r3, #9
 132 00f8 FAFFFF1A 		bne	.L9
 133              	.LVL12:
 134 00fc 09C08CE2 		add	ip, ip, #9
  45:Side_dreh.c   ****     {
 135              		.loc 1 45 0
 136 0100 36005CE3 		cmp	ip, #54
 137 0104 0300000A 		beq	.L8
 138              	.LVL13:
 139              	.L5:
  31:Side_dreh.c   ****     {
 140              		.loc 1 31 0 discriminator 1
 141 0108 0E30A0E1 		mov	r3, lr
 142 010c 0C0084E0 		add	r0, r4, ip
 143 0110 0C108BE0 		add	r1, fp, ip
 144 0114 F3FFFFEA 		b	.L9
 145              	.LVL14:
 146              	.L8:
  50:Side_dreh.c   ****         }
  51:Side_dreh.c   ****     }
  52:Side_dreh.c   ****     wuerfel_print(1);/////////////
 147              		.loc 1 52 0
 148 0118 0100A0E3 		mov	r0, #1
 149 011c FEFFFFEB 		bl	wuerfel_print
 150              	.LVL15:
  53:Side_dreh.c   **** }
 151              		.loc 1 53 0
 152 0120 4CD08DE2 		add	sp, sp, #76
 153              		@ sp needed
 154 0124 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 155              	.L12:
 156              		.align	2
 157              	.L11:
 158 0128 00000000 		.word	color_data
 159 012c 2C000000 		.word	color_data+44
 160              		.cfi_endproc
 161              	.LFE11:
 162              		.fnend
 164              		.align	2
 165              		.global	drehen_unter
 167              	drehen_unter:
 168              		.fnstart
 169              	.LFB12:
  54:Side_dreh.c   **** 
  55:Side_dreh.c   **** 
  56:Side_dreh.c   **** void drehen_unter(int dir,int dreh_Angel)
  57:Side_dreh.c   **** {
 170              		.loc 1 57 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 72
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL16:
 175 0130 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 176              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 177              		.cfi_def_cfa_offset 36
 178              		.cfi_offset 4, -36
 179              		.cfi_offset 5, -32
 180              		.cfi_offset 6, -28
 181              		.cfi_offset 7, -24
 182              		.cfi_offset 8, -20
 183              		.cfi_offset 9, -16
 184              		.cfi_offset 10, -12
 185              		.cfi_offset 11, -8
 186              		.cfi_offset 14, -4
 187              		.pad #76
 188 0134 4CD04DE2 		sub	sp, sp, #76
 189              		.cfi_def_cfa_offset 112
 190 0138 0C008DE5 		str	r0, [sp, #12]
 191 013c 0140A0E1 		mov	r4, r1
  58:Side_dreh.c   **** #ifdef __linux__
  59:Side_dreh.c   ****     arm_setpos(3);
 192              		.loc 1 59 0
 193 0140 0300A0E3 		mov	r0, #3
 194              	.LVL17:
 195 0144 FEFFFFEB 		bl	arm_setpos
 196              	.LVL18:
  60:Side_dreh.c   ****     if(dir==1)
 197              		.loc 1 60 0
 198 0148 0C109DE5 		ldr	r1, [sp, #12]
 199 014c 010051E3 		cmp	r1, #1
  61:Side_dreh.c   ****     {
  62:Side_dreh.c   ****         DrehTel_setpos(2*dreh_Angel*3/270);
 200              		.loc 1 62 0
 201 0150 843084E0 		add	r3, r4, r4, asl #1
 202 0154 8330A001 		moveq	r3, r3, asl #1
 203 0158 48029F05 		ldreq	r0, .L33
 204 015c 9320C000 		smulleq	r2, r0, r3, r0
  63:Side_dreh.c   ****     }else{
  64:Side_dreh.c   ****         DrehTel_setpos(dreh_Angel*3/270);
 205              		.loc 1 64 0
 206 0160 40029F15 		ldrne	r0, .L33
 207 0164 93E0C010 		smullne	lr, r0, r3, r0
 208 0168 030080E0 		add	r0, r0, r3
 209 016c C33FA0E1 		mov	r3, r3, asr #31
 210 0170 400463E0 		rsb	r0, r3, r0, asr #8
 211 0174 FEFFFFEB 		bl	DrehTel_setpos
 212              	.LVL19:
  65:Side_dreh.c   ****     }
  66:Side_dreh.c   **** #endif
  67:Side_dreh.c   ****     int i,j,k;
  68:Side_dreh.c   ****     unsigned char temp_color_data[6][9];
  69:Side_dreh.c   ****     for (k=0; k<dreh_Angel/90;k++)
 213              		.loc 1 69 0
 214 0178 2C329FE5 		ldr	r3, .L33+4
 215 017c 9413C3E0 		smull	r1, r3, r4, r3
 216 0180 043083E0 		add	r3, r3, r4
 217 0184 C44FA0E1 		mov	r4, r4, asr #31
 218              	.LVL20:
 219 0188 434364E0 		rsb	r4, r4, r3, asr #6
 220 018c 08408DE5 		str	r4, [sp, #8]
 221 0190 000054E3 		cmp	r4, #0
 222 0194 7C0000DA 		ble	.L16
 223 0198 00B0A0E3 		mov	fp, #0
 224 019c 0C829FE5 		ldr	r8, .L33+8
 225              	.LBB2:
  70:Side_dreh.c   ****     {
  71:Side_dreh.c   ****         if (dir==1)
 226              		.loc 1 71 0
 227 01a0 0B60A0E1 		mov	r6, fp
 228 01a4 21A08DE2 		add	r10, sp, #33
 229 01a8 013048E2 		sub	r3, r8, #1
 230 01ac 00308DE5 		str	r3, [sp]
 231 01b0 13E083E2 		add	lr, r3, #19
 232 01b4 12E04EE2 		sub	lr, lr, #18
 233 01b8 04E08DE5 		str	lr, [sp, #4]
 234              	.LVL21:
 235              	.L28:
 236 01bc 0C109DE5 		ldr	r1, [sp, #12]
 237 01c0 010051E3 		cmp	r1, #1
 238 01c4 2F00001A 		bne	.L17
 239 01c8 E4919FE5 		ldr	r9, .L33+12
 240 01cc 22708DE2 		add	r7, sp, #34
 241 01d0 04309DE5 		ldr	r3, [sp, #4]
 242 01d4 10208DE2 		add	r2, sp, #16
 243 01d8 0640A0E1 		mov	r4, r6
 244              	.L21:
 245              	.LVL22:
  72:Side_dreh.c   ****         {
  73:Side_dreh.c   ****             for(i=0;i<3;i++)
  74:Side_dreh.c   ****             {
  75:Side_dreh.c   ****                 temp_color_data[5][3*0+i]=color_data[1][3*2+(2-i)];
 246              		.loc 1 75 0
 247 01dc 011079E5 		ldrb	r1, [r9, #-1]!	@ zero_extendqisi2
 248 01e0 2D10C2E5 		strb	r1, [r2, #45]
  76:Side_dreh.c   ****                 temp_color_data[5][3*1+i]=color_data[5][3*1+i];
 249              		.loc 1 76 0
 250 01e4 3010D3E5 		ldrb	r1, [r3, #48]	@ zero_extendqisi2
 251 01e8 3010C2E5 		strb	r1, [r2, #48]
  77:Side_dreh.c   ****                 temp_color_data[5][3*2+i]=color_data[5][3*2+i];
 252              		.loc 1 77 0
 253 01ec 3310D3E5 		ldrb	r1, [r3, #51]	@ zero_extendqisi2
 254 01f0 3310C2E5 		strb	r1, [r2, #51]
  78:Side_dreh.c   ****                 
  79:Side_dreh.c   ****                 temp_color_data[1][3*0+i]=color_data[1][3*0+i];
 255              		.loc 1 79 0
 256 01f4 0910D3E5 		ldrb	r1, [r3, #9]	@ zero_extendqisi2
 257 01f8 0910C2E5 		strb	r1, [r2, #9]
  80:Side_dreh.c   ****                 temp_color_data[1][3*1+i]=color_data[1][3*1+i];
 258              		.loc 1 80 0
 259 01fc 0C10D3E5 		ldrb	r1, [r3, #12]	@ zero_extendqisi2
 260 0200 0C10C2E5 		strb	r1, [r2, #12]
  81:Side_dreh.c   ****                 temp_color_data[1][3*2+(2-i)]=color_data[4][3*0+i];
 261              		.loc 1 81 0
 262 0204 2410D3E5 		ldrb	r1, [r3, #36]	@ zero_extendqisi2
 263 0208 011067E5 		strb	r1, [r7, #-1]!
  82:Side_dreh.c   ****                 
  83:Side_dreh.c   ****                 temp_color_data[4][3*0+i]=color_data[3][3*0+i];
 264              		.loc 1 83 0
 265 020c 1B10D3E5 		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 266 0210 2410C2E5 		strb	r1, [r2, #36]
  84:Side_dreh.c   ****                 temp_color_data[4][3*1+i]=color_data[4][3*1+i];
 267              		.loc 1 84 0
 268 0214 2710D3E5 		ldrb	r1, [r3, #39]	@ zero_extendqisi2
 269 0218 2710C2E5 		strb	r1, [r2, #39]
  85:Side_dreh.c   ****                 temp_color_data[4][3*2+i]=color_data[4][3*2+i];
 270              		.loc 1 85 0
 271 021c 2A10D3E5 		ldrb	r1, [r3, #42]	@ zero_extendqisi2
 272 0220 2A10C2E5 		strb	r1, [r2, #42]
  86:Side_dreh.c   ****                 
  87:Side_dreh.c   ****                 temp_color_data[3][3*0+i]=color_data[5][3*0+i];
 273              		.loc 1 87 0
 274 0224 2D10D3E5 		ldrb	r1, [r3, #45]	@ zero_extendqisi2
 275 0228 1B10C2E5 		strb	r1, [r2, #27]
  88:Side_dreh.c   ****                 temp_color_data[3][3*1+i]=color_data[3][3*1+i];
 276              		.loc 1 88 0
 277 022c 1E10D3E5 		ldrb	r1, [r3, #30]	@ zero_extendqisi2
 278 0230 1E10C2E5 		strb	r1, [r2, #30]
  89:Side_dreh.c   ****                 temp_color_data[3][3*2+i]=color_data[3][3*2+i];
 279              		.loc 1 89 0
 280 0234 2110D3E5 		ldrb	r1, [r3, #33]	@ zero_extendqisi2
 281 0238 2110C2E5 		strb	r1, [r2, #33]
 282              	.LVL23:
 283 023c 04C08AE0 		add	ip, r10, r4
 284 0240 0300A0E1 		mov	r0, r3
  90:Side_dreh.c   ****                 
  91:Side_dreh.c   ****                 for (j=0; j<3; j++)
 285              		.loc 1 91 0
 286 0244 0610A0E1 		mov	r1, r6
 287 0248 04E09DE5 		ldr	lr, [sp, #4]
 288 024c 04508EE0 		add	r5, lr, r4
 289              	.LVL24:
 290              	.L19:
  92:Side_dreh.c   ****                 {
  93:Side_dreh.c   ****                     temp_color_data[2][3*i+j]=color_data[2][3*(2-j)+i];
 291              		.loc 1 93 0 discriminator 2
 292 0250 18E0D0E5 		ldrb	lr, [r0, #24]	@ zero_extendqisi2
 293 0254 01E0ECE5 		strb	lr, [ip, #1]!
  94:Side_dreh.c   ****                     temp_color_data[0][3*i+j]=color_data[0][3*i+j];
 294              		.loc 1 94 0 discriminator 2
 295 0258 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2
 296 025c 12E04CE5 		strb	lr, [ip, #-18]
  91:Side_dreh.c   ****                 {
 297              		.loc 1 91 0 discriminator 2
 298 0260 011081E2 		add	r1, r1, #1
 299              	.LVL25:
 300 0264 030040E2 		sub	r0, r0, #3
 301 0268 030051E3 		cmp	r1, #3
 302 026c F7FFFF1A 		bne	.L19
 303              	.LVL26:
 304 0270 012082E2 		add	r2, r2, #1
 305              	.LVL27:
 306 0274 013083E2 		add	r3, r3, #1
 307 0278 034084E2 		add	r4, r4, #3
  73:Side_dreh.c   ****             {
 308              		.loc 1 73 0
 309 027c 090054E3 		cmp	r4, #9
 310 0280 D5FFFF1A 		bne	.L21
 311 0284 430000EA 		b	.L20
 312              	.LVL28:
 313              	.L17:
 314 0288 22908DE2 		add	r9, sp, #34
  71:Side_dreh.c   ****         {
 315              		.loc 1 71 0
 316 028c 0850A0E1 		mov	r5, r8
 317 0290 10208DE2 		add	r2, sp, #16
 318 0294 0830A0E1 		mov	r3, r8
 319 0298 0640A0E1 		mov	r4, r6
 320              	.L24:
 321              	.LVL29:
  95:Side_dreh.c   ****                 }
  96:Side_dreh.c   ****             }
  97:Side_dreh.c   ****         }
  98:Side_dreh.c   ****         else
  99:Side_dreh.c   ****         {
 100:Side_dreh.c   ****             for(i=0;i<3;i++)
 101:Side_dreh.c   ****             {
 102:Side_dreh.c   ****                 temp_color_data[5][3*0+i]=color_data[3][3*0+i];
 322              		.loc 1 102 0
 323 029c 1B10D3E5 		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 324 02a0 2D10C2E5 		strb	r1, [r2, #45]
 103:Side_dreh.c   ****                 temp_color_data[5][3*1+i]=color_data[5][3*1+i];
 325              		.loc 1 103 0
 326 02a4 3010D3E5 		ldrb	r1, [r3, #48]	@ zero_extendqisi2
 327 02a8 3010C2E5 		strb	r1, [r2, #48]
 104:Side_dreh.c   ****                 temp_color_data[5][3*2+i]=color_data[5][3*2+i];
 328              		.loc 1 104 0
 329 02ac 3310D3E5 		ldrb	r1, [r3, #51]	@ zero_extendqisi2
 330 02b0 3310C2E5 		strb	r1, [r2, #51]
 105:Side_dreh.c   ****                 
 106:Side_dreh.c   ****                 temp_color_data[3][3*0+i]=color_data[4][3*0+i];
 331              		.loc 1 106 0
 332 02b4 2410D3E5 		ldrb	r1, [r3, #36]	@ zero_extendqisi2
 333 02b8 1B10C2E5 		strb	r1, [r2, #27]
 107:Side_dreh.c   ****                 temp_color_data[3][3*1+i]=color_data[3][3*1+i];
 334              		.loc 1 107 0
 335 02bc 1E10D3E5 		ldrb	r1, [r3, #30]	@ zero_extendqisi2
 336 02c0 1E10C2E5 		strb	r1, [r2, #30]
 108:Side_dreh.c   ****                 temp_color_data[3][3*2+i]=color_data[3][3*2+i];
 337              		.loc 1 108 0
 338 02c4 2110D3E5 		ldrb	r1, [r3, #33]	@ zero_extendqisi2
 339 02c8 2110C2E5 		strb	r1, [r2, #33]
 109:Side_dreh.c   ****                 
 110:Side_dreh.c   ****                 temp_color_data[4][3*0+i]=color_data[1][3*2+2-i];
 340              		.loc 1 110 0
 341 02cc 1110D5E5 		ldrb	r1, [r5, #17]	@ zero_extendqisi2
 342 02d0 2410C2E5 		strb	r1, [r2, #36]
 111:Side_dreh.c   ****                 temp_color_data[4][3*1+i]=color_data[4][3*1+i];
 343              		.loc 1 111 0
 344 02d4 2710D3E5 		ldrb	r1, [r3, #39]	@ zero_extendqisi2
 345 02d8 2710C2E5 		strb	r1, [r2, #39]
 112:Side_dreh.c   ****                 temp_color_data[4][3*2+i]=color_data[4][3*2+i];
 346              		.loc 1 112 0
 347 02dc 2A10D3E5 		ldrb	r1, [r3, #42]	@ zero_extendqisi2
 348 02e0 2A10C2E5 		strb	r1, [r2, #42]
 113:Side_dreh.c   ****                 
 114:Side_dreh.c   ****                 temp_color_data[1][3*0+i]=color_data[1][3*0+i];
 349              		.loc 1 114 0
 350 02e4 0910D3E5 		ldrb	r1, [r3, #9]	@ zero_extendqisi2
 351 02e8 0910C2E5 		strb	r1, [r2, #9]
 115:Side_dreh.c   ****                 temp_color_data[1][3*1+i]=color_data[1][3*1+i];
 352              		.loc 1 115 0
 353 02ec 0C10D3E5 		ldrb	r1, [r3, #12]	@ zero_extendqisi2
 354 02f0 0C10C2E5 		strb	r1, [r2, #12]
 116:Side_dreh.c   ****                 temp_color_data[1][3*2+2-i]=color_data[5][3*0+i];
 355              		.loc 1 116 0
 356 02f4 2D10D3E5 		ldrb	r1, [r3, #45]	@ zero_extendqisi2
 357 02f8 011069E5 		strb	r1, [r9, #-1]!
 358              	.LVL30:
 359 02fc 097085E2 		add	r7, r5, #9
 360 0300 00109DE5 		ldr	r1, [sp]
 361 0304 04C081E0 		add	ip, r1, r4
 362 0308 04008AE0 		add	r0, r10, r4
 363 030c 0510A0E1 		mov	r1, r5
 364              	.LVL31:
 365              	.L23:
 117:Side_dreh.c   ****                 
 118:Side_dreh.c   ****                 for (j=0; j<3; j++)
 119:Side_dreh.c   ****                 {
 120:Side_dreh.c   ****                     temp_color_data[2][3*i+j]=color_data[2][3*j+(2-i)];
 366              		.loc 1 120 0 discriminator 2
 367 0310 14E0D1E5 		ldrb	lr, [r1, #20]	@ zero_extendqisi2
 368 0314 01E0E0E5 		strb	lr, [r0, #1]!
 369              	.LVL32:
 121:Side_dreh.c   ****                     temp_color_data[0][3*i+j]=color_data[0][3*i+j];
 370              		.loc 1 121 0 discriminator 2
 371 0318 01E0FCE5 		ldrb	lr, [ip, #1]!	@ zero_extendqisi2
 372 031c 12E040E5 		strb	lr, [r0, #-18]
 373              	.LVL33:
 374 0320 031081E2 		add	r1, r1, #3
 118:Side_dreh.c   ****                 {
 375              		.loc 1 118 0 discriminator 2
 376 0324 070051E1 		cmp	r1, r7
 377 0328 F8FFFF1A 		bne	.L23
 378              	.LVL34:
 379 032c 013083E2 		add	r3, r3, #1
 380              	.LVL35:
 381 0330 012082E2 		add	r2, r2, #1
 382 0334 015045E2 		sub	r5, r5, #1
 383 0338 034084E2 		add	r4, r4, #3
 384              	.LVL36:
 100:Side_dreh.c   ****             {
 385              		.loc 1 100 0
 386 033c 090054E3 		cmp	r4, #9
 387 0340 D5FFFF1A 		bne	.L24
 388 0344 130000EA 		b	.L20
 389              	.LVL37:
 390              	.L27:
 122:Side_dreh.c   ****                 }
 123:Side_dreh.c   ****             }
 124:Side_dreh.c   ****         }
 125:Side_dreh.c   ****         
 126:Side_dreh.c   ****         int a,b;
 127:Side_dreh.c   ****         for (a=0;a<6;a++)
 128:Side_dreh.c   ****         {
 129:Side_dreh.c   ****             for (b=0;b<9;b++)
 130:Side_dreh.c   ****             {
 131:Side_dreh.c   ****                 color_data[a][b]=temp_color_data[a][b];
 391              		.loc 1 131 0 discriminator 2
 392 0348 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 393 034c 0320C0E7 		strb	r2, [r0, r3]
 129:Side_dreh.c   ****             {
 394              		.loc 1 129 0 discriminator 2
 395 0350 013083E2 		add	r3, r3, #1
 396              	.LVL38:
 397 0354 090053E3 		cmp	r3, #9
 398 0358 FAFFFF1A 		bne	.L27
 399              	.LVL39:
 400 035c 09C08CE2 		add	ip, ip, #9
 127:Side_dreh.c   ****         {
 401              		.loc 1 127 0
 402 0360 36005CE3 		cmp	ip, #54
 403 0364 0400000A 		beq	.L26
 404              	.LVL40:
 405              	.L29:
 116:Side_dreh.c   ****                 
 406              		.loc 1 116 0 discriminator 1
 407 0368 0630A0E1 		mov	r3, r6
 408 036c 08008CE0 		add	r0, ip, r8
 409 0370 10208DE2 		add	r2, sp, #16
 410 0374 02108CE0 		add	r1, ip, r2
 411 0378 F2FFFFEA 		b	.L27
 412              	.LVL41:
 413              	.L26:
 414              	.LBE2:
  69:Side_dreh.c   ****     {
 415              		.loc 1 69 0
 416 037c 01B08BE2 		add	fp, fp, #1
 417              	.LVL42:
 418 0380 08309DE5 		ldr	r3, [sp, #8]
 419              	.LVL43:
 420 0384 03005BE1 		cmp	fp, r3
 421 0388 8BFFFF1A 		bne	.L28
 422              	.LVL44:
 423              	.L16:
 132:Side_dreh.c   ****             }
 133:Side_dreh.c   ****         }
 134:Side_dreh.c   ****     }
 135:Side_dreh.c   ****     wuerfel_print(1);/////////////
 424              		.loc 1 135 0
 425 038c 0100A0E3 		mov	r0, #1
 426 0390 FEFFFFEB 		bl	wuerfel_print
 427              	.LVL45:
 428 0394 010000EA 		b	.L32
 429              	.LVL46:
 430              	.L20:
 431              	.LBB3:
 116:Side_dreh.c   ****                 
 432              		.loc 1 116 0
 433 0398 06C0A0E1 		mov	ip, r6
 434 039c F1FFFFEA 		b	.L29
 435              	.LVL47:
 436              	.L32:
 437              	.LBE3:
 136:Side_dreh.c   **** }
 438              		.loc 1 136 0
 439 03a0 4CD08DE2 		add	sp, sp, #76
 440              		@ sp needed
 441 03a4 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 442              	.L34:
 443              		.align	2
 444              	.L33:
 445 03a8 49D6B9F2 		.word	-222702007
 446 03ac B7600BB6 		.word	-1240768329
 447 03b0 00000000 		.word	color_data
 448 03b4 12000000 		.word	color_data+18
 449              		.cfi_endproc
 450              	.LFE12:
 451              		.fnend
 453              		.align	2
 454              		.global	drehen
 456              	drehen:
 457              		.fnstart
 458              	.LFB13:
 137:Side_dreh.c   **** 
 138:Side_dreh.c   **** void drehen(int dir)                       //drehen 90 Grad
 139:Side_dreh.c   **** {
 459              		.loc 1 139 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 64
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              	.LVL48:
 464 03b8 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 465              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 466              		.cfi_def_cfa_offset 36
 467              		.cfi_offset 4, -36
 468              		.cfi_offset 5, -32
 469              		.cfi_offset 6, -28
 470              		.cfi_offset 7, -24
 471              		.cfi_offset 8, -20
 472              		.cfi_offset 9, -16
 473              		.cfi_offset 10, -12
 474              		.cfi_offset 11, -8
 475              		.cfi_offset 14, -4
 476              		.pad #68
 477 03bc 44D04DE2 		sub	sp, sp, #68
 478              		.cfi_def_cfa_offset 104
 479 03c0 0040A0E1 		mov	r4, r0
 140:Side_dreh.c   **** #ifdef __linux__
 141:Side_dreh.c   ****     arm_setpos(4);
 480              		.loc 1 141 0
 481 03c4 0400A0E3 		mov	r0, #4
 482              	.LVL49:
 483 03c8 FEFFFFEB 		bl	arm_setpos
 484              	.LVL50:
 142:Side_dreh.c   ****     if(dir==1)
 485              		.loc 1 142 0
 486 03cc 010054E3 		cmp	r4, #1
 487 03d0 0800001A 		bne	.L36
 143:Side_dreh.c   ****     {
 144:Side_dreh.c   ****         DrehTel_setpos(1);
 488              		.loc 1 144 0
 489 03d4 0100A0E3 		mov	r0, #1
 490 03d8 FEFFFFEB 		bl	DrehTel_setpos
 491              	.LVL51:
 492 03dc 0050A0E3 		mov	r5, #0
 493 03e0 0570A0E1 		mov	r7, r5
 494 03e4 90819FE5 		ldr	r8, .L50
 495 03e8 02B088E2 		add	fp, r8, #2
 496 03ec 12A088E2 		add	r10, r8, #18
 497 03f0 1A908DE2 		add	r9, sp, #26
 498 03f4 210000EA 		b	.L37
 499              	.LVL52:
 500              	.L36:
 145:Side_dreh.c   ****     }else{
 146:Side_dreh.c   ****         DrehTel_setpos(2);
 501              		.loc 1 146 0
 502 03f8 0200A0E3 		mov	r0, #2
 503 03fc FEFFFFEB 		bl	DrehTel_setpos
 504              	.LVL53:
 505 0400 0040A0E3 		mov	r4, #0
 506              	.LVL54:
 507 0404 0460A0E1 		mov	r6, r4
 508 0408 6C819FE5 		ldr	r8, .L50
 509 040c 12B088E2 		add	fp, r8, #18
 510 0410 1AA08DE2 		add	r10, sp, #26
 144:Side_dreh.c   ****     }else{
 511              		.loc 1 144 0
 512 0414 0490A0E1 		mov	r9, r4
 513 0418 021088E2 		add	r1, r8, #2
 514 041c 04108DE5 		str	r1, [sp, #4]
 515 0420 350000EA 		b	.L38
 516              	.LVL55:
 517              	.L41:
 147:Side_dreh.c   ****     }
 148:Side_dreh.c   **** #endif
 149:Side_dreh.c   ****     int i,j;
 150:Side_dreh.c   ****     unsigned char temp_color_data[6][9];
 151:Side_dreh.c   ****     if(dir==1)
 152:Side_dreh.c   ****     {
 153:Side_dreh.c   ****         for (i=0; i<3; i++) {
 154:Side_dreh.c   ****             for (j=0; j<3; j++) {
 155:Side_dreh.c   ****                 temp_color_data[0][3*i+j]=color_data[0][3*(2-j)+i];
 518              		.loc 1 155 0 discriminator 2
 519 0424 0660D0E5 		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 520 0428 0060C3E5 		strb	r6, [r3]
 156:Side_dreh.c   ****                 temp_color_data[2][3*i+j]=color_data[2][3*j+(2-i)];
 521              		.loc 1 156 0 discriminator 2
 522 042c 1260DCE5 		ldrb	r6, [ip, #18]	@ zero_extendqisi2
 523 0430 1260C3E5 		strb	r6, [r3, #18]
 157:Side_dreh.c   ****                 temp_color_data[4][3*i+j]=color_data[1][3*(2-i)+(2-j)];
 524              		.loc 1 157 0 discriminator 2
 525 0434 01607EE5 		ldrb	r6, [lr, #-1]!	@ zero_extendqisi2
 526 0438 2460C3E5 		strb	r6, [r3, #36]
 158:Side_dreh.c   ****                 temp_color_data[1][3*(2-i)+(2-j)]=color_data[5][3*i+j];
 527              		.loc 1 158 0 discriminator 2
 528 043c 2D60D2E5 		ldrb	r6, [r2, #45]	@ zero_extendqisi2
 529 0440 016064E5 		strb	r6, [r4, #-1]!
 159:Side_dreh.c   ****                 temp_color_data[5][3*i+j]=color_data[3][3*i+j];
 530              		.loc 1 159 0 discriminator 2
 531 0444 1B60D2E5 		ldrb	r6, [r2, #27]	@ zero_extendqisi2
 532 0448 2D60C3E5 		strb	r6, [r3, #45]
 160:Side_dreh.c   ****                 temp_color_data[3][3*i+j]=color_data[4][3*i+j];
 533              		.loc 1 160 0 discriminator 2
 534 044c 2460D2E5 		ldrb	r6, [r2, #36]	@ zero_extendqisi2
 535 0450 1B60C3E5 		strb	r6, [r3, #27]
 154:Side_dreh.c   ****                 temp_color_data[0][3*i+j]=color_data[0][3*(2-j)+i];
 536              		.loc 1 154 0 discriminator 2
 537 0454 011081E2 		add	r1, r1, #1
 538              	.LVL56:
 539 0458 030040E2 		sub	r0, r0, #3
 540 045c 013083E2 		add	r3, r3, #1
 541 0460 03C08CE2 		add	ip, ip, #3
 542 0464 012082E2 		add	r2, r2, #1
 543 0468 030051E3 		cmp	r1, #3
 544 046c ECFFFF1A 		bne	.L41
 153:Side_dreh.c   ****             for (j=0; j<3; j++) {
 545              		.loc 1 153 0
 546 0470 017087E2 		add	r7, r7, #1
 547              	.LVL57:
 548 0474 035085E2 		add	r5, r5, #3
 549 0478 030057E3 		cmp	r7, #3
 550 047c 3800000A 		beq	.L40
 551              	.LVL58:
 552              	.L37:
 553 0480 094065E0 		rsb	r4, r5, r9
 139:Side_dreh.c   **** #ifdef __linux__
 554              		.loc 1 139 0 discriminator 1
 555 0484 052088E0 		add	r2, r8, r5
 556 0488 0AE065E0 		rsb	lr, r5, r10
 557 048c 0BC067E0 		rsb	ip, r7, fp
 558 0490 08108DE2 		add	r1, sp, #8
 559 0494 053081E0 		add	r3, r1, r5
 560 0498 070088E0 		add	r0, r8, r7
 561 049c 0010A0E3 		mov	r1, #0
 562 04a0 DFFFFFEA 		b	.L41
 563              	.LVL59:
 564              	.L43:
 161:Side_dreh.c   ****             }
 162:Side_dreh.c   ****         }
 163:Side_dreh.c   ****     }else{
 164:Side_dreh.c   ****         for (i=0; i<3; i++) {
 165:Side_dreh.c   ****             for (j=0; j<3; j++) {
 166:Side_dreh.c   ****                 temp_color_data[0][3*i+j]=color_data[0][3*j+(2-i)];
 565              		.loc 1 166 0 discriminator 2
 566 04a4 0150D7E7 		ldrb	r5, [r7, r1]	@ zero_extendqisi2
 567 04a8 0050C3E5 		strb	r5, [r3]
 167:Side_dreh.c   ****                 temp_color_data[2][3*i+j]=color_data[2][3*(2-j)+i];
 568              		.loc 1 167 0 discriminator 2
 569 04ac 1850D0E5 		ldrb	r5, [r0, #24]	@ zero_extendqisi2
 570 04b0 1250C3E5 		strb	r5, [r3, #18]
 168:Side_dreh.c   ****                 temp_color_data[5][3*i+j]=color_data[1][3*(2-i)+(2-j)];
 571              		.loc 1 168 0 discriminator 2
 572 04b4 01507CE5 		ldrb	r5, [ip, #-1]!	@ zero_extendqisi2
 573 04b8 2D50C3E5 		strb	r5, [r3, #45]
 169:Side_dreh.c   ****                 temp_color_data[1][3*(2-i)+(2-j)]=color_data[4][3*i+j];
 574              		.loc 1 169 0 discriminator 2
 575 04bc 2450D2E5 		ldrb	r5, [r2, #36]	@ zero_extendqisi2
 576 04c0 01506EE5 		strb	r5, [lr, #-1]!
 170:Side_dreh.c   ****                 temp_color_data[4][3*i+j]=color_data[3][3*i+j];
 577              		.loc 1 170 0 discriminator 2
 578 04c4 1B50D2E5 		ldrb	r5, [r2, #27]	@ zero_extendqisi2
 579 04c8 2450C3E5 		strb	r5, [r3, #36]
 171:Side_dreh.c   ****                 temp_color_data[3][3*i+j]=color_data[5][3*i+j];
 580              		.loc 1 171 0 discriminator 2
 581 04cc 2D50D2E5 		ldrb	r5, [r2, #45]	@ zero_extendqisi2
 582 04d0 1B50C3E5 		strb	r5, [r3, #27]
 583              	.LVL60:
 584 04d4 031081E2 		add	r1, r1, #3
 585 04d8 013083E2 		add	r3, r3, #1
 586              	.LVL61:
 587 04dc 030040E2 		sub	r0, r0, #3
 588 04e0 012082E2 		add	r2, r2, #1
 165:Side_dreh.c   ****                 temp_color_data[0][3*i+j]=color_data[0][3*j+(2-i)];
 589              		.loc 1 165 0 discriminator 2
 590 04e4 090051E3 		cmp	r1, #9
 591 04e8 EDFFFF1A 		bne	.L43
 164:Side_dreh.c   ****             for (j=0; j<3; j++) {
 592              		.loc 1 164 0
 593 04ec 016086E2 		add	r6, r6, #1
 594              	.LVL62:
 595 04f0 034084E2 		add	r4, r4, #3
 596              	.LVL63:
 597 04f4 030056E3 		cmp	r6, #3
 598 04f8 1900000A 		beq	.L40
 599              	.LVL64:
 600              	.L38:
 601 04fc 0AE064E0 		rsb	lr, r4, r10
 144:Side_dreh.c   ****     }else{
 602              		.loc 1 144 0 discriminator 1
 603 0500 042088E0 		add	r2, r8, r4
 604 0504 0BC064E0 		rsb	ip, r4, fp
 605 0508 060088E0 		add	r0, r8, r6
 606 050c 08508DE2 		add	r5, sp, #8
 607 0510 043085E0 		add	r3, r5, r4
 608 0514 0910A0E1 		mov	r1, r9
 609 0518 04509DE5 		ldr	r5, [sp, #4]
 610 051c 057066E0 		rsb	r7, r6, r5
 611 0520 DFFFFFEA 		b	.L43
 612              	.LVL65:
 613              	.L46:
 172:Side_dreh.c   ****             }
 173:Side_dreh.c   ****         }
 174:Side_dreh.c   ****     }
 175:Side_dreh.c   ****     int a,b;
 176:Side_dreh.c   ****     for (a=0;a<6;a++)
 177:Side_dreh.c   ****     {
 178:Side_dreh.c   ****         for (b=0;b<9;b++)
 179:Side_dreh.c   ****         {
 180:Side_dreh.c   ****             color_data[a][b]=temp_color_data[a][b];
 614              		.loc 1 180 0 discriminator 2
 615 0524 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 616 0528 0320C0E7 		strb	r2, [r0, r3]
 178:Side_dreh.c   ****         {
 617              		.loc 1 178 0 discriminator 2
 618 052c 013083E2 		add	r3, r3, #1
 619              	.LVL66:
 620 0530 090053E3 		cmp	r3, #9
 621 0534 FAFFFF1A 		bne	.L46
 622              	.LVL67:
 623 0538 09C08CE2 		add	ip, ip, #9
 176:Side_dreh.c   ****     {
 624              		.loc 1 176 0
 625 053c 36005CE3 		cmp	ip, #54
 626 0540 0400000A 		beq	.L45
 627              	.LVL68:
 628              	.L47:
 146:Side_dreh.c   ****     }
 629              		.loc 1 146 0 discriminator 1
 630 0544 0430A0E1 		mov	r3, r4
 631 0548 0E008CE0 		add	r0, ip, lr
 632 054c 08208DE2 		add	r2, sp, #8
 633 0550 02108CE0 		add	r1, ip, r2
 634 0554 F2FFFFEA 		b	.L46
 635              	.LVL69:
 636              	.L45:
 181:Side_dreh.c   ****         }
 182:Side_dreh.c   ****     }
 183:Side_dreh.c   ****     wuerfel_print(1);/////////////
 637              		.loc 1 183 0
 638 0558 0100A0E3 		mov	r0, #1
 639 055c FEFFFFEB 		bl	wuerfel_print
 640              	.LVL70:
 641 0560 030000EA 		b	.L49
 642              	.L40:
 643              	.LVL71:
 146:Side_dreh.c   ****     }
 644              		.loc 1 146 0
 645 0564 00C0A0E3 		mov	ip, #0
 646 0568 0C40A0E1 		mov	r4, ip
 647 056c 08E09FE5 		ldr	lr, .L50
 648 0570 F3FFFFEA 		b	.L47
 649              	.LVL72:
 650              	.L49:
 184:Side_dreh.c   **** }
 651              		.loc 1 184 0
 652 0574 44D08DE2 		add	sp, sp, #68
 653              		@ sp needed
 654 0578 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 655              	.L51:
 656              		.align	2
 657              	.L50:
 658 057c 00000000 		.word	color_data
 659              		.cfi_endproc
 660              	.LFE13:
 661              		.fnend
 663              		.align	2
 664              		.global	us_dreh
 666              	us_dreh:
 667              		.fnstart
 668              	.LFB14:
 185:Side_dreh.c   **** 
 186:Side_dreh.c   **** void us_dreh(int dir,int dreh_Angel_u)                        //Oben_Schicht
 187:Side_dreh.c   **** {
 669              		.loc 1 187 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              	.LVL73:
 674 0580 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 675              		.save {r3, r4, r5, lr}
 676              		.cfi_def_cfa_offset 16
 677              		.cfi_offset 3, -16
 678              		.cfi_offset 4, -12
 679              		.cfi_offset 5, -8
 680              		.cfi_offset 14, -4
 681 0584 0050A0E1 		mov	r5, r0
 682 0588 0140A0E1 		mov	r4, r1
 188:Side_dreh.c   ****     klappen();
 683              		.loc 1 188 0
 684 058c FEFFFFEB 		bl	klappen
 685              	.LVL74:
 189:Side_dreh.c   **** #ifdef __linux__
 190:Side_dreh.c   **** #endif
 191:Side_dreh.c   ****     klappen();
 686              		.loc 1 191 0
 687 0590 FEFFFFEB 		bl	klappen
 688              	.LVL75:
 192:Side_dreh.c   **** #ifdef __linux__
 193:Side_dreh.c   **** #endif
 194:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_u);
 689              		.loc 1 194 0
 690 0594 0500A0E1 		mov	r0, r5
 691 0598 0410A0E1 		mov	r1, r4
 692 059c FEFFFFEB 		bl	drehen_unter
 693              	.LVL76:
 195:Side_dreh.c   ****     Count++;
 694              		.loc 1 195 0
 695 05a0 1C309FE5 		ldr	r3, .L53
 696 05a4 001093E5 		ldr	r1, [r3]
 697 05a8 011081E2 		add	r1, r1, #1
 698 05ac 001083E5 		str	r1, [r3]
 196:Side_dreh.c   ****     printf("Count=%d",Count);
 699              		.loc 1 196 0
 700 05b0 10009FE5 		ldr	r0, .L53+4
 701 05b4 FEFFFFEB 		bl	printf
 702              	.LVL77:
 197:Side_dreh.c   ****     wuerfel_print(1);
 703              		.loc 1 197 0
 704 05b8 0100A0E3 		mov	r0, #1
 705 05bc FEFFFFEB 		bl	wuerfel_print
 706              	.LVL78:
 707 05c0 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 708              	.L54:
 709              		.align	2
 710              	.L53:
 711 05c4 00000000 		.word	.LANCHOR0
 712 05c8 00000000 		.word	.LC0
 713              		.cfi_endproc
 714              	.LFE14:
 715              		.fnend
 717              		.align	2
 718              		.global	ds_dreh
 720              	ds_dreh:
 721              		.fnstart
 722              	.LFB15:
 198:Side_dreh.c   **** }
 199:Side_dreh.c   **** 
 200:Side_dreh.c   **** void ds_dreh(int dir,int dreh_Angel_d)                        //Untern_Schicht
 201:Side_dreh.c   **** {
 723              		.loc 1 201 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727              	.LVL79:
 728 05cc 08402DE9 		stmfd	sp!, {r3, lr}
 729              		.save {r3, lr}
 730              		.cfi_def_cfa_offset 8
 731              		.cfi_offset 3, -8
 732              		.cfi_offset 14, -4
 202:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_d);
 733              		.loc 1 202 0
 734 05d0 FEFFFFEB 		bl	drehen_unter
 735              	.LVL80:
 203:Side_dreh.c   ****     wuerfel_print(1);
 736              		.loc 1 203 0
 737 05d4 0100A0E3 		mov	r0, #1
 738 05d8 FEFFFFEB 		bl	wuerfel_print
 739              	.LVL81:
 204:Side_dreh.c   ****     Count++;
 740              		.loc 1 204 0
 741 05dc 14309FE5 		ldr	r3, .L56
 742 05e0 001093E5 		ldr	r1, [r3]
 743 05e4 011081E2 		add	r1, r1, #1
 744 05e8 001083E5 		str	r1, [r3]
 205:Side_dreh.c   ****     printf("Count=%d",Count);
 745              		.loc 1 205 0
 746 05ec 08009FE5 		ldr	r0, .L56+4
 747 05f0 FEFFFFEB 		bl	printf
 748              	.LVL82:
 749 05f4 0880BDE8 		ldmfd	sp!, {r3, pc}
 750              	.L57:
 751              		.align	2
 752              	.L56:
 753 05f8 00000000 		.word	.LANCHOR0
 754 05fc 00000000 		.word	.LC0
 755              		.cfi_endproc
 756              	.LFE15:
 757              		.fnend
 759              		.align	2
 760              		.global	fs_dreh
 762              	fs_dreh:
 763              		.fnstart
 764              	.LFB16:
 206:Side_dreh.c   ****     
 207:Side_dreh.c   **** }
 208:Side_dreh.c   **** 
 209:Side_dreh.c   **** void fs_dreh(int dir,int dreh_Angel_f)                         //Vornen_Schicht
 210:Side_dreh.c   **** {
 765              		.loc 1 210 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769              	.LVL83:
 770 0600 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 771              		.save {r3, r4, r5, lr}
 772              		.cfi_def_cfa_offset 16
 773              		.cfi_offset 3, -16
 774              		.cfi_offset 4, -12
 775              		.cfi_offset 5, -8
 776              		.cfi_offset 14, -4
 777 0604 0050A0E1 		mov	r5, r0
 778 0608 0140A0E1 		mov	r4, r1
 211:Side_dreh.c   **** #ifdef __linux__
 212:Side_dreh.c   ****     arm_setpos(4);
 779              		.loc 1 212 0
 780 060c 0400A0E3 		mov	r0, #4
 781              	.LVL84:
 782 0610 FEFFFFEB 		bl	arm_setpos
 783              	.LVL85:
 213:Side_dreh.c   **** #endif
 214:Side_dreh.c   ****     drehen(1);
 784              		.loc 1 214 0
 785 0614 0100A0E3 		mov	r0, #1
 786 0618 FEFFFFEB 		bl	drehen
 787              	.LVL86:
 215:Side_dreh.c   **** #ifdef __linux__
 216:Side_dreh.c   **** #endif
 217:Side_dreh.c   ****     klappen();
 788              		.loc 1 217 0
 789 061c FEFFFFEB 		bl	klappen
 790              	.LVL87:
 218:Side_dreh.c   **** #ifdef __linux__
 219:Side_dreh.c   **** #endif
 220:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_f);
 791              		.loc 1 220 0
 792 0620 0500A0E1 		mov	r0, r5
 793 0624 0410A0E1 		mov	r1, r4
 794 0628 FEFFFFEB 		bl	drehen_unter
 795              	.LVL88:
 221:Side_dreh.c   ****     Count++;
 796              		.loc 1 221 0
 797 062c 1C309FE5 		ldr	r3, .L59
 798 0630 001093E5 		ldr	r1, [r3]
 799 0634 011081E2 		add	r1, r1, #1
 800 0638 001083E5 		str	r1, [r3]
 222:Side_dreh.c   ****     printf("Count=%d",Count);
 801              		.loc 1 222 0
 802 063c 10009FE5 		ldr	r0, .L59+4
 803 0640 FEFFFFEB 		bl	printf
 804              	.LVL89:
 223:Side_dreh.c   ****     wuerfel_print(1);
 805              		.loc 1 223 0
 806 0644 0100A0E3 		mov	r0, #1
 807 0648 FEFFFFEB 		bl	wuerfel_print
 808              	.LVL90:
 809 064c 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 810              	.L60:
 811              		.align	2
 812              	.L59:
 813 0650 00000000 		.word	.LANCHOR0
 814 0654 00000000 		.word	.LC0
 815              		.cfi_endproc
 816              	.LFE16:
 817              		.fnend
 819              		.align	2
 820              		.global	bs_dreh
 822              	bs_dreh:
 823              		.fnstart
 824              	.LFB17:
 224:Side_dreh.c   **** }
 225:Side_dreh.c   **** 
 226:Side_dreh.c   **** void bs_dreh(int dir,int dreh_Angel_b)                         //Hintern_Schicht
 227:Side_dreh.c   **** {
 825              		.loc 1 227 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829              	.LVL91:
 830 0658 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 831              		.save {r3, r4, r5, lr}
 832              		.cfi_def_cfa_offset 16
 833              		.cfi_offset 3, -16
 834              		.cfi_offset 4, -12
 835              		.cfi_offset 5, -8
 836              		.cfi_offset 14, -4
 837 065c 0050A0E1 		mov	r5, r0
 838 0660 0140A0E1 		mov	r4, r1
 228:Side_dreh.c   **** #ifdef __linux__
 229:Side_dreh.c   ****     arm_setpos(4);
 839              		.loc 1 229 0
 840 0664 0400A0E3 		mov	r0, #4
 841              	.LVL92:
 842 0668 FEFFFFEB 		bl	arm_setpos
 843              	.LVL93:
 230:Side_dreh.c   **** #endif
 231:Side_dreh.c   ****     drehen(-1);
 844              		.loc 1 231 0
 845 066c 0000E0E3 		mvn	r0, #0
 846 0670 FEFFFFEB 		bl	drehen
 847              	.LVL94:
 232:Side_dreh.c   **** #ifdef __linux__
 233:Side_dreh.c   **** #endif
 234:Side_dreh.c   ****     klappen();
 848              		.loc 1 234 0
 849 0674 FEFFFFEB 		bl	klappen
 850              	.LVL95:
 235:Side_dreh.c   **** #ifdef __linux__
 236:Side_dreh.c   **** #endif
 237:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_b);
 851              		.loc 1 237 0
 852 0678 0500A0E1 		mov	r0, r5
 853 067c 0410A0E1 		mov	r1, r4
 854 0680 FEFFFFEB 		bl	drehen_unter
 855              	.LVL96:
 238:Side_dreh.c   ****     Count++;
 856              		.loc 1 238 0
 857 0684 1C309FE5 		ldr	r3, .L62
 858 0688 001093E5 		ldr	r1, [r3]
 859 068c 011081E2 		add	r1, r1, #1
 860 0690 001083E5 		str	r1, [r3]
 239:Side_dreh.c   ****     printf("Count=%d",Count);
 861              		.loc 1 239 0
 862 0694 10009FE5 		ldr	r0, .L62+4
 863 0698 FEFFFFEB 		bl	printf
 864              	.LVL97:
 240:Side_dreh.c   ****     wuerfel_print(1);
 865              		.loc 1 240 0
 866 069c 0100A0E3 		mov	r0, #1
 867 06a0 FEFFFFEB 		bl	wuerfel_print
 868              	.LVL98:
 869 06a4 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 870              	.L63:
 871              		.align	2
 872              	.L62:
 873 06a8 00000000 		.word	.LANCHOR0
 874 06ac 00000000 		.word	.LC0
 875              		.cfi_endproc
 876              	.LFE17:
 877              		.fnend
 879              		.align	2
 880              		.global	ls_dreh
 882              	ls_dreh:
 883              		.fnstart
 884              	.LFB18:
 241:Side_dreh.c   ****     
 242:Side_dreh.c   **** }
 243:Side_dreh.c   **** 
 244:Side_dreh.c   **** void ls_dreh(int dir,int dreh_Angel_l)                         //linken_Schicht
 245:Side_dreh.c   **** {
 885              		.loc 1 245 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              	.LVL99:
 890 06b0 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 891              		.save {r3, r4, r5, lr}
 892              		.cfi_def_cfa_offset 16
 893              		.cfi_offset 3, -16
 894              		.cfi_offset 4, -12
 895              		.cfi_offset 5, -8
 896              		.cfi_offset 14, -4
 897 06b4 0050A0E1 		mov	r5, r0
 898 06b8 0140A0E1 		mov	r4, r1
 246:Side_dreh.c   ****     klappen();
 899              		.loc 1 246 0
 900 06bc FEFFFFEB 		bl	klappen
 901              	.LVL100:
 247:Side_dreh.c   **** #ifdef __linux__
 248:Side_dreh.c   **** #endif
 249:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_l);
 902              		.loc 1 249 0
 903 06c0 0500A0E1 		mov	r0, r5
 904 06c4 0410A0E1 		mov	r1, r4
 905 06c8 FEFFFFEB 		bl	drehen_unter
 906              	.LVL101:
 250:Side_dreh.c   ****     Count++;
 907              		.loc 1 250 0
 908 06cc 1C309FE5 		ldr	r3, .L65
 909 06d0 001093E5 		ldr	r1, [r3]
 910 06d4 011081E2 		add	r1, r1, #1
 911 06d8 001083E5 		str	r1, [r3]
 251:Side_dreh.c   ****     printf("Count=%d",Count);
 912              		.loc 1 251 0
 913 06dc 10009FE5 		ldr	r0, .L65+4
 914 06e0 FEFFFFEB 		bl	printf
 915              	.LVL102:
 252:Side_dreh.c   ****     wuerfel_print(1);
 916              		.loc 1 252 0
 917 06e4 0100A0E3 		mov	r0, #1
 918 06e8 FEFFFFEB 		bl	wuerfel_print
 919              	.LVL103:
 920 06ec 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 921              	.L66:
 922              		.align	2
 923              	.L65:
 924 06f0 00000000 		.word	.LANCHOR0
 925 06f4 00000000 		.word	.LC0
 926              		.cfi_endproc
 927              	.LFE18:
 928              		.fnend
 930              		.align	2
 931              		.global	rs_dreh
 933              	rs_dreh:
 934              		.fnstart
 935              	.LFB19:
 253:Side_dreh.c   ****     
 254:Side_dreh.c   **** }
 255:Side_dreh.c   **** 
 256:Side_dreh.c   **** void rs_dreh(int dir,int dreh_Angel_r)                          //rechten_Schicht
 257:Side_dreh.c   **** {
 936              		.loc 1 257 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              	.LVL104:
 941 06f8 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 942              		.save {r3, r4, r5, lr}
 943              		.cfi_def_cfa_offset 16
 944              		.cfi_offset 3, -16
 945              		.cfi_offset 4, -12
 946              		.cfi_offset 5, -8
 947              		.cfi_offset 14, -4
 948 06fc 0050A0E1 		mov	r5, r0
 949 0700 0140A0E1 		mov	r4, r1
 258:Side_dreh.c   ****     klappen();
 950              		.loc 1 258 0
 951 0704 FEFFFFEB 		bl	klappen
 952              	.LVL105:
 259:Side_dreh.c   **** #ifdef __linux__
 260:Side_dreh.c   **** #endif
 261:Side_dreh.c   ****     klappen();
 953              		.loc 1 261 0
 954 0708 FEFFFFEB 		bl	klappen
 955              	.LVL106:
 262:Side_dreh.c   **** #ifdef __linux__
 263:Side_dreh.c   **** #endif
 264:Side_dreh.c   ****     klappen();
 956              		.loc 1 264 0
 957 070c FEFFFFEB 		bl	klappen
 958              	.LVL107:
 265:Side_dreh.c   **** #ifdef __linux__
 266:Side_dreh.c   **** #endif
 267:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_r);
 959              		.loc 1 267 0
 960 0710 0500A0E1 		mov	r0, r5
 961 0714 0410A0E1 		mov	r1, r4
 962 0718 FEFFFFEB 		bl	drehen_unter
 963              	.LVL108:
 268:Side_dreh.c   ****     Count++;
 964              		.loc 1 268 0
 965 071c 1C309FE5 		ldr	r3, .L68
 966 0720 001093E5 		ldr	r1, [r3]
 967 0724 011081E2 		add	r1, r1, #1
 968 0728 001083E5 		str	r1, [r3]
 269:Side_dreh.c   ****     printf("Count=%d",Count);
 969              		.loc 1 269 0
 970 072c 10009FE5 		ldr	r0, .L68+4
 971 0730 FEFFFFEB 		bl	printf
 972              	.LVL109:
 270:Side_dreh.c   ****     wuerfel_print(1);
 973              		.loc 1 270 0
 974 0734 0100A0E3 		mov	r0, #1
 975 0738 FEFFFFEB 		bl	wuerfel_print
 976              	.LVL110:
 977 073c 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 978              	.L69:
 979              		.align	2
 980              	.L68:
 981 0740 00000000 		.word	.LANCHOR0
 982 0744 00000000 		.word	.LC0
 983              		.cfi_endproc
 984              	.LFE19:
 985              		.fnend
 987              		.align	2
 988              		.global	change_topface
 990              	change_topface:
 991              		.fnstart
 992              	.LFB20:
 271:Side_dreh.c   **** }
 272:Side_dreh.c   **** 
 273:Side_dreh.c   **** int change_topface(int center_color)
 274:Side_dreh.c   **** {   int i;
 993              		.loc 1 274 0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 997              	.LVL111:
 998 0748 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 999              		.save {r4, r5, r6, r7, r8, lr}
 1000              		.cfi_def_cfa_offset 24
 1001              		.cfi_offset 4, -24
 1002              		.cfi_offset 5, -20
 1003              		.cfi_offset 6, -16
 1004              		.cfi_offset 7, -12
 1005              		.cfi_offset 8, -8
 1006              		.cfi_offset 14, -4
 1007 074c 0060A0E1 		mov	r6, r0
 1008              	.LVL112:
 1009 0750 98509FE5 		ldr	r5, .L82
 1010              		.loc 1 274 0
 1011 0754 0140A0E3 		mov	r4, #1
 275:Side_dreh.c   ****     for (i=0; i<=5; i++) {
 276:Side_dreh.c   ****         if (color_data[i][4]==center_color)
 277:Side_dreh.c   ****         {
 278:Side_dreh.c   ****             switch (i) {
 279:Side_dreh.c   ****                 case 0://ober Seite
 280:Side_dreh.c   ****                     break;
 281:Side_dreh.c   ****                 case 1://vorne Seite
 282:Side_dreh.c   ****                     drehen(-1);
 283:Side_dreh.c   ****                     klappen();
 284:Side_dreh.c   ****                     break;
 285:Side_dreh.c   ****                 case 2://untere Seite
 286:Side_dreh.c   ****                     klappen();
 287:Side_dreh.c   ****                     klappen();
 288:Side_dreh.c   ****                     break;
 289:Side_dreh.c   ****                 case 3://hintere Seite
 290:Side_dreh.c   ****                     drehen(1);
 1012              		.loc 1 290 0
 1013 0758 0480A0E1 		mov	r8, r4
 282:Side_dreh.c   ****                     klappen();
 1014              		.loc 1 282 0
 1015 075c 0070E0E3 		mvn	r7, #0
 1016 0760 010000EA 		b	.L71
 1017              	.LVL113:
 1018              	.L81:
 1019 0764 095085E2 		add	r5, r5, #9
 1020 0768 014084E2 		add	r4, r4, #1
 1021              	.L71:
 1022              	.LVL114:
 276:Side_dreh.c   ****         {
 1023              		.loc 1 276 0
 1024 076c 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1025 0770 060053E1 		cmp	r3, r6
 1026 0774 1900001A 		bne	.L72
 278:Side_dreh.c   ****                 case 0://ober Seite
 1027              		.loc 1 278 0
 1028 0778 022044E2 		sub	r2, r4, #2
 1029 077c 040052E3 		cmp	r2, #4
 1030 0780 02F19F97 		ldrls	pc, [pc, r2, asl #2]
 1031 0784 150000EA 		b	.L72
 1032              	.L74:
 1033 0788 9C070000 		.word	.L73
 1034 078c AC070000 		.word	.L75
 1035 0790 B8070000 		.word	.L76
 1036 0794 C8070000 		.word	.L77
 1037 0798 D8070000 		.word	.L78
 1038              	.L73:
 282:Side_dreh.c   ****                     klappen();
 1039              		.loc 1 282 0
 1040 079c 0700A0E1 		mov	r0, r7
 1041 07a0 FEFFFFEB 		bl	drehen
 1042              	.LVL115:
 283:Side_dreh.c   ****                     break;
 1043              		.loc 1 283 0
 1044 07a4 FEFFFFEB 		bl	klappen
 1045              	.LVL116:
 284:Side_dreh.c   ****                 case 2://untere Seite
 1046              		.loc 1 284 0
 1047 07a8 EDFFFFEA 		b	.L81
 1048              	.L75:
 286:Side_dreh.c   ****                     klappen();
 1049              		.loc 1 286 0
 1050 07ac FEFFFFEB 		bl	klappen
 1051              	.LVL117:
 287:Side_dreh.c   ****                     break;
 1052              		.loc 1 287 0
 1053 07b0 FEFFFFEB 		bl	klappen
 1054              	.LVL118:
 288:Side_dreh.c   ****                 case 3://hintere Seite
 1055              		.loc 1 288 0
 1056 07b4 EAFFFFEA 		b	.L81
 1057              	.L76:
 1058              		.loc 1 290 0
 1059 07b8 0800A0E1 		mov	r0, r8
 1060 07bc FEFFFFEB 		bl	drehen
 1061              	.LVL119:
 291:Side_dreh.c   ****                     klappen();
 1062              		.loc 1 291 0
 1063 07c0 FEFFFFEB 		bl	klappen
 1064              	.LVL120:
 292:Side_dreh.c   ****                     break;
 1065              		.loc 1 292 0
 1066 07c4 E6FFFFEA 		b	.L81
 1067              	.L77:
 293:Side_dreh.c   ****                 case 4://linke Seite
 294:Side_dreh.c   ****                     klappen();
 1068              		.loc 1 294 0
 1069 07c8 FEFFFFEB 		bl	klappen
 1070              	.LVL121:
 295:Side_dreh.c   ****                     klappen();
 1071              		.loc 1 295 0
 1072 07cc FEFFFFEB 		bl	klappen
 1073              	.LVL122:
 296:Side_dreh.c   ****                     klappen();
 1074              		.loc 1 296 0
 1075 07d0 FEFFFFEB 		bl	klappen
 1076              	.LVL123:
 297:Side_dreh.c   ****                     break;
 1077              		.loc 1 297 0
 1078 07d4 E2FFFFEA 		b	.L81
 1079              	.L78:
 298:Side_dreh.c   ****                 case 5://rechte Seite
 299:Side_dreh.c   ****                     klappen();
 1080              		.loc 1 299 0
 1081 07d8 FEFFFFEB 		bl	klappen
 1082              	.LVL124:
 1083 07dc 010000EA 		b	.L80
 1084              	.LVL125:
 1085              	.L72:
 275:Side_dreh.c   ****         if (color_data[i][4]==center_color)
 1086              		.loc 1 275 0
 1087 07e0 050054E3 		cmp	r4, #5
 1088 07e4 DEFFFFDA 		ble	.L81
 1089              	.LVL126:
 1090              	.L80:
 300:Side_dreh.c   ****                     break;
 301:Side_dreh.c   ****                     
 302:Side_dreh.c   ****                 default:
 303:Side_dreh.c   ****                     break;
 304:Side_dreh.c   ****             }
 305:Side_dreh.c   ****         }
 306:Side_dreh.c   ****     }
 307:Side_dreh.c   ****     return 0;
 308:Side_dreh.c   **** }
 1091              		.loc 1 308 0
 1092 07e8 0000A0E3 		mov	r0, #0
 1093 07ec F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 1094              	.L83:
 1095              		.align	2
 1096              	.L82:
 1097 07f0 00000000 		.word	color_data
 1098              		.cfi_endproc
 1099              	.LFE20:
 1100              		.fnend
 1102              		.align	2
 1103              		.global	change_rightface
 1105              	change_rightface:
 1106              		.fnstart
 1107              	.LFB21:
 309:Side_dreh.c   **** 
 310:Side_dreh.c   **** int change_rightface(int rightface)
 311:Side_dreh.c   **** {
 1108              		.loc 1 311 0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 0
 1111              		@ frame_needed = 0, uses_anonymous_args = 0
 1112              	.LVL127:
 1113 07f4 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1114              		.save {r4, r5, r6, r7, r8, lr}
 1115              		.cfi_def_cfa_offset 24
 1116              		.cfi_offset 4, -24
 1117              		.cfi_offset 5, -20
 1118              		.cfi_offset 6, -16
 1119              		.cfi_offset 7, -12
 1120              		.cfi_offset 8, -8
 1121              		.cfi_offset 14, -4
 1122 07f8 0060A0E1 		mov	r6, r0
 1123              	.LVL128:
 1124 07fc 78509FE5 		ldr	r5, .L92
 1125              		.loc 1 311 0
 1126 0800 0140A0E3 		mov	r4, #1
 312:Side_dreh.c   ****     int i;
 313:Side_dreh.c   ****     for (i=0; i<=5; i++) {
 314:Side_dreh.c   ****         if (color_data[i][4]==rightface) {
 315:Side_dreh.c   ****             switch (i) {
 316:Side_dreh.c   ****                 case 1://vorne Seite
 317:Side_dreh.c   ****                     drehen(-1);
 318:Side_dreh.c   ****                     break;
 319:Side_dreh.c   ****                 case 3://hintere Seite
 320:Side_dreh.c   ****                     drehen(1);
 1127              		.loc 1 320 0
 1128 0804 0470A0E1 		mov	r7, r4
 317:Side_dreh.c   ****                     break;
 1129              		.loc 1 317 0
 1130 0808 0080E0E3 		mvn	r8, #0
 1131 080c 010000EA 		b	.L85
 1132              	.LVL129:
 1133              	.L91:
 1134 0810 095085E2 		add	r5, r5, #9
 1135 0814 014084E2 		add	r4, r4, #1
 1136              	.L85:
 1137 0818 012044E2 		sub	r2, r4, #1
 1138              	.LVL130:
 314:Side_dreh.c   ****             switch (i) {
 1139              		.loc 1 314 0
 1140 081c 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1141 0820 060053E1 		cmp	r3, r6
 1142 0824 1000001A 		bne	.L86
 315:Side_dreh.c   ****                 case 1://vorne Seite
 1143              		.loc 1 315 0
 1144 0828 030052E3 		cmp	r2, #3
 1145 082c 0600000A 		beq	.L87
 1146 0830 040052E3 		cmp	r2, #4
 1147 0834 0700000A 		beq	.L88
 1148 0838 010052E3 		cmp	r2, #1
 1149 083c 0A00001A 		bne	.L86
 317:Side_dreh.c   ****                     break;
 1150              		.loc 1 317 0
 1151 0840 0800A0E1 		mov	r0, r8
 1152 0844 FEFFFFEB 		bl	drehen
 1153              	.LVL131:
 318:Side_dreh.c   ****                 case 3://hintere Seite
 1154              		.loc 1 318 0
 1155 0848 F0FFFFEA 		b	.L91
 1156              	.LVL132:
 1157              	.L87:
 1158              		.loc 1 320 0
 1159 084c 0700A0E1 		mov	r0, r7
 1160 0850 FEFFFFEB 		bl	drehen
 1161              	.LVL133:
 321:Side_dreh.c   ****                     break;
 1162              		.loc 1 321 0
 1163 0854 EDFFFFEA 		b	.L91
 1164              	.LVL134:
 1165              	.L88:
 322:Side_dreh.c   ****                 case 4://linke Seite
 323:Side_dreh.c   ****                     drehen(1);
 1166              		.loc 1 323 0
 1167 0858 0700A0E1 		mov	r0, r7
 1168 085c FEFFFFEB 		bl	drehen
 1169              	.LVL135:
 324:Side_dreh.c   ****                     drehen(1);
 1170              		.loc 1 324 0
 1171 0860 0700A0E1 		mov	r0, r7
 1172 0864 FEFFFFEB 		bl	drehen
 1173              	.LVL136:
 325:Side_dreh.c   ****                     break;
 1174              		.loc 1 325 0
 1175 0868 E8FFFFEA 		b	.L91
 1176              	.LVL137:
 1177              	.L86:
 313:Side_dreh.c   ****         if (color_data[i][4]==rightface) {
 1178              		.loc 1 313 0
 1179 086c 050054E3 		cmp	r4, #5
 1180 0870 E6FFFFDA 		ble	.L91
 326:Side_dreh.c   ****                 default:
 327:Side_dreh.c   ****                     break;
 328:Side_dreh.c   ****             }
 329:Side_dreh.c   ****         }
 330:Side_dreh.c   ****     }
 331:Side_dreh.c   ****     return 0;
 332:Side_dreh.c   **** }
 1181              		.loc 1 332 0
 1182 0874 0000A0E3 		mov	r0, #0
 1183 0878 F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 1184              	.L93:
 1185              		.align	2
 1186              	.L92:
 1187 087c 00000000 		.word	color_data
 1188              		.cfi_endproc
 1189              	.LFE21:
 1190              		.fnend
 1192              		.global	Count
 1193              		.section	.rodata.str1.4,"aMS",%progbits,1
 1194              		.align	2
 1195              	.LC0:
 1196 0000 436F756E 		.ascii	"Count=%d\000"
 1196      743D2564 
 1196      00
 1197 0009 000000   		.bss
 1198              		.align	2
 1199              	.LANCHOR0 = . + 0
 1202              	Count:
 1203 0000 00000000 		.space	4
 1204              		.text
 1205              	.Letext0:
 1206              		.file 2 "/usr/local/carlson-minot/crosscompilers/lib/gcc/arm-none-linux-gnueabi/4.8.3/include/stdd
 1207              		.file 3 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 1208              		.file 4 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 1209              		.file 5 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 1210              		.file 6 "main.h"
 1211              		.file 7 "Arm_motor.h"
 1212              		.file 8 "Dreh_motor.h"
 1213              		.file 9 "print_mode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Side_dreh.c
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:16     .text:0000000000000000 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:19     .text:0000000000000000 klappen
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:158    .text:0000000000000128 $d
                       .ARM.exidx:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:164    .text:0000000000000130 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:167    .text:0000000000000130 drehen_unter
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:445    .text:00000000000003a8 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:453    .text:00000000000003b8 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:456    .text:00000000000003b8 drehen
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:658    .text:000000000000057c $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:663    .text:0000000000000580 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:666    .text:0000000000000580 us_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:711    .text:00000000000005c4 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:717    .text:00000000000005cc $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:720    .text:00000000000005cc ds_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:753    .text:00000000000005f8 $d
                       .ARM.extab:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:759    .text:0000000000000600 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:762    .text:0000000000000600 fs_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:813    .text:0000000000000650 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:819    .text:0000000000000658 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:822    .text:0000000000000658 bs_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:873    .text:00000000000006a8 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:879    .text:00000000000006b0 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:882    .text:00000000000006b0 ls_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:924    .text:00000000000006f0 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:930    .text:00000000000006f8 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:933    .text:00000000000006f8 rs_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:981    .text:0000000000000740 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:987    .text:0000000000000748 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:990    .text:0000000000000748 change_topface
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:1033   .text:0000000000000788 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:1040   .text:000000000000079c $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:1097   .text:00000000000007f0 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:1102   .text:00000000000007f4 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:1105   .text:00000000000007f4 change_rightface
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:1187   .text:000000000000087c $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:1202   .bss:0000000000000000 Count
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:1194   .rodata.str1.4:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccHIw8Fy.s:1198   .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
arm_setpos
wuerfel_print
color_data
__aeabi_unwind_cpp_pr0
DrehTel_setpos
printf
__aeabi_unwind_cpp_pr1
