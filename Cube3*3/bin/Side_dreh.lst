   1              		.arch armv5te
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"Side_dreh.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	klappen
  19              	klappen:
  20              		.fnstart
  21              	.LFB11:
  22              		.file 1 "Side_dreh.c"
   1:Side_dreh.c   **** //
   2:Side_dreh.c   **** //  Side_dreh.c
   3:Side_dreh.c   **** //  Cube3*3
   4:Side_dreh.c   **** //
   5:Side_dreh.c   **** //  Created by 杨春霞 on 12.11.15.
   6:Side_dreh.c   **** //  Copyright © 2015 Chunxia Yang. All rights reserved.
   7:Side_dreh.c   **** //
   8:Side_dreh.c   **** 
   9:Side_dreh.c   **** #include <stdio.h>
  10:Side_dreh.c   **** #include "Side_dreh.h"
  11:Side_dreh.c   **** 
  12:Side_dreh.c   **** #ifdef __linux__
  13:Side_dreh.c   **** #include "Arm_motor.h"
  14:Side_dreh.c   **** #include "Dreh_motor.h"
  15:Side_dreh.c   **** #endif
  16:Side_dreh.c   **** 
  17:Side_dreh.c   **** #include "unistd.h"
  18:Side_dreh.c   **** #include "main.h"
  19:Side_dreh.c   **** #include "print_mode.h"
  20:Side_dreh.c   **** 
  21:Side_dreh.c   **** typedef enum
  22:Side_dreh.c   **** {
  23:Side_dreh.c   ****     U=0,
  24:Side_dreh.c   ****     F=1,
  25:Side_dreh.c   ****     D=2,
  26:Side_dreh.c   ****     B=3,
  27:Side_dreh.c   ****     L=4,
  28:Side_dreh.c   ****     R=5
  29:Side_dreh.c   **** }SURFACE;
  30:Side_dreh.c   **** 
  31:Side_dreh.c   **** int Surface=-1;
  32:Side_dreh.c   **** 
  33:Side_dreh.c   **** void klappen()
  34:Side_dreh.c   **** {
  23              		.loc 1 34 0
  24              		.cfi_startproc
  25              		@ args = 0, pretend = 0, frame = 72
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  28              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  29              		.cfi_def_cfa_offset 36
  30              		.cfi_offset 4, -36
  31              		.cfi_offset 5, -32
  32              		.cfi_offset 6, -28
  33              		.cfi_offset 7, -24
  34              		.cfi_offset 8, -20
  35              		.cfi_offset 9, -16
  36              		.cfi_offset 10, -12
  37              		.cfi_offset 11, -8
  38              		.cfi_offset 14, -4
  39              		.pad #76
  40 0004 4CD04DE2 		sub	sp, sp, #76
  41              		.cfi_def_cfa_offset 112
  35:Side_dreh.c   **** //#ifdef __ARMEL__
  36:Side_dreh.c   **** #ifdef __linux__
  37:Side_dreh.c   ****     arm_setpos(3);
  42              		.loc 1 37 0
  43 0008 0300A0E3 		mov	r0, #3
  44 000c FEFFFFEB 		bl	arm_setpos
  45              	.LVL0:
  38:Side_dreh.c   ****     arm_setpos(2);
  46              		.loc 1 38 0
  47 0010 0200A0E3 		mov	r0, #2
  48 0014 FEFFFFEB 		bl	arm_setpos
  49              	.LVL1:
  39:Side_dreh.c   ****     arm_setpos(4);
  50              		.loc 1 39 0
  51 0018 0400A0E3 		mov	r0, #4
  52 001c FEFFFFEB 		bl	arm_setpos
  53              	.LVL2:
  54 0020 0070A0E3 		mov	r7, #0
  40:Side_dreh.c   ****     //Code zur Ansteuerung der Hardware
  41:Side_dreh.c   **** #endif
  42:Side_dreh.c   ****     int i,j;
  43:Side_dreh.c   ****     unsigned char temp_color_data[6][9];
  44:Side_dreh.c   ****     for(i=0;i<3;i++)
  55              		.loc 1 44 0
  56 0024 07E0A0E1 		mov	lr, r7
  57 0028 F8A09FE5 		ldr	r10, .L11
  58 002c 3D208DE2 		add	r2, sp, #61
  59 0030 04208DE5 		str	r2, [sp, #4]
  60 0034 12308DE2 		add	r3, sp, #18
  61 0038 08308DE5 		str	r3, [sp, #8]
  62 003c 180000EA 		b	.L2
  63              	.LVL3:
  64              	.L6:
  45:Side_dreh.c   ****     {
  46:Side_dreh.c   ****         for (j=0; j<3; j++)
  47:Side_dreh.c   ****         {
  48:Side_dreh.c   ****             temp_color_data[1][3*i+j]=color_data[1][3*j+(2-i)]; //
  65              		.loc 1 48 0 discriminator 2
  66 0040 0980D0E5 		ldrb	r8, [r0, #9]	@ zero_extendqisi2
  67 0044 0980C3E5 		strb	r8, [r3, #9]
  49:Side_dreh.c   ****             temp_color_data[3][3*i+j]=color_data[3][3*(2-j)+i]; //
  68              		.loc 1 49 0 discriminator 2
  69 0048 2180D1E5 		ldrb	r8, [r1, #33]	@ zero_extendqisi2
  70 004c 1B80C3E5 		strb	r8, [r3, #27]
  50:Side_dreh.c   ****             temp_color_data[5][3*i+j]=color_data[2][3*(2-j)+i]; //
  71              		.loc 1 50 0 discriminator 2
  72 0050 1880D1E5 		ldrb	r8, [r1, #24]	@ zero_extendqisi2
  73 0054 2D80C3E5 		strb	r8, [r3, #45]
  51:Side_dreh.c   ****             temp_color_data[2][3*(2-j)+i]=color_data[4][3*(2-i)+(2-j)];//
  74              		.loc 1 51 0 discriminator 2
  75 0058 018074E5 		ldrb	r8, [r4, #-1]!	@ zero_extendqisi2
  76 005c 1880CCE5 		strb	r8, [ip, #24]
  52:Side_dreh.c   ****             temp_color_data[4][3*(2-i)+(2-j)]=color_data[0][3*j+(2-i)];//
  77              		.loc 1 52 0 discriminator 2
  78 0060 0380D0E4 		ldrb	r8, [r0], #3	@ zero_extendqisi2
  79 0064 018065E5 		strb	r8, [r5, #-1]!
  53:Side_dreh.c   ****             temp_color_data[0][3*j+(2-i)]=color_data[5][3*i+j];//
  80              		.loc 1 53 0 discriminator 2
  81 0068 0180F6E5 		ldrb	r8, [r6, #1]!	@ zero_extendqisi2
  82 006c 0280C9E7 		strb	r8, [r9, r2]
  83              	.LVL4:
  84 0070 032082E2 		add	r2, r2, #3
  85 0074 013083E2 		add	r3, r3, #1
  86              	.LVL5:
  87 0078 031041E2 		sub	r1, r1, #3
  88 007c 03C04CE2 		sub	ip, ip, #3
  46:Side_dreh.c   ****         {
  89              		.loc 1 46 0 discriminator 2
  90 0080 090052E3 		cmp	r2, #9
  91 0084 EDFFFF1A 		bne	.L6
  44:Side_dreh.c   ****     {
  92              		.loc 1 44 0
  93 0088 01E08EE2 		add	lr, lr, #1
  94              	.LVL6:
  95 008c 037087E2 		add	r7, r7, #3
  96              	.LVL7:
  97 0090 03005EE3 		cmp	lr, #3
  98 0094 00C0A003 		moveq	ip, #0
  99 0098 0CE0A001 		moveq	lr, ip
 100              	.LVL8:
 101 009c 0C409D05 		ldreq	r4, [sp, #12]
 102 00a0 1800000A 		beq	.L5
 103              	.LVL9:
 104              	.L2:
 105 00a4 0CA08DE5 		str	r10, [sp, #12]
 106 00a8 10B08DE2 		add	fp, sp, #16
 107 00ac 78809FE5 		ldr	r8, .L11+4
 108 00b0 076088E0 		add	r6, r8, r7
  34:Side_dreh.c   **** //#ifdef __ARMEL__
 109              		.loc 1 34 0 discriminator 1
 110 00b4 04209DE5 		ldr	r2, [sp, #4]
 111 00b8 025067E0 		rsb	r5, r7, r2
 112 00bc 0EC08BE0 		add	ip, fp, lr
 113 00c0 013088E2 		add	r3, r8, #1
 114 00c4 034067E0 		rsb	r4, r7, r3
 115 00c8 0E108AE0 		add	r1, r10, lr
 116 00cc 07308BE0 		add	r3, fp, r7
 117 00d0 2A8048E2 		sub	r8, r8, #42
 118 00d4 08006EE0 		rsb	r0, lr, r8
 119 00d8 0020A0E3 		mov	r2, #0
 120 00dc 08809DE5 		ldr	r8, [sp, #8]
 121 00e0 08906EE0 		rsb	r9, lr, r8
 122 00e4 D5FFFFEA 		b	.L6
 123              	.LVL10:
 124              	.L9:
  54:Side_dreh.c   ****         }
  55:Side_dreh.c   ****     }
  56:Side_dreh.c   ****     
  57:Side_dreh.c   ****     int a,b;
  58:Side_dreh.c   ****     for (a=0;a<6;a++)
  59:Side_dreh.c   ****     {
  60:Side_dreh.c   ****         for (b=0;b<9;b++)
  61:Side_dreh.c   ****         {
  62:Side_dreh.c   ****             color_data[a][b]=temp_color_data[a][b];
 125              		.loc 1 62 0 discriminator 2
 126 00e8 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 127 00ec 0320C0E7 		strb	r2, [r0, r3]
  60:Side_dreh.c   ****         {
 128              		.loc 1 60 0 discriminator 2
 129 00f0 013083E2 		add	r3, r3, #1
 130              	.LVL11:
 131 00f4 090053E3 		cmp	r3, #9
 132 00f8 FAFFFF1A 		bne	.L9
 133              	.LVL12:
 134 00fc 09C08CE2 		add	ip, ip, #9
  58:Side_dreh.c   ****     {
 135              		.loc 1 58 0
 136 0100 36005CE3 		cmp	ip, #54
 137 0104 0300000A 		beq	.L8
 138              	.LVL13:
 139              	.L5:
  44:Side_dreh.c   ****     {
 140              		.loc 1 44 0 discriminator 1
 141 0108 0E30A0E1 		mov	r3, lr
 142 010c 0C0084E0 		add	r0, r4, ip
 143 0110 0C108BE0 		add	r1, fp, ip
 144 0114 F3FFFFEA 		b	.L9
 145              	.LVL14:
 146              	.L8:
  63:Side_dreh.c   ****         }
  64:Side_dreh.c   ****     }
  65:Side_dreh.c   ****     wuerfel_print(1);/////////////
 147              		.loc 1 65 0
 148 0118 0100A0E3 		mov	r0, #1
 149 011c FEFFFFEB 		bl	wuerfel_print
 150              	.LVL15:
  66:Side_dreh.c   **** }
 151              		.loc 1 66 0
 152 0120 4CD08DE2 		add	sp, sp, #76
 153              		@ sp needed
 154 0124 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 155              	.L12:
 156              		.align	2
 157              	.L11:
 158 0128 00000000 		.word	color_data
 159 012c 2C000000 		.word	color_data+44
 160              		.cfi_endproc
 161              	.LFE11:
 162              		.fnend
 164              		.align	2
 165              		.global	drehen_unter
 167              	drehen_unter:
 168              		.fnstart
 169              	.LFB12:
  67:Side_dreh.c   **** 
  68:Side_dreh.c   **** 
  69:Side_dreh.c   **** void drehen_unter(int dir,int dreh_Angel)
  70:Side_dreh.c   **** {
 170              		.loc 1 70 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 72
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL16:
 175 0130 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 176              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 177              		.cfi_def_cfa_offset 36
 178              		.cfi_offset 4, -36
 179              		.cfi_offset 5, -32
 180              		.cfi_offset 6, -28
 181              		.cfi_offset 7, -24
 182              		.cfi_offset 8, -20
 183              		.cfi_offset 9, -16
 184              		.cfi_offset 10, -12
 185              		.cfi_offset 11, -8
 186              		.cfi_offset 14, -4
 187              		.pad #76
 188 0134 4CD04DE2 		sub	sp, sp, #76
 189              		.cfi_def_cfa_offset 112
 190 0138 0C008DE5 		str	r0, [sp, #12]
 191 013c 0140A0E1 		mov	r4, r1
  71:Side_dreh.c   **** #ifdef __linux__
  72:Side_dreh.c   ****     arm_setpos(3);
 192              		.loc 1 72 0
 193 0140 0300A0E3 		mov	r0, #3
 194              	.LVL17:
 195 0144 FEFFFFEB 		bl	arm_setpos
 196              	.LVL18:
  73:Side_dreh.c   ****     if(dir==1)
 197              		.loc 1 73 0
 198 0148 0C109DE5 		ldr	r1, [sp, #12]
 199 014c 010051E3 		cmp	r1, #1
  74:Side_dreh.c   ****     {
  75:Side_dreh.c   ****         DrehTel_setpos(2*dreh_Angel*3/270);
 200              		.loc 1 75 0
 201 0150 843084E0 		add	r3, r4, r4, asl #1
 202 0154 8330A001 		moveq	r3, r3, asl #1
 203 0158 48029F05 		ldreq	r0, .L33
 204 015c 9320C000 		smulleq	r2, r0, r3, r0
  76:Side_dreh.c   ****     }else{
  77:Side_dreh.c   ****         DrehTel_setpos(dreh_Angel*3/270);
 205              		.loc 1 77 0
 206 0160 40029F15 		ldrne	r0, .L33
 207 0164 93E0C010 		smullne	lr, r0, r3, r0
 208 0168 030080E0 		add	r0, r0, r3
 209 016c C33FA0E1 		mov	r3, r3, asr #31
 210 0170 400463E0 		rsb	r0, r3, r0, asr #8
 211 0174 FEFFFFEB 		bl	DrehTel_setpos
 212              	.LVL19:
  78:Side_dreh.c   ****     }
  79:Side_dreh.c   **** #endif
  80:Side_dreh.c   ****     int i,j,k;
  81:Side_dreh.c   ****     unsigned char temp_color_data[6][9];
  82:Side_dreh.c   ****     for (k=0; k<dreh_Angel/90;k++)
 213              		.loc 1 82 0
 214 0178 2C329FE5 		ldr	r3, .L33+4
 215 017c 9413C3E0 		smull	r1, r3, r4, r3
 216 0180 043083E0 		add	r3, r3, r4
 217 0184 C44FA0E1 		mov	r4, r4, asr #31
 218              	.LVL20:
 219 0188 434364E0 		rsb	r4, r4, r3, asr #6
 220 018c 08408DE5 		str	r4, [sp, #8]
 221 0190 000054E3 		cmp	r4, #0
 222 0194 7C0000DA 		ble	.L16
 223 0198 00B0A0E3 		mov	fp, #0
 224 019c 0C829FE5 		ldr	r8, .L33+8
 225              	.LBB2:
  83:Side_dreh.c   ****     {
  84:Side_dreh.c   ****         if (dir==1)
 226              		.loc 1 84 0
 227 01a0 0B60A0E1 		mov	r6, fp
 228 01a4 21A08DE2 		add	r10, sp, #33
 229 01a8 013048E2 		sub	r3, r8, #1
 230 01ac 00308DE5 		str	r3, [sp]
 231 01b0 13E083E2 		add	lr, r3, #19
 232 01b4 12E04EE2 		sub	lr, lr, #18
 233 01b8 04E08DE5 		str	lr, [sp, #4]
 234              	.LVL21:
 235              	.L28:
 236 01bc 0C109DE5 		ldr	r1, [sp, #12]
 237 01c0 010051E3 		cmp	r1, #1
 238 01c4 2F00001A 		bne	.L17
 239 01c8 E4919FE5 		ldr	r9, .L33+12
 240 01cc 22708DE2 		add	r7, sp, #34
 241 01d0 04309DE5 		ldr	r3, [sp, #4]
 242 01d4 10208DE2 		add	r2, sp, #16
 243 01d8 0640A0E1 		mov	r4, r6
 244              	.L21:
 245              	.LVL22:
  85:Side_dreh.c   ****         {
  86:Side_dreh.c   ****             for(i=0;i<3;i++)
  87:Side_dreh.c   ****             {
  88:Side_dreh.c   ****                 temp_color_data[5][3*0+i]=color_data[1][3*2+(2-i)];
 246              		.loc 1 88 0
 247 01dc 011079E5 		ldrb	r1, [r9, #-1]!	@ zero_extendqisi2
 248 01e0 2D10C2E5 		strb	r1, [r2, #45]
  89:Side_dreh.c   ****                 temp_color_data[5][3*1+i]=color_data[5][3*1+i];
 249              		.loc 1 89 0
 250 01e4 3010D3E5 		ldrb	r1, [r3, #48]	@ zero_extendqisi2
 251 01e8 3010C2E5 		strb	r1, [r2, #48]
  90:Side_dreh.c   ****                 temp_color_data[5][3*2+i]=color_data[5][3*2+i];
 252              		.loc 1 90 0
 253 01ec 3310D3E5 		ldrb	r1, [r3, #51]	@ zero_extendqisi2
 254 01f0 3310C2E5 		strb	r1, [r2, #51]
  91:Side_dreh.c   ****                 
  92:Side_dreh.c   ****                 temp_color_data[1][3*0+i]=color_data[1][3*0+i];
 255              		.loc 1 92 0
 256 01f4 0910D3E5 		ldrb	r1, [r3, #9]	@ zero_extendqisi2
 257 01f8 0910C2E5 		strb	r1, [r2, #9]
  93:Side_dreh.c   ****                 temp_color_data[1][3*1+i]=color_data[1][3*1+i];
 258              		.loc 1 93 0
 259 01fc 0C10D3E5 		ldrb	r1, [r3, #12]	@ zero_extendqisi2
 260 0200 0C10C2E5 		strb	r1, [r2, #12]
  94:Side_dreh.c   ****                 temp_color_data[1][3*2+(2-i)]=color_data[4][3*0+i];
 261              		.loc 1 94 0
 262 0204 2410D3E5 		ldrb	r1, [r3, #36]	@ zero_extendqisi2
 263 0208 011067E5 		strb	r1, [r7, #-1]!
  95:Side_dreh.c   ****                 
  96:Side_dreh.c   ****                 temp_color_data[4][3*0+i]=color_data[3][3*0+i];
 264              		.loc 1 96 0
 265 020c 1B10D3E5 		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 266 0210 2410C2E5 		strb	r1, [r2, #36]
  97:Side_dreh.c   ****                 temp_color_data[4][3*1+i]=color_data[4][3*1+i];
 267              		.loc 1 97 0
 268 0214 2710D3E5 		ldrb	r1, [r3, #39]	@ zero_extendqisi2
 269 0218 2710C2E5 		strb	r1, [r2, #39]
  98:Side_dreh.c   ****                 temp_color_data[4][3*2+i]=color_data[4][3*2+i];
 270              		.loc 1 98 0
 271 021c 2A10D3E5 		ldrb	r1, [r3, #42]	@ zero_extendqisi2
 272 0220 2A10C2E5 		strb	r1, [r2, #42]
  99:Side_dreh.c   ****                 
 100:Side_dreh.c   ****                 temp_color_data[3][3*0+i]=color_data[5][3*0+i];
 273              		.loc 1 100 0
 274 0224 2D10D3E5 		ldrb	r1, [r3, #45]	@ zero_extendqisi2
 275 0228 1B10C2E5 		strb	r1, [r2, #27]
 101:Side_dreh.c   ****                 temp_color_data[3][3*1+i]=color_data[3][3*1+i];
 276              		.loc 1 101 0
 277 022c 1E10D3E5 		ldrb	r1, [r3, #30]	@ zero_extendqisi2
 278 0230 1E10C2E5 		strb	r1, [r2, #30]
 102:Side_dreh.c   ****                 temp_color_data[3][3*2+i]=color_data[3][3*2+i];
 279              		.loc 1 102 0
 280 0234 2110D3E5 		ldrb	r1, [r3, #33]	@ zero_extendqisi2
 281 0238 2110C2E5 		strb	r1, [r2, #33]
 282              	.LVL23:
 283 023c 04C08AE0 		add	ip, r10, r4
 284 0240 0300A0E1 		mov	r0, r3
 103:Side_dreh.c   ****                 
 104:Side_dreh.c   ****                 for (j=0; j<3; j++)
 285              		.loc 1 104 0
 286 0244 0610A0E1 		mov	r1, r6
 287 0248 04E09DE5 		ldr	lr, [sp, #4]
 288 024c 04508EE0 		add	r5, lr, r4
 289              	.LVL24:
 290              	.L19:
 105:Side_dreh.c   ****                 {
 106:Side_dreh.c   ****                     temp_color_data[2][3*i+j]=color_data[2][3*(2-j)+i];
 291              		.loc 1 106 0 discriminator 2
 292 0250 18E0D0E5 		ldrb	lr, [r0, #24]	@ zero_extendqisi2
 293 0254 01E0ECE5 		strb	lr, [ip, #1]!
 107:Side_dreh.c   ****                     temp_color_data[0][3*i+j]=color_data[0][3*i+j];
 294              		.loc 1 107 0 discriminator 2
 295 0258 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2
 296 025c 12E04CE5 		strb	lr, [ip, #-18]
 104:Side_dreh.c   ****                 {
 297              		.loc 1 104 0 discriminator 2
 298 0260 011081E2 		add	r1, r1, #1
 299              	.LVL25:
 300 0264 030040E2 		sub	r0, r0, #3
 301 0268 030051E3 		cmp	r1, #3
 302 026c F7FFFF1A 		bne	.L19
 303              	.LVL26:
 304 0270 012082E2 		add	r2, r2, #1
 305              	.LVL27:
 306 0274 013083E2 		add	r3, r3, #1
 307 0278 034084E2 		add	r4, r4, #3
  86:Side_dreh.c   ****             {
 308              		.loc 1 86 0
 309 027c 090054E3 		cmp	r4, #9
 310 0280 D5FFFF1A 		bne	.L21
 311 0284 430000EA 		b	.L20
 312              	.LVL28:
 313              	.L17:
 314 0288 22908DE2 		add	r9, sp, #34
  84:Side_dreh.c   ****         {
 315              		.loc 1 84 0
 316 028c 0850A0E1 		mov	r5, r8
 317 0290 10208DE2 		add	r2, sp, #16
 318 0294 0830A0E1 		mov	r3, r8
 319 0298 0640A0E1 		mov	r4, r6
 320              	.L24:
 321              	.LVL29:
 108:Side_dreh.c   ****                 }
 109:Side_dreh.c   ****             }
 110:Side_dreh.c   ****         }
 111:Side_dreh.c   ****         else
 112:Side_dreh.c   ****         {
 113:Side_dreh.c   ****             for(i=0;i<3;i++)
 114:Side_dreh.c   ****             {
 115:Side_dreh.c   ****                 temp_color_data[5][3*0+i]=color_data[3][3*0+i];
 322              		.loc 1 115 0
 323 029c 1B10D3E5 		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 324 02a0 2D10C2E5 		strb	r1, [r2, #45]
 116:Side_dreh.c   ****                 temp_color_data[5][3*1+i]=color_data[5][3*1+i];
 325              		.loc 1 116 0
 326 02a4 3010D3E5 		ldrb	r1, [r3, #48]	@ zero_extendqisi2
 327 02a8 3010C2E5 		strb	r1, [r2, #48]
 117:Side_dreh.c   ****                 temp_color_data[5][3*2+i]=color_data[5][3*2+i];
 328              		.loc 1 117 0
 329 02ac 3310D3E5 		ldrb	r1, [r3, #51]	@ zero_extendqisi2
 330 02b0 3310C2E5 		strb	r1, [r2, #51]
 118:Side_dreh.c   ****                 
 119:Side_dreh.c   ****                 temp_color_data[3][3*0+i]=color_data[4][3*0+i];
 331              		.loc 1 119 0
 332 02b4 2410D3E5 		ldrb	r1, [r3, #36]	@ zero_extendqisi2
 333 02b8 1B10C2E5 		strb	r1, [r2, #27]
 120:Side_dreh.c   ****                 temp_color_data[3][3*1+i]=color_data[3][3*1+i];
 334              		.loc 1 120 0
 335 02bc 1E10D3E5 		ldrb	r1, [r3, #30]	@ zero_extendqisi2
 336 02c0 1E10C2E5 		strb	r1, [r2, #30]
 121:Side_dreh.c   ****                 temp_color_data[3][3*2+i]=color_data[3][3*2+i];
 337              		.loc 1 121 0
 338 02c4 2110D3E5 		ldrb	r1, [r3, #33]	@ zero_extendqisi2
 339 02c8 2110C2E5 		strb	r1, [r2, #33]
 122:Side_dreh.c   ****                 
 123:Side_dreh.c   ****                 temp_color_data[4][3*0+i]=color_data[1][3*2+2-i];
 340              		.loc 1 123 0
 341 02cc 1110D5E5 		ldrb	r1, [r5, #17]	@ zero_extendqisi2
 342 02d0 2410C2E5 		strb	r1, [r2, #36]
 124:Side_dreh.c   ****                 temp_color_data[4][3*1+i]=color_data[4][3*1+i];
 343              		.loc 1 124 0
 344 02d4 2710D3E5 		ldrb	r1, [r3, #39]	@ zero_extendqisi2
 345 02d8 2710C2E5 		strb	r1, [r2, #39]
 125:Side_dreh.c   ****                 temp_color_data[4][3*2+i]=color_data[4][3*2+i];
 346              		.loc 1 125 0
 347 02dc 2A10D3E5 		ldrb	r1, [r3, #42]	@ zero_extendqisi2
 348 02e0 2A10C2E5 		strb	r1, [r2, #42]
 126:Side_dreh.c   ****                 
 127:Side_dreh.c   ****                 temp_color_data[1][3*0+i]=color_data[1][3*0+i];
 349              		.loc 1 127 0
 350 02e4 0910D3E5 		ldrb	r1, [r3, #9]	@ zero_extendqisi2
 351 02e8 0910C2E5 		strb	r1, [r2, #9]
 128:Side_dreh.c   ****                 temp_color_data[1][3*1+i]=color_data[1][3*1+i];
 352              		.loc 1 128 0
 353 02ec 0C10D3E5 		ldrb	r1, [r3, #12]	@ zero_extendqisi2
 354 02f0 0C10C2E5 		strb	r1, [r2, #12]
 129:Side_dreh.c   ****                 temp_color_data[1][3*2+2-i]=color_data[5][3*0+i];
 355              		.loc 1 129 0
 356 02f4 2D10D3E5 		ldrb	r1, [r3, #45]	@ zero_extendqisi2
 357 02f8 011069E5 		strb	r1, [r9, #-1]!
 358              	.LVL30:
 359 02fc 097085E2 		add	r7, r5, #9
 360 0300 00109DE5 		ldr	r1, [sp]
 361 0304 04C081E0 		add	ip, r1, r4
 362 0308 04008AE0 		add	r0, r10, r4
 363 030c 0510A0E1 		mov	r1, r5
 364              	.LVL31:
 365              	.L23:
 130:Side_dreh.c   ****                 
 131:Side_dreh.c   ****                 for (j=0; j<3; j++)
 132:Side_dreh.c   ****                 {
 133:Side_dreh.c   ****                     temp_color_data[2][3*i+j]=color_data[2][3*j+(2-i)];
 366              		.loc 1 133 0 discriminator 2
 367 0310 14E0D1E5 		ldrb	lr, [r1, #20]	@ zero_extendqisi2
 368 0314 01E0E0E5 		strb	lr, [r0, #1]!
 369              	.LVL32:
 134:Side_dreh.c   ****                     temp_color_data[0][3*i+j]=color_data[0][3*i+j];
 370              		.loc 1 134 0 discriminator 2
 371 0318 01E0FCE5 		ldrb	lr, [ip, #1]!	@ zero_extendqisi2
 372 031c 12E040E5 		strb	lr, [r0, #-18]
 373              	.LVL33:
 374 0320 031081E2 		add	r1, r1, #3
 131:Side_dreh.c   ****                 {
 375              		.loc 1 131 0 discriminator 2
 376 0324 070051E1 		cmp	r1, r7
 377 0328 F8FFFF1A 		bne	.L23
 378              	.LVL34:
 379 032c 013083E2 		add	r3, r3, #1
 380              	.LVL35:
 381 0330 012082E2 		add	r2, r2, #1
 382 0334 015045E2 		sub	r5, r5, #1
 383 0338 034084E2 		add	r4, r4, #3
 384              	.LVL36:
 113:Side_dreh.c   ****             {
 385              		.loc 1 113 0
 386 033c 090054E3 		cmp	r4, #9
 387 0340 D5FFFF1A 		bne	.L24
 388 0344 130000EA 		b	.L20
 389              	.LVL37:
 390              	.L27:
 135:Side_dreh.c   ****                 }
 136:Side_dreh.c   ****             }
 137:Side_dreh.c   ****         }
 138:Side_dreh.c   ****         
 139:Side_dreh.c   ****         int a,b;
 140:Side_dreh.c   ****         for (a=0;a<6;a++)
 141:Side_dreh.c   ****         {
 142:Side_dreh.c   ****             for (b=0;b<9;b++)
 143:Side_dreh.c   ****             {
 144:Side_dreh.c   ****                 color_data[a][b]=temp_color_data[a][b];
 391              		.loc 1 144 0 discriminator 2
 392 0348 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 393 034c 0320C0E7 		strb	r2, [r0, r3]
 142:Side_dreh.c   ****             {
 394              		.loc 1 142 0 discriminator 2
 395 0350 013083E2 		add	r3, r3, #1
 396              	.LVL38:
 397 0354 090053E3 		cmp	r3, #9
 398 0358 FAFFFF1A 		bne	.L27
 399              	.LVL39:
 400 035c 09C08CE2 		add	ip, ip, #9
 140:Side_dreh.c   ****         {
 401              		.loc 1 140 0
 402 0360 36005CE3 		cmp	ip, #54
 403 0364 0400000A 		beq	.L26
 404              	.LVL40:
 405              	.L29:
 129:Side_dreh.c   ****                 
 406              		.loc 1 129 0 discriminator 1
 407 0368 0630A0E1 		mov	r3, r6
 408 036c 08008CE0 		add	r0, ip, r8
 409 0370 10208DE2 		add	r2, sp, #16
 410 0374 02108CE0 		add	r1, ip, r2
 411 0378 F2FFFFEA 		b	.L27
 412              	.LVL41:
 413              	.L26:
 414              	.LBE2:
  82:Side_dreh.c   ****     {
 415              		.loc 1 82 0
 416 037c 01B08BE2 		add	fp, fp, #1
 417              	.LVL42:
 418 0380 08309DE5 		ldr	r3, [sp, #8]
 419              	.LVL43:
 420 0384 03005BE1 		cmp	fp, r3
 421 0388 8BFFFF1A 		bne	.L28
 422              	.LVL44:
 423              	.L16:
 145:Side_dreh.c   ****             }
 146:Side_dreh.c   ****         }
 147:Side_dreh.c   ****     }
 148:Side_dreh.c   ****     wuerfel_print(1);/////////////
 424              		.loc 1 148 0
 425 038c 0100A0E3 		mov	r0, #1
 426 0390 FEFFFFEB 		bl	wuerfel_print
 427              	.LVL45:
 428 0394 010000EA 		b	.L32
 429              	.LVL46:
 430              	.L20:
 431              	.LBB3:
 129:Side_dreh.c   ****                 
 432              		.loc 1 129 0
 433 0398 06C0A0E1 		mov	ip, r6
 434 039c F1FFFFEA 		b	.L29
 435              	.LVL47:
 436              	.L32:
 437              	.LBE3:
 149:Side_dreh.c   **** }
 438              		.loc 1 149 0
 439 03a0 4CD08DE2 		add	sp, sp, #76
 440              		@ sp needed
 441 03a4 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 442              	.L34:
 443              		.align	2
 444              	.L33:
 445 03a8 49D6B9F2 		.word	-222702007
 446 03ac B7600BB6 		.word	-1240768329
 447 03b0 00000000 		.word	color_data
 448 03b4 12000000 		.word	color_data+18
 449              		.cfi_endproc
 450              	.LFE12:
 451              		.fnend
 453              		.align	2
 454              		.global	drehen
 456              	drehen:
 457              		.fnstart
 458              	.LFB13:
 150:Side_dreh.c   **** 
 151:Side_dreh.c   **** void drehen(int dir)                       //drehen 90 Grad
 152:Side_dreh.c   **** {
 459              		.loc 1 152 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 64
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              	.LVL48:
 464 03b8 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 465              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 466              		.cfi_def_cfa_offset 36
 467              		.cfi_offset 4, -36
 468              		.cfi_offset 5, -32
 469              		.cfi_offset 6, -28
 470              		.cfi_offset 7, -24
 471              		.cfi_offset 8, -20
 472              		.cfi_offset 9, -16
 473              		.cfi_offset 10, -12
 474              		.cfi_offset 11, -8
 475              		.cfi_offset 14, -4
 476              		.pad #68
 477 03bc 44D04DE2 		sub	sp, sp, #68
 478              		.cfi_def_cfa_offset 104
 479 03c0 0040A0E1 		mov	r4, r0
 153:Side_dreh.c   **** #ifdef __linux__
 154:Side_dreh.c   ****     arm_setpos(4);
 480              		.loc 1 154 0
 481 03c4 0400A0E3 		mov	r0, #4
 482              	.LVL49:
 483 03c8 FEFFFFEB 		bl	arm_setpos
 484              	.LVL50:
 155:Side_dreh.c   ****     if(dir==1)
 485              		.loc 1 155 0
 486 03cc 010054E3 		cmp	r4, #1
 487 03d0 0800001A 		bne	.L36
 156:Side_dreh.c   ****     {
 157:Side_dreh.c   ****         DrehTel_setpos(1);
 488              		.loc 1 157 0
 489 03d4 0100A0E3 		mov	r0, #1
 490 03d8 FEFFFFEB 		bl	DrehTel_setpos
 491              	.LVL51:
 492 03dc 0050A0E3 		mov	r5, #0
 493 03e0 0570A0E1 		mov	r7, r5
 494 03e4 90819FE5 		ldr	r8, .L50
 495 03e8 02B088E2 		add	fp, r8, #2
 496 03ec 12A088E2 		add	r10, r8, #18
 497 03f0 1A908DE2 		add	r9, sp, #26
 498 03f4 210000EA 		b	.L37
 499              	.LVL52:
 500              	.L36:
 158:Side_dreh.c   ****     }else{
 159:Side_dreh.c   ****         DrehTel_setpos(2);
 501              		.loc 1 159 0
 502 03f8 0200A0E3 		mov	r0, #2
 503 03fc FEFFFFEB 		bl	DrehTel_setpos
 504              	.LVL53:
 505 0400 0040A0E3 		mov	r4, #0
 506              	.LVL54:
 507 0404 0460A0E1 		mov	r6, r4
 508 0408 6C819FE5 		ldr	r8, .L50
 509 040c 12B088E2 		add	fp, r8, #18
 510 0410 1AA08DE2 		add	r10, sp, #26
 157:Side_dreh.c   ****     }else{
 511              		.loc 1 157 0
 512 0414 0490A0E1 		mov	r9, r4
 513 0418 021088E2 		add	r1, r8, #2
 514 041c 04108DE5 		str	r1, [sp, #4]
 515 0420 350000EA 		b	.L38
 516              	.LVL55:
 517              	.L41:
 160:Side_dreh.c   ****     }
 161:Side_dreh.c   **** #endif
 162:Side_dreh.c   ****     int i,j;
 163:Side_dreh.c   ****     unsigned char temp_color_data[6][9];
 164:Side_dreh.c   ****     if(dir==1)
 165:Side_dreh.c   ****     {
 166:Side_dreh.c   ****         for (i=0; i<3; i++) {
 167:Side_dreh.c   ****             for (j=0; j<3; j++) {
 168:Side_dreh.c   ****                 temp_color_data[0][3*i+j]=color_data[0][3*(2-j)+i];
 518              		.loc 1 168 0 discriminator 2
 519 0424 0660D0E5 		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 520 0428 0060C3E5 		strb	r6, [r3]
 169:Side_dreh.c   ****                 temp_color_data[2][3*i+j]=color_data[2][3*j+(2-i)];
 521              		.loc 1 169 0 discriminator 2
 522 042c 1260DCE5 		ldrb	r6, [ip, #18]	@ zero_extendqisi2
 523 0430 1260C3E5 		strb	r6, [r3, #18]
 170:Side_dreh.c   ****                 temp_color_data[4][3*i+j]=color_data[1][3*(2-i)+(2-j)];
 524              		.loc 1 170 0 discriminator 2
 525 0434 01607EE5 		ldrb	r6, [lr, #-1]!	@ zero_extendqisi2
 526 0438 2460C3E5 		strb	r6, [r3, #36]
 171:Side_dreh.c   ****                 temp_color_data[1][3*(2-i)+(2-j)]=color_data[5][3*i+j];
 527              		.loc 1 171 0 discriminator 2
 528 043c 2D60D2E5 		ldrb	r6, [r2, #45]	@ zero_extendqisi2
 529 0440 016064E5 		strb	r6, [r4, #-1]!
 172:Side_dreh.c   ****                 temp_color_data[5][3*i+j]=color_data[3][3*i+j];
 530              		.loc 1 172 0 discriminator 2
 531 0444 1B60D2E5 		ldrb	r6, [r2, #27]	@ zero_extendqisi2
 532 0448 2D60C3E5 		strb	r6, [r3, #45]
 173:Side_dreh.c   ****                 temp_color_data[3][3*i+j]=color_data[4][3*i+j];
 533              		.loc 1 173 0 discriminator 2
 534 044c 2460D2E5 		ldrb	r6, [r2, #36]	@ zero_extendqisi2
 535 0450 1B60C3E5 		strb	r6, [r3, #27]
 167:Side_dreh.c   ****                 temp_color_data[0][3*i+j]=color_data[0][3*(2-j)+i];
 536              		.loc 1 167 0 discriminator 2
 537 0454 011081E2 		add	r1, r1, #1
 538              	.LVL56:
 539 0458 030040E2 		sub	r0, r0, #3
 540 045c 013083E2 		add	r3, r3, #1
 541 0460 03C08CE2 		add	ip, ip, #3
 542 0464 012082E2 		add	r2, r2, #1
 543 0468 030051E3 		cmp	r1, #3
 544 046c ECFFFF1A 		bne	.L41
 166:Side_dreh.c   ****             for (j=0; j<3; j++) {
 545              		.loc 1 166 0
 546 0470 017087E2 		add	r7, r7, #1
 547              	.LVL57:
 548 0474 035085E2 		add	r5, r5, #3
 549 0478 030057E3 		cmp	r7, #3
 550 047c 3800000A 		beq	.L40
 551              	.LVL58:
 552              	.L37:
 553 0480 094065E0 		rsb	r4, r5, r9
 152:Side_dreh.c   **** #ifdef __linux__
 554              		.loc 1 152 0 discriminator 1
 555 0484 052088E0 		add	r2, r8, r5
 556 0488 0AE065E0 		rsb	lr, r5, r10
 557 048c 0BC067E0 		rsb	ip, r7, fp
 558 0490 08108DE2 		add	r1, sp, #8
 559 0494 053081E0 		add	r3, r1, r5
 560 0498 070088E0 		add	r0, r8, r7
 561 049c 0010A0E3 		mov	r1, #0
 562 04a0 DFFFFFEA 		b	.L41
 563              	.LVL59:
 564              	.L43:
 174:Side_dreh.c   ****             }
 175:Side_dreh.c   ****         }
 176:Side_dreh.c   ****     }else{
 177:Side_dreh.c   ****         for (i=0; i<3; i++) {
 178:Side_dreh.c   ****             for (j=0; j<3; j++) {
 179:Side_dreh.c   ****                 temp_color_data[0][3*i+j]=color_data[0][3*j+(2-i)];
 565              		.loc 1 179 0 discriminator 2
 566 04a4 0150D7E7 		ldrb	r5, [r7, r1]	@ zero_extendqisi2
 567 04a8 0050C3E5 		strb	r5, [r3]
 180:Side_dreh.c   ****                 temp_color_data[2][3*i+j]=color_data[2][3*(2-j)+i];
 568              		.loc 1 180 0 discriminator 2
 569 04ac 1850D0E5 		ldrb	r5, [r0, #24]	@ zero_extendqisi2
 570 04b0 1250C3E5 		strb	r5, [r3, #18]
 181:Side_dreh.c   ****                 temp_color_data[5][3*i+j]=color_data[1][3*(2-i)+(2-j)];
 571              		.loc 1 181 0 discriminator 2
 572 04b4 01507CE5 		ldrb	r5, [ip, #-1]!	@ zero_extendqisi2
 573 04b8 2D50C3E5 		strb	r5, [r3, #45]
 182:Side_dreh.c   ****                 temp_color_data[1][3*(2-i)+(2-j)]=color_data[4][3*i+j];
 574              		.loc 1 182 0 discriminator 2
 575 04bc 2450D2E5 		ldrb	r5, [r2, #36]	@ zero_extendqisi2
 576 04c0 01506EE5 		strb	r5, [lr, #-1]!
 183:Side_dreh.c   ****                 temp_color_data[4][3*i+j]=color_data[3][3*i+j];
 577              		.loc 1 183 0 discriminator 2
 578 04c4 1B50D2E5 		ldrb	r5, [r2, #27]	@ zero_extendqisi2
 579 04c8 2450C3E5 		strb	r5, [r3, #36]
 184:Side_dreh.c   ****                 temp_color_data[3][3*i+j]=color_data[5][3*i+j];
 580              		.loc 1 184 0 discriminator 2
 581 04cc 2D50D2E5 		ldrb	r5, [r2, #45]	@ zero_extendqisi2
 582 04d0 1B50C3E5 		strb	r5, [r3, #27]
 583              	.LVL60:
 584 04d4 031081E2 		add	r1, r1, #3
 585 04d8 013083E2 		add	r3, r3, #1
 586              	.LVL61:
 587 04dc 030040E2 		sub	r0, r0, #3
 588 04e0 012082E2 		add	r2, r2, #1
 178:Side_dreh.c   ****                 temp_color_data[0][3*i+j]=color_data[0][3*j+(2-i)];
 589              		.loc 1 178 0 discriminator 2
 590 04e4 090051E3 		cmp	r1, #9
 591 04e8 EDFFFF1A 		bne	.L43
 177:Side_dreh.c   ****             for (j=0; j<3; j++) {
 592              		.loc 1 177 0
 593 04ec 016086E2 		add	r6, r6, #1
 594              	.LVL62:
 595 04f0 034084E2 		add	r4, r4, #3
 596              	.LVL63:
 597 04f4 030056E3 		cmp	r6, #3
 598 04f8 1900000A 		beq	.L40
 599              	.LVL64:
 600              	.L38:
 601 04fc 0AE064E0 		rsb	lr, r4, r10
 157:Side_dreh.c   ****     }else{
 602              		.loc 1 157 0 discriminator 1
 603 0500 042088E0 		add	r2, r8, r4
 604 0504 0BC064E0 		rsb	ip, r4, fp
 605 0508 060088E0 		add	r0, r8, r6
 606 050c 08508DE2 		add	r5, sp, #8
 607 0510 043085E0 		add	r3, r5, r4
 608 0514 0910A0E1 		mov	r1, r9
 609 0518 04509DE5 		ldr	r5, [sp, #4]
 610 051c 057066E0 		rsb	r7, r6, r5
 611 0520 DFFFFFEA 		b	.L43
 612              	.LVL65:
 613              	.L46:
 185:Side_dreh.c   ****             }
 186:Side_dreh.c   ****         }
 187:Side_dreh.c   ****     }
 188:Side_dreh.c   ****     int a,b;
 189:Side_dreh.c   ****     for (a=0;a<6;a++)
 190:Side_dreh.c   ****     {
 191:Side_dreh.c   ****         for (b=0;b<9;b++)
 192:Side_dreh.c   ****         {
 193:Side_dreh.c   ****             color_data[a][b]=temp_color_data[a][b];
 614              		.loc 1 193 0 discriminator 2
 615 0524 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 616 0528 0320C0E7 		strb	r2, [r0, r3]
 191:Side_dreh.c   ****         {
 617              		.loc 1 191 0 discriminator 2
 618 052c 013083E2 		add	r3, r3, #1
 619              	.LVL66:
 620 0530 090053E3 		cmp	r3, #9
 621 0534 FAFFFF1A 		bne	.L46
 622              	.LVL67:
 623 0538 09C08CE2 		add	ip, ip, #9
 189:Side_dreh.c   ****     {
 624              		.loc 1 189 0
 625 053c 36005CE3 		cmp	ip, #54
 626 0540 0400000A 		beq	.L45
 627              	.LVL68:
 628              	.L47:
 159:Side_dreh.c   ****     }
 629              		.loc 1 159 0 discriminator 1
 630 0544 0430A0E1 		mov	r3, r4
 631 0548 0E008CE0 		add	r0, ip, lr
 632 054c 08208DE2 		add	r2, sp, #8
 633 0550 02108CE0 		add	r1, ip, r2
 634 0554 F2FFFFEA 		b	.L46
 635              	.LVL69:
 636              	.L45:
 194:Side_dreh.c   ****         }
 195:Side_dreh.c   ****     }
 196:Side_dreh.c   ****     wuerfel_print(1);/////////////
 637              		.loc 1 196 0
 638 0558 0100A0E3 		mov	r0, #1
 639 055c FEFFFFEB 		bl	wuerfel_print
 640              	.LVL70:
 641 0560 030000EA 		b	.L49
 642              	.L40:
 643              	.LVL71:
 159:Side_dreh.c   ****     }
 644              		.loc 1 159 0
 645 0564 00C0A0E3 		mov	ip, #0
 646 0568 0C40A0E1 		mov	r4, ip
 647 056c 08E09FE5 		ldr	lr, .L50
 648 0570 F3FFFFEA 		b	.L47
 649              	.LVL72:
 650              	.L49:
 197:Side_dreh.c   **** }
 651              		.loc 1 197 0
 652 0574 44D08DE2 		add	sp, sp, #68
 653              		@ sp needed
 654 0578 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 655              	.L51:
 656              		.align	2
 657              	.L50:
 658 057c 00000000 		.word	color_data
 659              		.cfi_endproc
 660              	.LFE13:
 661              		.fnend
 663              		.align	2
 664              		.global	us_dreh
 666              	us_dreh:
 667              		.fnstart
 668              	.LFB14:
 198:Side_dreh.c   **** 
 199:Side_dreh.c   **** void us_dreh(int dir,int dreh_Angel_u)                        //Oben_Schicht
 200:Side_dreh.c   **** {
 669              		.loc 1 200 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              	.LVL73:
 674 0580 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 675              		.save {r3, r4, r5, lr}
 676              		.cfi_def_cfa_offset 16
 677              		.cfi_offset 3, -16
 678              		.cfi_offset 4, -12
 679              		.cfi_offset 5, -8
 680              		.cfi_offset 14, -4
 681 0584 0050A0E1 		mov	r5, r0
 682 0588 0140A0E1 		mov	r4, r1
 201:Side_dreh.c   ****     klappen();
 683              		.loc 1 201 0
 684 058c FEFFFFEB 		bl	klappen
 685              	.LVL74:
 202:Side_dreh.c   **** #ifdef __linux__
 203:Side_dreh.c   ****     sleep(1);
 686              		.loc 1 203 0
 687 0590 0100A0E3 		mov	r0, #1
 688 0594 FEFFFFEB 		bl	sleep
 689              	.LVL75:
 204:Side_dreh.c   **** #endif
 205:Side_dreh.c   ****     klappen();
 690              		.loc 1 205 0
 691 0598 FEFFFFEB 		bl	klappen
 692              	.LVL76:
 206:Side_dreh.c   **** #ifdef __linux__
 207:Side_dreh.c   ****     sleep(1);
 693              		.loc 1 207 0
 694 059c 0100A0E3 		mov	r0, #1
 695 05a0 FEFFFFEB 		bl	sleep
 696              	.LVL77:
 208:Side_dreh.c   **** #endif
 209:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_u);
 697              		.loc 1 209 0
 698 05a4 0500A0E1 		mov	r0, r5
 699 05a8 0410A0E1 		mov	r1, r4
 700 05ac FEFFFFEB 		bl	drehen_unter
 701              	.LVL78:
 210:Side_dreh.c   ****     wuerfel_print(1);
 702              		.loc 1 210 0
 703 05b0 0100A0E3 		mov	r0, #1
 704 05b4 FEFFFFEB 		bl	wuerfel_print
 705              	.LVL79:
 706 05b8 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 707              		.cfi_endproc
 708              	.LFE14:
 709              		.fnend
 711              		.align	2
 712              		.global	ds_dreh
 714              	ds_dreh:
 715              		.fnstart
 716              	.LFB15:
 211:Side_dreh.c   **** }
 212:Side_dreh.c   **** 
 213:Side_dreh.c   **** void ds_dreh(int dir,int dreh_Angel_d)                        //Untern_Schicht
 214:Side_dreh.c   **** {
 717              		.loc 1 214 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721              	.LVL80:
 722 05bc 08402DE9 		stmfd	sp!, {r3, lr}
 723              		.save {r3, lr}
 724              		.cfi_def_cfa_offset 8
 725              		.cfi_offset 3, -8
 726              		.cfi_offset 14, -4
 215:Side_dreh.c   **** /*#ifdef __linux__
 216:Side_dreh.c   ****     arm_setpos(2);
 217:Side_dreh.c   ****     arm_setpos(3);
 218:Side_dreh.c   **** #endif*/
 219:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_d);
 727              		.loc 1 219 0
 728 05c0 FEFFFFEB 		bl	drehen_unter
 729              	.LVL81:
 220:Side_dreh.c   ****     wuerfel_print(1);
 730              		.loc 1 220 0
 731 05c4 0100A0E3 		mov	r0, #1
 732 05c8 FEFFFFEB 		bl	wuerfel_print
 733              	.LVL82:
 734 05cc 0880BDE8 		ldmfd	sp!, {r3, pc}
 735              		.cfi_endproc
 736              	.LFE15:
 737              		.fnend
 739              		.align	2
 740              		.global	fs_dreh
 742              	fs_dreh:
 743              		.fnstart
 744              	.LFB16:
 221:Side_dreh.c   ****     
 222:Side_dreh.c   **** }
 223:Side_dreh.c   **** 
 224:Side_dreh.c   **** void fs_dreh(int dir,int dreh_Angel_f)                         //Vornen_Schicht
 225:Side_dreh.c   **** {
 745              		.loc 1 225 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              	.LVL83:
 750 05d0 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 751              		.save {r3, r4, r5, lr}
 752              		.cfi_def_cfa_offset 16
 753              		.cfi_offset 3, -16
 754              		.cfi_offset 4, -12
 755              		.cfi_offset 5, -8
 756              		.cfi_offset 14, -4
 757 05d4 0050A0E1 		mov	r5, r0
 758 05d8 0140A0E1 		mov	r4, r1
 226:Side_dreh.c   **** #ifdef __linux__
 227:Side_dreh.c   ****     arm_setpos(4);
 759              		.loc 1 227 0
 760 05dc 0400A0E3 		mov	r0, #4
 761              	.LVL84:
 762 05e0 FEFFFFEB 		bl	arm_setpos
 763              	.LVL85:
 228:Side_dreh.c   ****     sleep(1);
 764              		.loc 1 228 0
 765 05e4 0100A0E3 		mov	r0, #1
 766 05e8 FEFFFFEB 		bl	sleep
 767              	.LVL86:
 229:Side_dreh.c   **** #endif
 230:Side_dreh.c   ****     drehen(1);
 768              		.loc 1 230 0
 769 05ec 0100A0E3 		mov	r0, #1
 770 05f0 FEFFFFEB 		bl	drehen
 771              	.LVL87:
 231:Side_dreh.c   **** #ifdef __linux__
 232:Side_dreh.c   ****     sleep(1);
 772              		.loc 1 232 0
 773 05f4 0100A0E3 		mov	r0, #1
 774 05f8 FEFFFFEB 		bl	sleep
 775              	.LVL88:
 233:Side_dreh.c   **** #endif
 234:Side_dreh.c   ****     klappen();
 776              		.loc 1 234 0
 777 05fc FEFFFFEB 		bl	klappen
 778              	.LVL89:
 235:Side_dreh.c   **** #ifdef __linux__
 236:Side_dreh.c   ****     sleep(1);
 779              		.loc 1 236 0
 780 0600 0100A0E3 		mov	r0, #1
 781 0604 FEFFFFEB 		bl	sleep
 782              	.LVL90:
 237:Side_dreh.c   **** #endif
 238:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_f);
 783              		.loc 1 238 0
 784 0608 0500A0E1 		mov	r0, r5
 785 060c 0410A0E1 		mov	r1, r4
 786 0610 FEFFFFEB 		bl	drehen_unter
 787              	.LVL91:
 239:Side_dreh.c   ****     wuerfel_print(1);
 788              		.loc 1 239 0
 789 0614 0100A0E3 		mov	r0, #1
 790 0618 FEFFFFEB 		bl	wuerfel_print
 791              	.LVL92:
 792 061c 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 793              		.cfi_endproc
 794              	.LFE16:
 795              		.fnend
 797              		.align	2
 798              		.global	bs_dreh
 800              	bs_dreh:
 801              		.fnstart
 802              	.LFB17:
 240:Side_dreh.c   **** }
 241:Side_dreh.c   **** 
 242:Side_dreh.c   **** void bs_dreh(int dir,int dreh_Angel_b)                         //Hintern_Schicht
 243:Side_dreh.c   **** {
 803              		.loc 1 243 0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 0
 806              		@ frame_needed = 0, uses_anonymous_args = 0
 807              	.LVL93:
 808 0620 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 809              		.save {r3, r4, r5, lr}
 810              		.cfi_def_cfa_offset 16
 811              		.cfi_offset 3, -16
 812              		.cfi_offset 4, -12
 813              		.cfi_offset 5, -8
 814              		.cfi_offset 14, -4
 815 0624 0050A0E1 		mov	r5, r0
 816 0628 0140A0E1 		mov	r4, r1
 244:Side_dreh.c   **** #ifdef __linux__
 245:Side_dreh.c   ****     arm_setpos(4);
 817              		.loc 1 245 0
 818 062c 0400A0E3 		mov	r0, #4
 819              	.LVL94:
 820 0630 FEFFFFEB 		bl	arm_setpos
 821              	.LVL95:
 246:Side_dreh.c   ****     sleep(1);
 822              		.loc 1 246 0
 823 0634 0100A0E3 		mov	r0, #1
 824 0638 FEFFFFEB 		bl	sleep
 825              	.LVL96:
 247:Side_dreh.c   **** #endif
 248:Side_dreh.c   ****     drehen(-1);
 826              		.loc 1 248 0
 827 063c 0000E0E3 		mvn	r0, #0
 828 0640 FEFFFFEB 		bl	drehen
 829              	.LVL97:
 249:Side_dreh.c   **** #ifdef __linux__
 250:Side_dreh.c   ****     sleep(1);
 830              		.loc 1 250 0
 831 0644 0100A0E3 		mov	r0, #1
 832 0648 FEFFFFEB 		bl	sleep
 833              	.LVL98:
 251:Side_dreh.c   **** #endif
 252:Side_dreh.c   ****     klappen();
 834              		.loc 1 252 0
 835 064c FEFFFFEB 		bl	klappen
 836              	.LVL99:
 253:Side_dreh.c   **** #ifdef __linux__
 254:Side_dreh.c   ****     sleep(1);
 837              		.loc 1 254 0
 838 0650 0100A0E3 		mov	r0, #1
 839 0654 FEFFFFEB 		bl	sleep
 840              	.LVL100:
 255:Side_dreh.c   **** #endif
 256:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_b);
 841              		.loc 1 256 0
 842 0658 0500A0E1 		mov	r0, r5
 843 065c 0410A0E1 		mov	r1, r4
 844 0660 FEFFFFEB 		bl	drehen_unter
 845              	.LVL101:
 257:Side_dreh.c   ****     wuerfel_print(1);
 846              		.loc 1 257 0
 847 0664 0100A0E3 		mov	r0, #1
 848 0668 FEFFFFEB 		bl	wuerfel_print
 849              	.LVL102:
 850 066c 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 851              		.cfi_endproc
 852              	.LFE17:
 853              		.fnend
 855              		.align	2
 856              		.global	ls_dreh
 858              	ls_dreh:
 859              		.fnstart
 860              	.LFB18:
 258:Side_dreh.c   ****     
 259:Side_dreh.c   **** }
 260:Side_dreh.c   **** 
 261:Side_dreh.c   **** void ls_dreh(int dir,int dreh_Angel_l)                         //linken_Schicht
 262:Side_dreh.c   **** {
 861              		.loc 1 262 0
 862              		.cfi_startproc
 863              		@ args = 0, pretend = 0, frame = 0
 864              		@ frame_needed = 0, uses_anonymous_args = 0
 865              	.LVL103:
 866 0670 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 867              		.save {r3, r4, r5, lr}
 868              		.cfi_def_cfa_offset 16
 869              		.cfi_offset 3, -16
 870              		.cfi_offset 4, -12
 871              		.cfi_offset 5, -8
 872              		.cfi_offset 14, -4
 873 0674 0050A0E1 		mov	r5, r0
 874 0678 0140A0E1 		mov	r4, r1
 263:Side_dreh.c   ****     klappen();
 875              		.loc 1 263 0
 876 067c FEFFFFEB 		bl	klappen
 877              	.LVL104:
 264:Side_dreh.c   **** #ifdef __linux__
 265:Side_dreh.c   ****     sleep(1);
 878              		.loc 1 265 0
 879 0680 0100A0E3 		mov	r0, #1
 880 0684 FEFFFFEB 		bl	sleep
 881              	.LVL105:
 266:Side_dreh.c   **** #endif
 267:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_l);
 882              		.loc 1 267 0
 883 0688 0500A0E1 		mov	r0, r5
 884 068c 0410A0E1 		mov	r1, r4
 885 0690 FEFFFFEB 		bl	drehen_unter
 886              	.LVL106:
 268:Side_dreh.c   ****     wuerfel_print(1);
 887              		.loc 1 268 0
 888 0694 0100A0E3 		mov	r0, #1
 889 0698 FEFFFFEB 		bl	wuerfel_print
 890              	.LVL107:
 891 069c 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 892              		.cfi_endproc
 893              	.LFE18:
 894              		.fnend
 896              		.align	2
 897              		.global	rs_dreh
 899              	rs_dreh:
 900              		.fnstart
 901              	.LFB19:
 269:Side_dreh.c   ****     
 270:Side_dreh.c   **** }
 271:Side_dreh.c   **** 
 272:Side_dreh.c   **** void rs_dreh(int dir,int dreh_Angel_r)                          //rechten_Schicht
 273:Side_dreh.c   **** {
 902              		.loc 1 273 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              	.LVL108:
 907 06a0 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 908              		.save {r3, r4, r5, lr}
 909              		.cfi_def_cfa_offset 16
 910              		.cfi_offset 3, -16
 911              		.cfi_offset 4, -12
 912              		.cfi_offset 5, -8
 913              		.cfi_offset 14, -4
 914 06a4 0050A0E1 		mov	r5, r0
 915 06a8 0140A0E1 		mov	r4, r1
 274:Side_dreh.c   ****     
 275:Side_dreh.c   ****     
 276:Side_dreh.c   ****     klappen();
 916              		.loc 1 276 0
 917 06ac FEFFFFEB 		bl	klappen
 918              	.LVL109:
 277:Side_dreh.c   **** #ifdef __linux__
 278:Side_dreh.c   ****     sleep(1);
 919              		.loc 1 278 0
 920 06b0 0100A0E3 		mov	r0, #1
 921 06b4 FEFFFFEB 		bl	sleep
 922              	.LVL110:
 279:Side_dreh.c   **** #endif
 280:Side_dreh.c   ****     klappen();
 923              		.loc 1 280 0
 924 06b8 FEFFFFEB 		bl	klappen
 925              	.LVL111:
 281:Side_dreh.c   **** #ifdef __linux__
 282:Side_dreh.c   ****     sleep(1);
 926              		.loc 1 282 0
 927 06bc 0100A0E3 		mov	r0, #1
 928 06c0 FEFFFFEB 		bl	sleep
 929              	.LVL112:
 283:Side_dreh.c   **** #endif
 284:Side_dreh.c   ****     klappen();
 930              		.loc 1 284 0
 931 06c4 FEFFFFEB 		bl	klappen
 932              	.LVL113:
 285:Side_dreh.c   **** #ifdef __linux__
 286:Side_dreh.c   ****     sleep(1);
 933              		.loc 1 286 0
 934 06c8 0100A0E3 		mov	r0, #1
 935 06cc FEFFFFEB 		bl	sleep
 936              	.LVL114:
 287:Side_dreh.c   **** #endif
 288:Side_dreh.c   ****     drehen_unter(dir, dreh_Angel_r);
 937              		.loc 1 288 0
 938 06d0 0500A0E1 		mov	r0, r5
 939 06d4 0410A0E1 		mov	r1, r4
 940 06d8 FEFFFFEB 		bl	drehen_unter
 941              	.LVL115:
 289:Side_dreh.c   ****     wuerfel_print(1);
 942              		.loc 1 289 0
 943 06dc 0100A0E3 		mov	r0, #1
 944 06e0 FEFFFFEB 		bl	wuerfel_print
 945              	.LVL116:
 946 06e4 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
 947              		.cfi_endproc
 948              	.LFE19:
 949              		.fnend
 951              		.align	2
 952              		.global	change_topface
 954              	change_topface:
 955              		.fnstart
 956              	.LFB20:
 290:Side_dreh.c   **** }
 291:Side_dreh.c   **** 
 292:Side_dreh.c   **** int change_topface(int center_color)
 293:Side_dreh.c   **** {   int i;
 957              		.loc 1 293 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961              	.LVL117:
 962 06e8 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 963              		.save {r4, r5, r6, r7, r8, lr}
 964              		.cfi_def_cfa_offset 24
 965              		.cfi_offset 4, -24
 966              		.cfi_offset 5, -20
 967              		.cfi_offset 6, -16
 968              		.cfi_offset 7, -12
 969              		.cfi_offset 8, -8
 970              		.cfi_offset 14, -4
 971 06ec 0060A0E1 		mov	r6, r0
 972              	.LVL118:
 973 06f0 98509FE5 		ldr	r5, .L70
 974              		.loc 1 293 0
 975 06f4 0140A0E3 		mov	r4, #1
 294:Side_dreh.c   ****     for (i=0; i<=5; i++) {
 295:Side_dreh.c   ****         if (color_data[i][4]==center_color)
 296:Side_dreh.c   ****         {
 297:Side_dreh.c   ****             switch (i) {
 298:Side_dreh.c   ****                 case 0://ober Seite
 299:Side_dreh.c   ****                     break;
 300:Side_dreh.c   ****                 case 1://vorne Seite
 301:Side_dreh.c   ****                     drehen(-1);
 302:Side_dreh.c   ****                     klappen();
 303:Side_dreh.c   ****                     break;
 304:Side_dreh.c   ****                 case 2://untere Seite
 305:Side_dreh.c   ****                     klappen();
 306:Side_dreh.c   ****                     klappen();
 307:Side_dreh.c   ****                     break;
 308:Side_dreh.c   ****                 case 3://hintere Seite
 309:Side_dreh.c   ****                     drehen(1);
 976              		.loc 1 309 0
 977 06f8 0480A0E1 		mov	r8, r4
 301:Side_dreh.c   ****                     klappen();
 978              		.loc 1 301 0
 979 06fc 0070E0E3 		mvn	r7, #0
 980 0700 010000EA 		b	.L59
 981              	.LVL119:
 982              	.L69:
 983 0704 095085E2 		add	r5, r5, #9
 984 0708 014084E2 		add	r4, r4, #1
 985              	.L59:
 986              	.LVL120:
 295:Side_dreh.c   ****         {
 987              		.loc 1 295 0
 988 070c 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 989 0710 060053E1 		cmp	r3, r6
 990 0714 1900001A 		bne	.L60
 297:Side_dreh.c   ****                 case 0://ober Seite
 991              		.loc 1 297 0
 992 0718 022044E2 		sub	r2, r4, #2
 993 071c 040052E3 		cmp	r2, #4
 994 0720 02F19F97 		ldrls	pc, [pc, r2, asl #2]
 995 0724 150000EA 		b	.L60
 996              	.L62:
 997 0728 3C070000 		.word	.L61
 998 072c 4C070000 		.word	.L63
 999 0730 58070000 		.word	.L64
 1000 0734 68070000 		.word	.L65
 1001 0738 78070000 		.word	.L66
 1002              	.L61:
 301:Side_dreh.c   ****                     klappen();
 1003              		.loc 1 301 0
 1004 073c 0700A0E1 		mov	r0, r7
 1005 0740 FEFFFFEB 		bl	drehen
 1006              	.LVL121:
 302:Side_dreh.c   ****                     break;
 1007              		.loc 1 302 0
 1008 0744 FEFFFFEB 		bl	klappen
 1009              	.LVL122:
 303:Side_dreh.c   ****                 case 2://untere Seite
 1010              		.loc 1 303 0
 1011 0748 EDFFFFEA 		b	.L69
 1012              	.L63:
 305:Side_dreh.c   ****                     klappen();
 1013              		.loc 1 305 0
 1014 074c FEFFFFEB 		bl	klappen
 1015              	.LVL123:
 306:Side_dreh.c   ****                     break;
 1016              		.loc 1 306 0
 1017 0750 FEFFFFEB 		bl	klappen
 1018              	.LVL124:
 307:Side_dreh.c   ****                 case 3://hintere Seite
 1019              		.loc 1 307 0
 1020 0754 EAFFFFEA 		b	.L69
 1021              	.L64:
 1022              		.loc 1 309 0
 1023 0758 0800A0E1 		mov	r0, r8
 1024 075c FEFFFFEB 		bl	drehen
 1025              	.LVL125:
 310:Side_dreh.c   ****                     klappen();
 1026              		.loc 1 310 0
 1027 0760 FEFFFFEB 		bl	klappen
 1028              	.LVL126:
 311:Side_dreh.c   ****                     break;
 1029              		.loc 1 311 0
 1030 0764 E6FFFFEA 		b	.L69
 1031              	.L65:
 312:Side_dreh.c   ****                 case 4://linke Seite
 313:Side_dreh.c   ****                     klappen();
 1032              		.loc 1 313 0
 1033 0768 FEFFFFEB 		bl	klappen
 1034              	.LVL127:
 314:Side_dreh.c   ****                     klappen();
 1035              		.loc 1 314 0
 1036 076c FEFFFFEB 		bl	klappen
 1037              	.LVL128:
 315:Side_dreh.c   ****                     klappen();
 1038              		.loc 1 315 0
 1039 0770 FEFFFFEB 		bl	klappen
 1040              	.LVL129:
 316:Side_dreh.c   ****                     break;
 1041              		.loc 1 316 0
 1042 0774 E2FFFFEA 		b	.L69
 1043              	.L66:
 317:Side_dreh.c   ****                 case 5://rechte Seite
 318:Side_dreh.c   ****                     klappen();
 1044              		.loc 1 318 0
 1045 0778 FEFFFFEB 		bl	klappen
 1046              	.LVL130:
 1047 077c 010000EA 		b	.L68
 1048              	.LVL131:
 1049              	.L60:
 294:Side_dreh.c   ****         if (color_data[i][4]==center_color)
 1050              		.loc 1 294 0
 1051 0780 050054E3 		cmp	r4, #5
 1052 0784 DEFFFFDA 		ble	.L69
 1053              	.LVL132:
 1054              	.L68:
 319:Side_dreh.c   ****                     break;
 320:Side_dreh.c   ****                     
 321:Side_dreh.c   ****                 default:
 322:Side_dreh.c   ****                     break;
 323:Side_dreh.c   ****             }
 324:Side_dreh.c   ****         }
 325:Side_dreh.c   ****     }
 326:Side_dreh.c   ****     return 0;
 327:Side_dreh.c   **** }
 1055              		.loc 1 327 0
 1056 0788 0000A0E3 		mov	r0, #0
 1057 078c F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 1058              	.L71:
 1059              		.align	2
 1060              	.L70:
 1061 0790 00000000 		.word	color_data
 1062              		.cfi_endproc
 1063              	.LFE20:
 1064              		.fnend
 1066              		.align	2
 1067              		.global	change_rightface
 1069              	change_rightface:
 1070              		.fnstart
 1071              	.LFB21:
 328:Side_dreh.c   **** 
 329:Side_dreh.c   **** int change_rightface(int rightface)
 330:Side_dreh.c   **** {
 1072              		.loc 1 330 0
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 0
 1075              		@ frame_needed = 0, uses_anonymous_args = 0
 1076              	.LVL133:
 1077 0794 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1078              		.save {r4, r5, r6, r7, r8, lr}
 1079              		.cfi_def_cfa_offset 24
 1080              		.cfi_offset 4, -24
 1081              		.cfi_offset 5, -20
 1082              		.cfi_offset 6, -16
 1083              		.cfi_offset 7, -12
 1084              		.cfi_offset 8, -8
 1085              		.cfi_offset 14, -4
 1086 0798 0060A0E1 		mov	r6, r0
 1087              	.LVL134:
 1088 079c 78509FE5 		ldr	r5, .L80
 1089              		.loc 1 330 0
 1090 07a0 0140A0E3 		mov	r4, #1
 331:Side_dreh.c   ****     int i;
 332:Side_dreh.c   ****     for (i=0; i<=5; i++) {
 333:Side_dreh.c   ****         if (color_data[i][4]==rightface) {
 334:Side_dreh.c   ****             switch (i) {
 335:Side_dreh.c   ****                 case 1://vorne Seite
 336:Side_dreh.c   ****                     drehen(-1);
 337:Side_dreh.c   ****                     break;
 338:Side_dreh.c   ****                 case 3://hintere Seite
 339:Side_dreh.c   ****                     drehen(1);
 1091              		.loc 1 339 0
 1092 07a4 0470A0E1 		mov	r7, r4
 336:Side_dreh.c   ****                     break;
 1093              		.loc 1 336 0
 1094 07a8 0080E0E3 		mvn	r8, #0
 1095 07ac 010000EA 		b	.L73
 1096              	.LVL135:
 1097              	.L79:
 1098 07b0 095085E2 		add	r5, r5, #9
 1099 07b4 014084E2 		add	r4, r4, #1
 1100              	.L73:
 1101 07b8 012044E2 		sub	r2, r4, #1
 1102              	.LVL136:
 333:Side_dreh.c   ****             switch (i) {
 1103              		.loc 1 333 0
 1104 07bc 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1105 07c0 060053E1 		cmp	r3, r6
 1106 07c4 1000001A 		bne	.L74
 334:Side_dreh.c   ****                 case 1://vorne Seite
 1107              		.loc 1 334 0
 1108 07c8 030052E3 		cmp	r2, #3
 1109 07cc 0600000A 		beq	.L75
 1110 07d0 040052E3 		cmp	r2, #4
 1111 07d4 0700000A 		beq	.L76
 1112 07d8 010052E3 		cmp	r2, #1
 1113 07dc 0A00001A 		bne	.L74
 336:Side_dreh.c   ****                     break;
 1114              		.loc 1 336 0
 1115 07e0 0800A0E1 		mov	r0, r8
 1116 07e4 FEFFFFEB 		bl	drehen
 1117              	.LVL137:
 337:Side_dreh.c   ****                 case 3://hintere Seite
 1118              		.loc 1 337 0
 1119 07e8 F0FFFFEA 		b	.L79
 1120              	.LVL138:
 1121              	.L75:
 1122              		.loc 1 339 0
 1123 07ec 0700A0E1 		mov	r0, r7
 1124 07f0 FEFFFFEB 		bl	drehen
 1125              	.LVL139:
 340:Side_dreh.c   ****                     break;
 1126              		.loc 1 340 0
 1127 07f4 EDFFFFEA 		b	.L79
 1128              	.LVL140:
 1129              	.L76:
 341:Side_dreh.c   ****                 case 4://linke Seite
 342:Side_dreh.c   ****                     drehen(1);
 1130              		.loc 1 342 0
 1131 07f8 0700A0E1 		mov	r0, r7
 1132 07fc FEFFFFEB 		bl	drehen
 1133              	.LVL141:
 343:Side_dreh.c   ****                     drehen(1);
 1134              		.loc 1 343 0
 1135 0800 0700A0E1 		mov	r0, r7
 1136 0804 FEFFFFEB 		bl	drehen
 1137              	.LVL142:
 344:Side_dreh.c   ****                     break;
 1138              		.loc 1 344 0
 1139 0808 E8FFFFEA 		b	.L79
 1140              	.LVL143:
 1141              	.L74:
 332:Side_dreh.c   ****         if (color_data[i][4]==rightface) {
 1142              		.loc 1 332 0
 1143 080c 050054E3 		cmp	r4, #5
 1144 0810 E6FFFFDA 		ble	.L79
 345:Side_dreh.c   ****                 default:
 346:Side_dreh.c   ****                     break;
 347:Side_dreh.c   ****             }
 348:Side_dreh.c   ****         }
 349:Side_dreh.c   ****     }
 350:Side_dreh.c   ****     return 0;
 351:Side_dreh.c   **** }
 1145              		.loc 1 351 0
 1146 0814 0000A0E3 		mov	r0, #0
 1147 0818 F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 1148              	.L81:
 1149              		.align	2
 1150              	.L80:
 1151 081c 00000000 		.word	color_data
 1152              		.cfi_endproc
 1153              	.LFE21:
 1154              		.fnend
 1156              		.global	Surface
 1157              		.data
 1158              		.align	2
 1161              	Surface:
 1162 0000 FFFFFFFF 		.word	-1
 1163              		.text
 1164              	.Letext0:
 1165              		.file 2 "/usr/local/carlson-minot/crosscompilers/lib/gcc/arm-none-linux-gnueabi/4.8.3/include/stdd
 1166              		.file 3 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 1167              		.file 4 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 1168              		.file 5 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 1169              		.file 6 "main.h"
 1170              		.file 7 "Arm_motor.h"
 1171              		.file 8 "Dreh_motor.h"
 1172              		.file 9 "print_mode.h"
 1173              		.file 10 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Side_dreh.c
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:16     .text:0000000000000000 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:19     .text:0000000000000000 klappen
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:158    .text:0000000000000128 $d
                       .ARM.exidx:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:164    .text:0000000000000130 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:167    .text:0000000000000130 drehen_unter
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:445    .text:00000000000003a8 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:453    .text:00000000000003b8 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:456    .text:00000000000003b8 drehen
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:658    .text:000000000000057c $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:663    .text:0000000000000580 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:666    .text:0000000000000580 us_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:714    .text:00000000000005bc ds_dreh
                       .ARM.extab:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:742    .text:00000000000005d0 fs_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:800    .text:0000000000000620 bs_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:858    .text:0000000000000670 ls_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:899    .text:00000000000006a0 rs_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:954    .text:00000000000006e8 change_topface
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:997    .text:0000000000000728 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:1004   .text:000000000000073c $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:1061   .text:0000000000000790 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:1066   .text:0000000000000794 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:1069   .text:0000000000000794 change_rightface
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:1151   .text:000000000000081c $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:1161   .data:0000000000000000 Surface
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbDObnr.s:1158   .data:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
arm_setpos
wuerfel_print
color_data
__aeabi_unwind_cpp_pr0
DrehTel_setpos
sleep
__aeabi_unwind_cpp_pr1
