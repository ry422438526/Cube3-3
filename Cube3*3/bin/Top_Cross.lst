   1              		.arch armv5te
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"Top_Cross.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	Top_Cross
  19              	Top_Cross:
  20              		.fnstart
  21              	.LFB11:
  22              		.file 1 "Top_Cross.c"
   1:Top_Cross.c   **** //
   2:Top_Cross.c   **** //  Top_Cross.c
   3:Top_Cross.c   **** //  Cube3*3
   4:Top_Cross.c   **** //
   5:Top_Cross.c   **** //  Created by 杨春霞 on 12.11.15.
   6:Top_Cross.c   **** //  Copyright © 2015 Chunxia Yang. All rights reserved.
   7:Top_Cross.c   **** //
   8:Top_Cross.c   **** 
   9:Top_Cross.c   **** #include <stdio.h>
  10:Top_Cross.c   **** #include "Top_Cross.h"
  11:Top_Cross.c   **** #include "Side_dreh.h"
  12:Top_Cross.c   **** #include "Color_search.h"
  13:Top_Cross.c   **** #include "print_mode.h"
  14:Top_Cross.c   **** 
  15:Top_Cross.c   **** int Top_Cross()
  16:Top_Cross.c   **** {
  23              		.loc 1 16 0
  24              		.cfi_startproc
  25              		@ args = 0, pretend = 0, frame = 16
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  28              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  29              		.cfi_def_cfa_offset 36
  30              		.cfi_offset 4, -36
  31              		.cfi_offset 5, -32
  32              		.cfi_offset 6, -28
  33              		.cfi_offset 7, -24
  34              		.cfi_offset 8, -20
  35              		.cfi_offset 9, -16
  36              		.cfi_offset 10, -12
  37              		.cfi_offset 11, -8
  38              		.cfi_offset 14, -4
  39              		.pad #20
  40 0004 14D04DE2 		sub	sp, sp, #20
  41              		.cfi_def_cfa_offset 56
  42              	.LVL0:
  17:Top_Cross.c   ****     
  18:Top_Cross.c   ****     int Getpos_k=0;
  19:Top_Cross.c   ****     int color_kanten[4]={1,4,3,5};
  43              		.loc 1 19 0
  44 0008 64379FE5 		ldr	r3, .L54
  45 000c 0F0093E8 		ldmia	r3, {r0, r1, r2, r3}
  46 0010 10C08DE2 		add	ip, sp, #16
  47 0014 0F000CE9 		stmdb	ip, {r0, r1, r2, r3}
  48              	.LVL1:
  49 0018 04804DE2 		sub	r8, sp, #4
  50 001c 0150A0E3 		mov	r5, #1
  51 0020 0060A0E3 		mov	r6, #0
  20:Top_Cross.c   ****     int i;
  21:Top_Cross.c   ****     
  22:Top_Cross.c   ****     for(i=0;i<=3;i++)
  23:Top_Cross.c   ****     {
  24:Top_Cross.c   ****         change_topface(0);
  52              		.loc 1 24 0
  53 0024 0670A0E1 		mov	r7, r6
  25:Top_Cross.c   ****         change_rightface(color_kanten[i]);
  26:Top_Cross.c   ****         Getpos_k=Kantenstein_suchen(0, color_kanten[i]);
  27:Top_Cross.c   ****         switch (Getpos_k) {
  28:Top_Cross.c   ****             case 103:
  29:Top_Cross.c   ****                 us_dreh(1, 90);
  30:Top_Cross.c   ****                 break;
  31:Top_Cross.c   ****             case 130:
  32:Top_Cross.c   ****                 bs_dreh(-1, 90);
  33:Top_Cross.c   ****                 bs_dreh(-1, 90);
  34:Top_Cross.c   ****                 break;
  35:Top_Cross.c   ****             case 104:
  36:Top_Cross.c   ****                 if (i==0)
  37:Top_Cross.c   ****                 {
  38:Top_Cross.c   ****                     us_dreh(1, 180);
  39:Top_Cross.c   ****                 }else{
  40:Top_Cross.c   ****                     ls_dreh(1, 180);
  41:Top_Cross.c   ****                     rs_dreh(1, 180);
  42:Top_Cross.c   ****                     rs_dreh(1, 180);
  43:Top_Cross.c   ****                 }
  44:Top_Cross.c   ****                 break;
  45:Top_Cross.c   ****             case 140:
  46:Top_Cross.c   ****                 ls_dreh(1, 90);
  47:Top_Cross.c   ****                 fs_dreh(-1, 90);
  48:Top_Cross.c   ****                 fs_dreh(1, 90);
  49:Top_Cross.c   ****                 bs_dreh(1, 180);
  50:Top_Cross.c   ****                 
  51:Top_Cross.c   ****                 break;
  52:Top_Cross.c   ****             case 105:
  53:Top_Cross.c   ****                 break;
  54:Top_Cross.c   ****             case 150:
  55:Top_Cross.c   ****                 
  56:Top_Cross.c   ****                 if (i==0) {
  57:Top_Cross.c   ****                     rs_dreh(-1, 90);
  58:Top_Cross.c   ****                     fs_dreh(-1, 90);
  59:Top_Cross.c   ****                     fs_dreh(-1, 90);
  60:Top_Cross.c   ****                 }else{
  61:Top_Cross.c   ****                     rs_dreh(-1, 180);
  62:Top_Cross.c   ****                     ls_dreh(-1, 90);
  63:Top_Cross.c   ****                     fs_dreh(-1, 90);
  64:Top_Cross.c   ****                     fs_dreh(1, 90);
  65:Top_Cross.c   ****                     rs_dreh(1, 90);
  66:Top_Cross.c   ****                 }
  67:Top_Cross.c   ****                 break;
  68:Top_Cross.c   ****             case 101:
  69:Top_Cross.c   ****                 if (i==0)
  70:Top_Cross.c   ****                 {
  71:Top_Cross.c   ****                     us_dreh(-1, 90);
  72:Top_Cross.c   ****                 }else{
  73:Top_Cross.c   ****                     fs_dreh(1, 180);
  74:Top_Cross.c   ****                     rs_dreh(1, 90);
  75:Top_Cross.c   ****                     fs_dreh(1, 180);
  76:Top_Cross.c   ****                 }
  77:Top_Cross.c   ****                 
  78:Top_Cross.c   ****                 break;
  79:Top_Cross.c   ****             case 110:
  80:Top_Cross.c   ****                 fs_dreh(1, 90);
  81:Top_Cross.c   ****                 fs_dreh(1, 90);
  82:Top_Cross.c   ****                 
  83:Top_Cross.c   ****                 break;
  84:Top_Cross.c   ****             case 241:
  85:Top_Cross.c   ****                 if (i==0) {
  86:Top_Cross.c   ****                     fs_dreh(1, 90);
  87:Top_Cross.c   ****                     ls_dreh(-1,90);
  88:Top_Cross.c   ****                 }else{
  89:Top_Cross.c   ****                     fs_dreh(-1, 90);
  90:Top_Cross.c   ****                     rs_dreh(1, 90);
  91:Top_Cross.c   ****                     ls_dreh(1, 90);
  92:Top_Cross.c   ****                     fs_dreh(1, 180);
  93:Top_Cross.c   ****                 }
  94:Top_Cross.c   ****                 break;
  95:Top_Cross.c   ****             case 214:
  96:Top_Cross.c   ****                 if (i<2) {
  97:Top_Cross.c   ****                     fs_dreh(1, 180);
  98:Top_Cross.c   ****                     fs_dreh(1, 90);
  99:Top_Cross.c   ****                 }else{
 100:Top_Cross.c   ****                     fs_dreh(1, 180);
 101:Top_Cross.c   ****                     fs_dreh(1, 90);
 102:Top_Cross.c   ****                     rs_dreh(1, 180);
 103:Top_Cross.c   ****                 }
 104:Top_Cross.c   ****                 break;
 105:Top_Cross.c   ****             case 215:      //pruefen
 106:Top_Cross.c   ****                 rs_dreh(1, 90);
 107:Top_Cross.c   ****                 break;
 108:Top_Cross.c   ****             case 251:
 109:Top_Cross.c   ****                 if (i==0) {
 110:Top_Cross.c   ****                     fs_dreh(1, 90);
 111:Top_Cross.c   ****                     rs_dreh(1, 90);
 112:Top_Cross.c   ****                     fs_dreh(1, 180);
 113:Top_Cross.c   ****                 }else{
 114:Top_Cross.c   ****                     fs_dreh(1, 90);
 115:Top_Cross.c   ****                     rs_dreh(1, 90);
 116:Top_Cross.c   ****                     ls_dreh(-1, 90);
 117:Top_Cross.c   ****                     fs_dreh(1, 180);
 118:Top_Cross.c   ****                 }
 119:Top_Cross.c   ****                 
 120:Top_Cross.c   ****                 break;
 121:Top_Cross.c   ****             case 253:      //pruefen
 122:Top_Cross.c   ****                 if (i<2) {
 123:Top_Cross.c   ****                     rs_dreh(1, 180);
 124:Top_Cross.c   ****                     fs_dreh(1, 90);
 125:Top_Cross.c   ****                     bs_dreh(1, 90);
 126:Top_Cross.c   ****                     bs_dreh(1, 180);
 127:Top_Cross.c   ****                 }else{
 128:Top_Cross.c   ****                     rs_dreh(1, 180);
 129:Top_Cross.c   ****                     fs_dreh(1, 90);
 130:Top_Cross.c   ****                     bs_dreh(1, 90);
 131:Top_Cross.c   ****                     rs_dreh(-1, 90);
 132:Top_Cross.c   ****                     bs_dreh(1, 180);
 133:Top_Cross.c   ****                 }
 134:Top_Cross.c   ****                 break;
 135:Top_Cross.c   ****             case 235:     //pruefen
 136:Top_Cross.c   ****                 rs_dreh(-1, 90);
 137:Top_Cross.c   ****                 break;
 138:Top_Cross.c   ****             case 234:     //pruefen
 139:Top_Cross.c   ****                 if (i==0) {
 140:Top_Cross.c   ****                     bs_dreh(-1, 180);
 141:Top_Cross.c   ****                     bs_dreh(-1, 90);
 142:Top_Cross.c   ****                 }else{
 143:Top_Cross.c   ****                     bs_dreh(-1, 180);
 144:Top_Cross.c   ****                     bs_dreh(-1, 90);
 145:Top_Cross.c   ****                     rs_dreh(1, 180);
 146:Top_Cross.c   ****                 }
 147:Top_Cross.c   ****                 break;
 148:Top_Cross.c   ****             case 243:     //pruefen
 149:Top_Cross.c   ****                 if (i==0) {
 150:Top_Cross.c   ****                     bs_dreh(1, 90);
 151:Top_Cross.c   ****                     rs_dreh(-1, 90);
 152:Top_Cross.c   ****                     bs_dreh(-1, 180);
 153:Top_Cross.c   ****                 }else{
 154:Top_Cross.c   ****                     bs_dreh(1, 90);
 155:Top_Cross.c   ****                     rs_dreh(-1, 90);
 156:Top_Cross.c   ****                     bs_dreh(-1, 180);
 157:Top_Cross.c   ****                     fs_dreh(-1, 90);
 158:Top_Cross.c   ****                 }
 159:Top_Cross.c   ****                 break;
 160:Top_Cross.c   ****             case 312:     //pruefen
 161:Top_Cross.c   ****                 if (i==0) {
 162:Top_Cross.c   ****                     fs_dreh(-1, 90);
 163:Top_Cross.c   ****                     fs_dreh(1, 90);
 164:Top_Cross.c   ****                 }else{
 165:Top_Cross.c   ****                     fs_dreh(-1, 90);
 166:Top_Cross.c   ****                     fs_dreh(1, 90);
 167:Top_Cross.c   ****                     rs_dreh(1, 90);
 168:Top_Cross.c   ****                 }
 169:Top_Cross.c   ****                 
 170:Top_Cross.c   ****                 break;
 171:Top_Cross.c   ****             case 321:      //pruefen
 172:Top_Cross.c   ****                 ds_dreh(1, 90);
 173:Top_Cross.c   ****                 rs_dreh(1, 180);
 174:Top_Cross.c   ****                 
 175:Top_Cross.c   ****                 break;
 176:Top_Cross.c   ****             case 352:      //pruefen
 177:Top_Cross.c   ****                 if (i<2) {
 178:Top_Cross.c   ****                     ds_dreh(-1, 90);
 179:Top_Cross.c   ****                     fs_dreh(-1, 90);
 180:Top_Cross.c   ****                     fs_dreh(1, 90);
 181:Top_Cross.c   ****                 }else{
 182:Top_Cross.c   ****                     ds_dreh(-1, 90);
 183:Top_Cross.c   ****                     fs_dreh(-1, 90);
 184:Top_Cross.c   ****                     fs_dreh(1, 90);
 185:Top_Cross.c   ****                     rs_dreh(1, 90);
 186:Top_Cross.c   ****                 }
 187:Top_Cross.c   ****                 break;
 188:Top_Cross.c   ****             case 325:        //pruefen
 189:Top_Cross.c   ****                 rs_dreh(1, 180);
 190:Top_Cross.c   ****                 break;
 191:Top_Cross.c   ****             case 323:       //pruefen
 192:Top_Cross.c   ****                 ds_dreh(-1, 90);
 193:Top_Cross.c   ****                 rs_dreh(1, 180);
 194:Top_Cross.c   ****                 break;
 195:Top_Cross.c   ****             case 332:       //pruefen
 196:Top_Cross.c   ****                 if (i==0) {
 197:Top_Cross.c   ****                     bs_dreh(1, 90);
 198:Top_Cross.c   ****                     bs_dreh(-1, 90);
 199:Top_Cross.c   ****                 }else{
 200:Top_Cross.c   ****                     bs_dreh(1, 90);
 201:Top_Cross.c   ****                     bs_dreh(-1, 90);
 202:Top_Cross.c   ****                     rs_dreh(-1, 90);
 203:Top_Cross.c   ****                 }
 204:Top_Cross.c   ****                 break;
 205:Top_Cross.c   ****             case 342:       //pruefen
 206:Top_Cross.c   ****                 if (i<2) {
 207:Top_Cross.c   ****                     ds_dreh(1, 90);
 208:Top_Cross.c   ****                     fs_dreh(-1, 90);
 209:Top_Cross.c   ****                     fs_dreh(1, 90);
 210:Top_Cross.c   ****                 }else{
 211:Top_Cross.c   ****                     ds_dreh(1, 90);
 212:Top_Cross.c   ****                     fs_dreh(-1, 90);
 213:Top_Cross.c   ****                     fs_dreh(1, 90);
 214:Top_Cross.c   ****                     rs_dreh(1, 90);
 215:Top_Cross.c   ****                 }
 216:Top_Cross.c   ****                 
 217:Top_Cross.c   ****                 break;
 218:Top_Cross.c   ****             case 324:       //pruefen
 219:Top_Cross.c   ****                 ds_dreh(1, 180);
 220:Top_Cross.c   ****                 rs_dreh(1, 180);
 221:Top_Cross.c   ****                 
 222:Top_Cross.c   ****                 break;
 223:Top_Cross.c   ****             default:
 224:Top_Cross.c   ****                 break;
 225:Top_Cross.c   ****         }
 226:Top_Cross.c   ****         printf("Getpos_k=%d",Getpos_k);
  54              		.loc 1 226 0
  55 0028 48979FE5 		ldr	r9, .L54+4
  27:Top_Cross.c   ****             case 103:
  56              		.loc 1 27 0
  57 002c 48A79FE5 		ldr	r10, .L54+8
  58 0030 48B79FE5 		ldr	fp, .L54+12
  59 0034 010000EA 		b	.L2
  60              	.LVL2:
  61              	.L48:
  62 0038 016086E2 		add	r6, r6, #1
  63 003c 015085E2 		add	r5, r5, #1
  64              	.LVL3:
  65              	.L2:
  24:Top_Cross.c   ****         change_rightface(color_kanten[i]);
  66              		.loc 1 24 0
  67 0040 0700A0E1 		mov	r0, r7
  68 0044 FEFFFFEB 		bl	change_topface
  69              	.LVL4:
  25:Top_Cross.c   ****         change_rightface(color_kanten[i]);
  70              		.loc 1 25 0
  71 0048 0440B8E5 		ldr	r4, [r8, #4]!
  72 004c 0400A0E1 		mov	r0, r4
  73 0050 FEFFFFEB 		bl	change_rightface
  74              	.LVL5:
  26:Top_Cross.c   ****         switch (Getpos_k) {
  75              		.loc 1 26 0
  76 0054 0700A0E1 		mov	r0, r7
  77 0058 0410A0E1 		mov	r1, r4
  78 005c FEFFFFEB 		bl	Kantenstein_suchen
  79              	.LVL6:
  80 0060 0040A0E1 		mov	r4, r0
  81              	.LVL7:
  27:Top_Cross.c   ****             case 103:
  82              		.loc 1 27 0
  83 0064 F10050E3 		cmp	r0, #241
  84 0068 9700000A 		beq	.L4
  85 006c 1C0000CA 		bgt	.L5
  86 0070 8C0050E3 		cmp	r0, #140
  87 0074 5400000A 		beq	.L6
  88 0078 0C0000CA 		bgt	.L7
  89 007c 680050E3 		cmp	r0, #104
  90 0080 4100000A 		beq	.L8
  91 0084 040000CA 		bgt	.L9
  92 0088 650050E3 		cmp	r0, #101
  93 008c 7700000A 		beq	.L10
  94 0090 670050E3 		cmp	r0, #103
  95 0094 3100000A 		beq	.L11
  96 0098 900100EA 		b	.L3
  97              	.L9:
  98 009c 6E0050E3 		cmp	r0, #110
  99 00a0 8200000A 		beq	.L12
 100 00a4 820050E3 		cmp	r0, #130
 101 00a8 3000000A 		beq	.L13
 102 00ac 8B0100EA 		b	.L3
 103              	.L7:
 104 00b0 D70050E3 		cmp	r0, #215
 105 00b4 AD00000A 		beq	.L14
 106 00b8 040000CA 		bgt	.L15
 107 00bc 960050E3 		cmp	r0, #150
 108 00c0 4E00000A 		beq	.L16
 109 00c4 D60050E3 		cmp	r0, #214
 110 00c8 9500000A 		beq	.L17
 111 00cc 830100EA 		b	.L3
 112              	.L15:
 113 00d0 EA0050E3 		cmp	r0, #234
 114 00d4 E500000A 		beq	.L18
 115 00d8 EB0050E3 		cmp	r0, #235
 116 00dc DF00000A 		beq	.L19
 117 00e0 7E0100EA 		b	.L3
 118              	.L5:
 119 00e4 0A0050E1 		cmp	r0, r10
 120 00e8 4301000A 		beq	.L20
 121 00ec 0D0000CA 		bgt	.L21
 122 00f0 FD0050E3 		cmp	r0, #253
 123 00f4 BA00000A 		beq	.L22
 124 00f8 040000CA 		bgt	.L23
 125 00fc F30050E3 		cmp	r0, #243
 126 0100 ED00000A 		beq	.L24
 127 0104 FB0050E3 		cmp	r0, #251
 128 0108 9C00000A 		beq	.L25
 129 010c 730100EA 		b	.L3
 130              	.L23:
 131 0110 4E0F50E3 		cmp	r0, #312
 132 0114 0101000A 		beq	.L26
 133 0118 64369FE5 		ldr	r3, .L54+16
 134 011c 030050E1 		cmp	r0, r3
 135 0120 1101000A 		beq	.L27
 136 0124 6D0100EA 		b	.L3
 137              	.L21:
 138 0128 530F50E3 		cmp	r0, #332
 139 012c 3901000A 		beq	.L28
 140 0130 050000CA 		bgt	.L29
 141 0134 510F50E3 		cmp	r0, #324
 142 0138 6201000A 		beq	.L30
 143 013c 44C69FE5 		ldr	ip, .L54+20
 144 0140 0C0050E1 		cmp	r0, ip
 145 0144 2801000A 		beq	.L31
 146 0148 640100EA 		b	.L3
 147              	.L29:
 148 014c 0B0050E1 		cmp	r0, fp
 149 0150 4301000A 		beq	.L32
 150 0154 160E50E3 		cmp	r0, #352
 151 0158 0A01000A 		beq	.L33
 152 015c 5F0100EA 		b	.L3
 153              	.L11:
  29:Top_Cross.c   ****                 break;
 154              		.loc 1 29 0
 155 0160 0100A0E3 		mov	r0, #1
 156              	.LVL8:
 157 0164 5A10A0E3 		mov	r1, #90
 158 0168 FEFFFFEB 		bl	us_dreh
 159              	.LVL9:
  30:Top_Cross.c   ****             case 130:
 160              		.loc 1 30 0
 161 016c 5B0100EA 		b	.L3
 162              	.LVL10:
 163              	.L13:
  32:Top_Cross.c   ****                 bs_dreh(-1, 90);
 164              		.loc 1 32 0
 165 0170 0000E0E3 		mvn	r0, #0
 166              	.LVL11:
 167 0174 5A10A0E3 		mov	r1, #90
 168 0178 FEFFFFEB 		bl	bs_dreh
 169              	.LVL12:
  33:Top_Cross.c   ****                 break;
 170              		.loc 1 33 0
 171 017c 0000E0E3 		mvn	r0, #0
 172 0180 5A10A0E3 		mov	r1, #90
 173 0184 FEFFFFEB 		bl	bs_dreh
 174              	.LVL13:
  34:Top_Cross.c   ****             case 104:
 175              		.loc 1 34 0
 176 0188 540100EA 		b	.L3
 177              	.LVL14:
 178              	.L8:
  36:Top_Cross.c   ****                 {
 179              		.loc 1 36 0
 180 018c 000056E3 		cmp	r6, #0
 181 0190 0300001A 		bne	.L34
  38:Top_Cross.c   ****                 }else{
 182              		.loc 1 38 0
 183 0194 0100A0E3 		mov	r0, #1
 184              	.LVL15:
 185 0198 B410A0E3 		mov	r1, #180
 186 019c FEFFFFEB 		bl	us_dreh
 187              	.LVL16:
 188 01a0 6C0100EA 		b	.L35
 189              	.LVL17:
 190              	.L34:
  40:Top_Cross.c   ****                     rs_dreh(1, 180);
 191              		.loc 1 40 0
 192 01a4 0100A0E3 		mov	r0, #1
 193              	.LVL18:
 194 01a8 B410A0E3 		mov	r1, #180
 195 01ac FEFFFFEB 		bl	ls_dreh
 196              	.LVL19:
  41:Top_Cross.c   ****                     rs_dreh(1, 180);
 197              		.loc 1 41 0
 198 01b0 0100A0E3 		mov	r0, #1
 199 01b4 B410A0E3 		mov	r1, #180
 200 01b8 FEFFFFEB 		bl	rs_dreh
 201              	.LVL20:
  42:Top_Cross.c   ****                 }
 202              		.loc 1 42 0
 203 01bc 0100A0E3 		mov	r0, #1
 204 01c0 B410A0E3 		mov	r1, #180
 205 01c4 FEFFFFEB 		bl	rs_dreh
 206              	.LVL21:
 207 01c8 440100EA 		b	.L3
 208              	.LVL22:
 209              	.L6:
  46:Top_Cross.c   ****                 fs_dreh(-1, 90);
 210              		.loc 1 46 0
 211 01cc 0100A0E3 		mov	r0, #1
 212              	.LVL23:
 213 01d0 5A10A0E3 		mov	r1, #90
 214 01d4 FEFFFFEB 		bl	ls_dreh
 215              	.LVL24:
  47:Top_Cross.c   ****                 fs_dreh(1, 90);
 216              		.loc 1 47 0
 217 01d8 0000E0E3 		mvn	r0, #0
 218 01dc 5A10A0E3 		mov	r1, #90
 219 01e0 FEFFFFEB 		bl	fs_dreh
 220              	.LVL25:
  48:Top_Cross.c   ****                 bs_dreh(1, 180);
 221              		.loc 1 48 0
 222 01e4 0100A0E3 		mov	r0, #1
 223 01e8 5A10A0E3 		mov	r1, #90
 224 01ec FEFFFFEB 		bl	fs_dreh
 225              	.LVL26:
  49:Top_Cross.c   ****                 
 226              		.loc 1 49 0
 227 01f0 0100A0E3 		mov	r0, #1
 228 01f4 B410A0E3 		mov	r1, #180
 229 01f8 FEFFFFEB 		bl	bs_dreh
 230              	.LVL27:
  51:Top_Cross.c   ****             case 105:
 231              		.loc 1 51 0
 232 01fc 370100EA 		b	.L3
 233              	.LVL28:
 234              	.L16:
  56:Top_Cross.c   ****                     rs_dreh(-1, 90);
 235              		.loc 1 56 0
 236 0200 000056E3 		cmp	r6, #0
 237 0204 0900001A 		bne	.L36
  57:Top_Cross.c   ****                     fs_dreh(-1, 90);
 238              		.loc 1 57 0
 239 0208 0000E0E3 		mvn	r0, #0
 240              	.LVL29:
 241 020c 5A10A0E3 		mov	r1, #90
 242 0210 FEFFFFEB 		bl	rs_dreh
 243              	.LVL30:
  58:Top_Cross.c   ****                     fs_dreh(-1, 90);
 244              		.loc 1 58 0
 245 0214 0000E0E3 		mvn	r0, #0
 246 0218 5A10A0E3 		mov	r1, #90
 247 021c FEFFFFEB 		bl	fs_dreh
 248              	.LVL31:
  59:Top_Cross.c   ****                 }else{
 249              		.loc 1 59 0
 250 0220 0000E0E3 		mvn	r0, #0
 251 0224 5A10A0E3 		mov	r1, #90
 252 0228 FEFFFFEB 		bl	fs_dreh
 253              	.LVL32:
 254 022c 490100EA 		b	.L35
 255              	.LVL33:
 256              	.L36:
  61:Top_Cross.c   ****                     ls_dreh(-1, 90);
 257              		.loc 1 61 0
 258 0230 0000E0E3 		mvn	r0, #0
 259              	.LVL34:
 260 0234 B410A0E3 		mov	r1, #180
 261 0238 FEFFFFEB 		bl	rs_dreh
 262              	.LVL35:
  62:Top_Cross.c   ****                     fs_dreh(-1, 90);
 263              		.loc 1 62 0
 264 023c 0000E0E3 		mvn	r0, #0
 265 0240 5A10A0E3 		mov	r1, #90
 266 0244 FEFFFFEB 		bl	ls_dreh
 267              	.LVL36:
  63:Top_Cross.c   ****                     fs_dreh(1, 90);
 268              		.loc 1 63 0
 269 0248 0000E0E3 		mvn	r0, #0
 270 024c 5A10A0E3 		mov	r1, #90
 271 0250 FEFFFFEB 		bl	fs_dreh
 272              	.LVL37:
  64:Top_Cross.c   ****                     rs_dreh(1, 90);
 273              		.loc 1 64 0
 274 0254 0100A0E3 		mov	r0, #1
 275 0258 5A10A0E3 		mov	r1, #90
 276 025c FEFFFFEB 		bl	fs_dreh
 277              	.LVL38:
  65:Top_Cross.c   ****                 }
 278              		.loc 1 65 0
 279 0260 0100A0E3 		mov	r0, #1
 280 0264 5A10A0E3 		mov	r1, #90
 281 0268 FEFFFFEB 		bl	rs_dreh
 282              	.LVL39:
 283 026c 1B0100EA 		b	.L3
 284              	.LVL40:
 285              	.L10:
  69:Top_Cross.c   ****                 {
 286              		.loc 1 69 0
 287 0270 000056E3 		cmp	r6, #0
 288 0274 0300001A 		bne	.L37
  71:Top_Cross.c   ****                 }else{
 289              		.loc 1 71 0
 290 0278 0000E0E3 		mvn	r0, #0
 291              	.LVL41:
 292 027c 5A10A0E3 		mov	r1, #90
 293 0280 FEFFFFEB 		bl	us_dreh
 294              	.LVL42:
 295 0284 330100EA 		b	.L35
 296              	.LVL43:
 297              	.L37:
  73:Top_Cross.c   ****                     rs_dreh(1, 90);
 298              		.loc 1 73 0
 299 0288 0100A0E3 		mov	r0, #1
 300              	.LVL44:
 301 028c B410A0E3 		mov	r1, #180
 302 0290 FEFFFFEB 		bl	fs_dreh
 303              	.LVL45:
  74:Top_Cross.c   ****                     fs_dreh(1, 180);
 304              		.loc 1 74 0
 305 0294 0100A0E3 		mov	r0, #1
 306 0298 5A10A0E3 		mov	r1, #90
 307 029c FEFFFFEB 		bl	rs_dreh
 308              	.LVL46:
  75:Top_Cross.c   ****                 }
 309              		.loc 1 75 0
 310 02a0 0100A0E3 		mov	r0, #1
 311 02a4 B410A0E3 		mov	r1, #180
 312 02a8 FEFFFFEB 		bl	fs_dreh
 313              	.LVL47:
 314 02ac 0B0100EA 		b	.L3
 315              	.LVL48:
 316              	.L12:
  80:Top_Cross.c   ****                 fs_dreh(1, 90);
 317              		.loc 1 80 0
 318 02b0 0100A0E3 		mov	r0, #1
 319              	.LVL49:
 320 02b4 5A10A0E3 		mov	r1, #90
 321 02b8 FEFFFFEB 		bl	fs_dreh
 322              	.LVL50:
  81:Top_Cross.c   ****                 
 323              		.loc 1 81 0
 324 02bc 0100A0E3 		mov	r0, #1
 325 02c0 5A10A0E3 		mov	r1, #90
 326 02c4 FEFFFFEB 		bl	fs_dreh
 327              	.LVL51:
  83:Top_Cross.c   ****             case 241:
 328              		.loc 1 83 0
 329 02c8 040100EA 		b	.L3
 330              	.LVL52:
 331              	.L4:
  85:Top_Cross.c   ****                     fs_dreh(1, 90);
 332              		.loc 1 85 0
 333 02cc 000056E3 		cmp	r6, #0
 334 02d0 0600001A 		bne	.L38
  86:Top_Cross.c   ****                     ls_dreh(-1,90);
 335              		.loc 1 86 0
 336 02d4 0100A0E3 		mov	r0, #1
 337              	.LVL53:
 338 02d8 5A10A0E3 		mov	r1, #90
 339 02dc FEFFFFEB 		bl	fs_dreh
 340              	.LVL54:
  87:Top_Cross.c   ****                 }else{
 341              		.loc 1 87 0
 342 02e0 0000E0E3 		mvn	r0, #0
 343 02e4 5A10A0E3 		mov	r1, #90
 344 02e8 FEFFFFEB 		bl	ls_dreh
 345              	.LVL55:
 346 02ec 190100EA 		b	.L35
 347              	.LVL56:
 348              	.L38:
  89:Top_Cross.c   ****                     rs_dreh(1, 90);
 349              		.loc 1 89 0
 350 02f0 0000E0E3 		mvn	r0, #0
 351              	.LVL57:
 352 02f4 5A10A0E3 		mov	r1, #90
 353 02f8 FEFFFFEB 		bl	fs_dreh
 354              	.LVL58:
  90:Top_Cross.c   ****                     ls_dreh(1, 90);
 355              		.loc 1 90 0
 356 02fc 0100A0E3 		mov	r0, #1
 357 0300 5A10A0E3 		mov	r1, #90
 358 0304 FEFFFFEB 		bl	rs_dreh
 359              	.LVL59:
  91:Top_Cross.c   ****                     fs_dreh(1, 180);
 360              		.loc 1 91 0
 361 0308 0100A0E3 		mov	r0, #1
 362 030c 5A10A0E3 		mov	r1, #90
 363 0310 FEFFFFEB 		bl	ls_dreh
 364              	.LVL60:
  92:Top_Cross.c   ****                 }
 365              		.loc 1 92 0
 366 0314 0100A0E3 		mov	r0, #1
 367 0318 B410A0E3 		mov	r1, #180
 368 031c FEFFFFEB 		bl	fs_dreh
 369              	.LVL61:
 370 0320 EE0000EA 		b	.L3
 371              	.LVL62:
 372              	.L17:
  96:Top_Cross.c   ****                     fs_dreh(1, 180);
 373              		.loc 1 96 0
 374 0324 010056E3 		cmp	r6, #1
 375 0328 060000CA 		bgt	.L39
  97:Top_Cross.c   ****                     fs_dreh(1, 90);
 376              		.loc 1 97 0
 377 032c 0100A0E3 		mov	r0, #1
 378              	.LVL63:
 379 0330 B410A0E3 		mov	r1, #180
 380 0334 FEFFFFEB 		bl	fs_dreh
 381              	.LVL64:
  98:Top_Cross.c   ****                 }else{
 382              		.loc 1 98 0
 383 0338 0100A0E3 		mov	r0, #1
 384 033c 5A10A0E3 		mov	r1, #90
 385 0340 FEFFFFEB 		bl	fs_dreh
 386              	.LVL65:
 387 0344 E50000EA 		b	.L3
 388              	.LVL66:
 389              	.L39:
 100:Top_Cross.c   ****                     fs_dreh(1, 90);
 390              		.loc 1 100 0
 391 0348 0100A0E3 		mov	r0, #1
 392              	.LVL67:
 393 034c B410A0E3 		mov	r1, #180
 394 0350 FEFFFFEB 		bl	fs_dreh
 395              	.LVL68:
 101:Top_Cross.c   ****                     rs_dreh(1, 180);
 396              		.loc 1 101 0
 397 0354 0100A0E3 		mov	r0, #1
 398 0358 5A10A0E3 		mov	r1, #90
 399 035c FEFFFFEB 		bl	fs_dreh
 400              	.LVL69:
 102:Top_Cross.c   ****                 }
 401              		.loc 1 102 0
 402 0360 0100A0E3 		mov	r0, #1
 403 0364 B410A0E3 		mov	r1, #180
 404 0368 FEFFFFEB 		bl	rs_dreh
 405              	.LVL70:
 406 036c DB0000EA 		b	.L3
 407              	.LVL71:
 408              	.L14:
 106:Top_Cross.c   ****                 break;
 409              		.loc 1 106 0
 410 0370 0100A0E3 		mov	r0, #1
 411              	.LVL72:
 412 0374 5A10A0E3 		mov	r1, #90
 413 0378 FEFFFFEB 		bl	rs_dreh
 414              	.LVL73:
 107:Top_Cross.c   ****             case 251:
 415              		.loc 1 107 0
 416 037c D70000EA 		b	.L3
 417              	.LVL74:
 418              	.L25:
 109:Top_Cross.c   ****                     fs_dreh(1, 90);
 419              		.loc 1 109 0
 420 0380 000056E3 		cmp	r6, #0
 421 0384 0900001A 		bne	.L40
 110:Top_Cross.c   ****                     rs_dreh(1, 90);
 422              		.loc 1 110 0
 423 0388 0100A0E3 		mov	r0, #1
 424              	.LVL75:
 425 038c 5A10A0E3 		mov	r1, #90
 426 0390 FEFFFFEB 		bl	fs_dreh
 427              	.LVL76:
 111:Top_Cross.c   ****                     fs_dreh(1, 180);
 428              		.loc 1 111 0
 429 0394 0100A0E3 		mov	r0, #1
 430 0398 5A10A0E3 		mov	r1, #90
 431 039c FEFFFFEB 		bl	rs_dreh
 432              	.LVL77:
 112:Top_Cross.c   ****                 }else{
 433              		.loc 1 112 0
 434 03a0 0100A0E3 		mov	r0, #1
 435 03a4 B410A0E3 		mov	r1, #180
 436 03a8 FEFFFFEB 		bl	fs_dreh
 437              	.LVL78:
 438 03ac E90000EA 		b	.L35
 439              	.LVL79:
 440              	.L40:
 114:Top_Cross.c   ****                     rs_dreh(1, 90);
 441              		.loc 1 114 0
 442 03b0 0100A0E3 		mov	r0, #1
 443              	.LVL80:
 444 03b4 5A10A0E3 		mov	r1, #90
 445 03b8 FEFFFFEB 		bl	fs_dreh
 446              	.LVL81:
 115:Top_Cross.c   ****                     ls_dreh(-1, 90);
 447              		.loc 1 115 0
 448 03bc 0100A0E3 		mov	r0, #1
 449 03c0 5A10A0E3 		mov	r1, #90
 450 03c4 FEFFFFEB 		bl	rs_dreh
 451              	.LVL82:
 116:Top_Cross.c   ****                     fs_dreh(1, 180);
 452              		.loc 1 116 0
 453 03c8 0000E0E3 		mvn	r0, #0
 454 03cc 5A10A0E3 		mov	r1, #90
 455 03d0 FEFFFFEB 		bl	ls_dreh
 456              	.LVL83:
 117:Top_Cross.c   ****                 }
 457              		.loc 1 117 0
 458 03d4 0100A0E3 		mov	r0, #1
 459 03d8 B410A0E3 		mov	r1, #180
 460 03dc FEFFFFEB 		bl	fs_dreh
 461              	.LVL84:
 462 03e0 BE0000EA 		b	.L3
 463              	.LVL85:
 464              	.L22:
 122:Top_Cross.c   ****                     rs_dreh(1, 180);
 465              		.loc 1 122 0
 466 03e4 010056E3 		cmp	r6, #1
 467 03e8 0C0000CA 		bgt	.L41
 123:Top_Cross.c   ****                     fs_dreh(1, 90);
 468              		.loc 1 123 0
 469 03ec 0100A0E3 		mov	r0, #1
 470              	.LVL86:
 471 03f0 B410A0E3 		mov	r1, #180
 472 03f4 FEFFFFEB 		bl	rs_dreh
 473              	.LVL87:
 124:Top_Cross.c   ****                     bs_dreh(1, 90);
 474              		.loc 1 124 0
 475 03f8 0100A0E3 		mov	r0, #1
 476 03fc 5A10A0E3 		mov	r1, #90
 477 0400 FEFFFFEB 		bl	fs_dreh
 478              	.LVL88:
 125:Top_Cross.c   ****                     bs_dreh(1, 180);
 479              		.loc 1 125 0
 480 0404 0100A0E3 		mov	r0, #1
 481 0408 5A10A0E3 		mov	r1, #90
 482 040c FEFFFFEB 		bl	bs_dreh
 483              	.LVL89:
 126:Top_Cross.c   ****                 }else{
 484              		.loc 1 126 0
 485 0410 0100A0E3 		mov	r0, #1
 486 0414 B410A0E3 		mov	r1, #180
 487 0418 FEFFFFEB 		bl	bs_dreh
 488              	.LVL90:
 489 041c AF0000EA 		b	.L3
 490              	.LVL91:
 491              	.L41:
 128:Top_Cross.c   ****                     fs_dreh(1, 90);
 492              		.loc 1 128 0
 493 0420 0100A0E3 		mov	r0, #1
 494              	.LVL92:
 495 0424 B410A0E3 		mov	r1, #180
 496 0428 FEFFFFEB 		bl	rs_dreh
 497              	.LVL93:
 129:Top_Cross.c   ****                     bs_dreh(1, 90);
 498              		.loc 1 129 0
 499 042c 0100A0E3 		mov	r0, #1
 500 0430 5A10A0E3 		mov	r1, #90
 501 0434 FEFFFFEB 		bl	fs_dreh
 502              	.LVL94:
 130:Top_Cross.c   ****                     rs_dreh(-1, 90);
 503              		.loc 1 130 0
 504 0438 0100A0E3 		mov	r0, #1
 505 043c 5A10A0E3 		mov	r1, #90
 506 0440 FEFFFFEB 		bl	bs_dreh
 507              	.LVL95:
 131:Top_Cross.c   ****                     bs_dreh(1, 180);
 508              		.loc 1 131 0
 509 0444 0000E0E3 		mvn	r0, #0
 510 0448 5A10A0E3 		mov	r1, #90
 511 044c FEFFFFEB 		bl	rs_dreh
 512              	.LVL96:
 132:Top_Cross.c   ****                 }
 513              		.loc 1 132 0
 514 0450 0100A0E3 		mov	r0, #1
 515 0454 B410A0E3 		mov	r1, #180
 516 0458 FEFFFFEB 		bl	bs_dreh
 517              	.LVL97:
 518 045c 9F0000EA 		b	.L3
 519              	.LVL98:
 520              	.L19:
 136:Top_Cross.c   ****                 break;
 521              		.loc 1 136 0
 522 0460 0000E0E3 		mvn	r0, #0
 523              	.LVL99:
 524 0464 5A10A0E3 		mov	r1, #90
 525 0468 FEFFFFEB 		bl	rs_dreh
 526              	.LVL100:
 137:Top_Cross.c   ****             case 234:     //pruefen
 527              		.loc 1 137 0
 528 046c 9B0000EA 		b	.L3
 529              	.LVL101:
 530              	.L18:
 139:Top_Cross.c   ****                     bs_dreh(-1, 180);
 531              		.loc 1 139 0
 532 0470 000056E3 		cmp	r6, #0
 533 0474 0600001A 		bne	.L42
 140:Top_Cross.c   ****                     bs_dreh(-1, 90);
 534              		.loc 1 140 0
 535 0478 0000E0E3 		mvn	r0, #0
 536              	.LVL102:
 537 047c B410A0E3 		mov	r1, #180
 538 0480 FEFFFFEB 		bl	bs_dreh
 539              	.LVL103:
 141:Top_Cross.c   ****                 }else{
 540              		.loc 1 141 0
 541 0484 0000E0E3 		mvn	r0, #0
 542 0488 5A10A0E3 		mov	r1, #90
 543 048c FEFFFFEB 		bl	bs_dreh
 544              	.LVL104:
 545 0490 B00000EA 		b	.L35
 546              	.LVL105:
 547              	.L42:
 143:Top_Cross.c   ****                     bs_dreh(-1, 90);
 548              		.loc 1 143 0
 549 0494 0000E0E3 		mvn	r0, #0
 550              	.LVL106:
 551 0498 B410A0E3 		mov	r1, #180
 552 049c FEFFFFEB 		bl	bs_dreh
 553              	.LVL107:
 144:Top_Cross.c   ****                     rs_dreh(1, 180);
 554              		.loc 1 144 0
 555 04a0 0000E0E3 		mvn	r0, #0
 556 04a4 5A10A0E3 		mov	r1, #90
 557 04a8 FEFFFFEB 		bl	bs_dreh
 558              	.LVL108:
 145:Top_Cross.c   ****                 }
 559              		.loc 1 145 0
 560 04ac 0100A0E3 		mov	r0, #1
 561 04b0 B410A0E3 		mov	r1, #180
 562 04b4 FEFFFFEB 		bl	rs_dreh
 563              	.LVL109:
 564 04b8 880000EA 		b	.L3
 565              	.LVL110:
 566              	.L24:
 149:Top_Cross.c   ****                     bs_dreh(1, 90);
 567              		.loc 1 149 0
 568 04bc 000056E3 		cmp	r6, #0
 569 04c0 0900001A 		bne	.L43
 150:Top_Cross.c   ****                     rs_dreh(-1, 90);
 570              		.loc 1 150 0
 571 04c4 0100A0E3 		mov	r0, #1
 572              	.LVL111:
 573 04c8 5A10A0E3 		mov	r1, #90
 574 04cc FEFFFFEB 		bl	bs_dreh
 575              	.LVL112:
 151:Top_Cross.c   ****                     bs_dreh(-1, 180);
 576              		.loc 1 151 0
 577 04d0 0000E0E3 		mvn	r0, #0
 578 04d4 5A10A0E3 		mov	r1, #90
 579 04d8 FEFFFFEB 		bl	rs_dreh
 580              	.LVL113:
 152:Top_Cross.c   ****                 }else{
 581              		.loc 1 152 0
 582 04dc 0000E0E3 		mvn	r0, #0
 583 04e0 B410A0E3 		mov	r1, #180
 584 04e4 FEFFFFEB 		bl	bs_dreh
 585              	.LVL114:
 586 04e8 9A0000EA 		b	.L35
 587              	.LVL115:
 588              	.L43:
 154:Top_Cross.c   ****                     rs_dreh(-1, 90);
 589              		.loc 1 154 0
 590 04ec 0100A0E3 		mov	r0, #1
 591              	.LVL116:
 592 04f0 5A10A0E3 		mov	r1, #90
 593 04f4 FEFFFFEB 		bl	bs_dreh
 594              	.LVL117:
 155:Top_Cross.c   ****                     bs_dreh(-1, 180);
 595              		.loc 1 155 0
 596 04f8 0000E0E3 		mvn	r0, #0
 597 04fc 5A10A0E3 		mov	r1, #90
 598 0500 FEFFFFEB 		bl	rs_dreh
 599              	.LVL118:
 156:Top_Cross.c   ****                     fs_dreh(-1, 90);
 600              		.loc 1 156 0
 601 0504 0000E0E3 		mvn	r0, #0
 602 0508 B410A0E3 		mov	r1, #180
 603 050c FEFFFFEB 		bl	bs_dreh
 604              	.LVL119:
 157:Top_Cross.c   ****                 }
 605              		.loc 1 157 0
 606 0510 0000E0E3 		mvn	r0, #0
 607 0514 5A10A0E3 		mov	r1, #90
 608 0518 FEFFFFEB 		bl	fs_dreh
 609              	.LVL120:
 610 051c 6F0000EA 		b	.L3
 611              	.LVL121:
 612              	.L26:
 161:Top_Cross.c   ****                     fs_dreh(-1, 90);
 613              		.loc 1 161 0
 614 0520 000056E3 		cmp	r6, #0
 615 0524 0600001A 		bne	.L44
 162:Top_Cross.c   ****                     fs_dreh(1, 90);
 616              		.loc 1 162 0
 617 0528 0000E0E3 		mvn	r0, #0
 618              	.LVL122:
 619 052c 5A10A0E3 		mov	r1, #90
 620 0530 FEFFFFEB 		bl	fs_dreh
 621              	.LVL123:
 163:Top_Cross.c   ****                 }else{
 622              		.loc 1 163 0
 623 0534 0100A0E3 		mov	r0, #1
 624 0538 5A10A0E3 		mov	r1, #90
 625 053c FEFFFFEB 		bl	fs_dreh
 626              	.LVL124:
 627 0540 840000EA 		b	.L35
 628              	.LVL125:
 629              	.L44:
 165:Top_Cross.c   ****                     fs_dreh(1, 90);
 630              		.loc 1 165 0
 631 0544 0000E0E3 		mvn	r0, #0
 632              	.LVL126:
 633 0548 5A10A0E3 		mov	r1, #90
 634 054c FEFFFFEB 		bl	fs_dreh
 635              	.LVL127:
 166:Top_Cross.c   ****                     rs_dreh(1, 90);
 636              		.loc 1 166 0
 637 0550 0100A0E3 		mov	r0, #1
 638 0554 5A10A0E3 		mov	r1, #90
 639 0558 FEFFFFEB 		bl	fs_dreh
 640              	.LVL128:
 167:Top_Cross.c   ****                 }
 641              		.loc 1 167 0
 642 055c 0100A0E3 		mov	r0, #1
 643 0560 5A10A0E3 		mov	r1, #90
 644 0564 FEFFFFEB 		bl	rs_dreh
 645              	.LVL129:
 646 0568 5C0000EA 		b	.L3
 647              	.LVL130:
 648              	.L27:
 172:Top_Cross.c   ****                 rs_dreh(1, 180);
 649              		.loc 1 172 0
 650 056c 0100A0E3 		mov	r0, #1
 651              	.LVL131:
 652 0570 5A10A0E3 		mov	r1, #90
 653 0574 FEFFFFEB 		bl	ds_dreh
 654              	.LVL132:
 173:Top_Cross.c   ****                 
 655              		.loc 1 173 0
 656 0578 0100A0E3 		mov	r0, #1
 657 057c B410A0E3 		mov	r1, #180
 658 0580 FEFFFFEB 		bl	rs_dreh
 659              	.LVL133:
 175:Top_Cross.c   ****             case 352:      //pruefen
 660              		.loc 1 175 0
 661 0584 550000EA 		b	.L3
 662              	.LVL134:
 663              	.L33:
 177:Top_Cross.c   ****                     ds_dreh(-1, 90);
 664              		.loc 1 177 0
 665 0588 010056E3 		cmp	r6, #1
 666 058c 090000CA 		bgt	.L45
 178:Top_Cross.c   ****                     fs_dreh(-1, 90);
 667              		.loc 1 178 0
 668 0590 0000E0E3 		mvn	r0, #0
 669              	.LVL135:
 670 0594 5A10A0E3 		mov	r1, #90
 671 0598 FEFFFFEB 		bl	ds_dreh
 672              	.LVL136:
 179:Top_Cross.c   ****                     fs_dreh(1, 90);
 673              		.loc 1 179 0
 674 059c 0000E0E3 		mvn	r0, #0
 675 05a0 5A10A0E3 		mov	r1, #90
 676 05a4 FEFFFFEB 		bl	fs_dreh
 677              	.LVL137:
 180:Top_Cross.c   ****                 }else{
 678              		.loc 1 180 0
 679 05a8 0100A0E3 		mov	r0, #1
 680 05ac 5A10A0E3 		mov	r1, #90
 681 05b0 FEFFFFEB 		bl	fs_dreh
 682              	.LVL138:
 683 05b4 490000EA 		b	.L3
 684              	.LVL139:
 685              	.L45:
 182:Top_Cross.c   ****                     fs_dreh(-1, 90);
 686              		.loc 1 182 0
 687 05b8 0000E0E3 		mvn	r0, #0
 688              	.LVL140:
 689 05bc 5A10A0E3 		mov	r1, #90
 690 05c0 FEFFFFEB 		bl	ds_dreh
 691              	.LVL141:
 183:Top_Cross.c   ****                     fs_dreh(1, 90);
 692              		.loc 1 183 0
 693 05c4 0000E0E3 		mvn	r0, #0
 694 05c8 5A10A0E3 		mov	r1, #90
 695 05cc FEFFFFEB 		bl	fs_dreh
 696              	.LVL142:
 184:Top_Cross.c   ****                     rs_dreh(1, 90);
 697              		.loc 1 184 0
 698 05d0 0100A0E3 		mov	r0, #1
 699 05d4 5A10A0E3 		mov	r1, #90
 700 05d8 FEFFFFEB 		bl	fs_dreh
 701              	.LVL143:
 185:Top_Cross.c   ****                 }
 702              		.loc 1 185 0
 703 05dc 0100A0E3 		mov	r0, #1
 704 05e0 5A10A0E3 		mov	r1, #90
 705 05e4 FEFFFFEB 		bl	rs_dreh
 706              	.LVL144:
 707 05e8 3C0000EA 		b	.L3
 708              	.LVL145:
 709              	.L31:
 189:Top_Cross.c   ****                 break;
 710              		.loc 1 189 0
 711 05ec 0100A0E3 		mov	r0, #1
 712              	.LVL146:
 713 05f0 B410A0E3 		mov	r1, #180
 714 05f4 FEFFFFEB 		bl	rs_dreh
 715              	.LVL147:
 190:Top_Cross.c   ****             case 323:       //pruefen
 716              		.loc 1 190 0
 717 05f8 380000EA 		b	.L3
 718              	.LVL148:
 719              	.L20:
 192:Top_Cross.c   ****                 rs_dreh(1, 180);
 720              		.loc 1 192 0
 721 05fc 0000E0E3 		mvn	r0, #0
 722              	.LVL149:
 723 0600 5A10A0E3 		mov	r1, #90
 724 0604 FEFFFFEB 		bl	ds_dreh
 725              	.LVL150:
 193:Top_Cross.c   ****                 break;
 726              		.loc 1 193 0
 727 0608 0100A0E3 		mov	r0, #1
 728 060c B410A0E3 		mov	r1, #180
 729 0610 FEFFFFEB 		bl	rs_dreh
 730              	.LVL151:
 194:Top_Cross.c   ****             case 332:       //pruefen
 731              		.loc 1 194 0
 732 0614 310000EA 		b	.L3
 733              	.LVL152:
 734              	.L28:
 196:Top_Cross.c   ****                     bs_dreh(1, 90);
 735              		.loc 1 196 0
 736 0618 000056E3 		cmp	r6, #0
 737 061c 0600001A 		bne	.L46
 197:Top_Cross.c   ****                     bs_dreh(-1, 90);
 738              		.loc 1 197 0
 739 0620 0100A0E3 		mov	r0, #1
 740              	.LVL153:
 741 0624 5A10A0E3 		mov	r1, #90
 742 0628 FEFFFFEB 		bl	bs_dreh
 743              	.LVL154:
 198:Top_Cross.c   ****                 }else{
 744              		.loc 1 198 0
 745 062c 0000E0E3 		mvn	r0, #0
 746 0630 5A10A0E3 		mov	r1, #90
 747 0634 FEFFFFEB 		bl	bs_dreh
 748              	.LVL155:
 749 0638 460000EA 		b	.L35
 750              	.LVL156:
 751              	.L46:
 200:Top_Cross.c   ****                     bs_dreh(-1, 90);
 752              		.loc 1 200 0
 753 063c 0100A0E3 		mov	r0, #1
 754              	.LVL157:
 755 0640 5A10A0E3 		mov	r1, #90
 756 0644 FEFFFFEB 		bl	bs_dreh
 757              	.LVL158:
 201:Top_Cross.c   ****                     rs_dreh(-1, 90);
 758              		.loc 1 201 0
 759 0648 0000E0E3 		mvn	r0, #0
 760 064c 5A10A0E3 		mov	r1, #90
 761 0650 FEFFFFEB 		bl	bs_dreh
 762              	.LVL159:
 202:Top_Cross.c   ****                 }
 763              		.loc 1 202 0
 764 0654 0000E0E3 		mvn	r0, #0
 765 0658 5A10A0E3 		mov	r1, #90
 766 065c FEFFFFEB 		bl	rs_dreh
 767              	.LVL160:
 768 0660 1E0000EA 		b	.L3
 769              	.LVL161:
 770              	.L32:
 206:Top_Cross.c   ****                     ds_dreh(1, 90);
 771              		.loc 1 206 0
 772 0664 010056E3 		cmp	r6, #1
 773 0668 090000CA 		bgt	.L47
 207:Top_Cross.c   ****                     fs_dreh(-1, 90);
 774              		.loc 1 207 0
 775 066c 0100A0E3 		mov	r0, #1
 776              	.LVL162:
 777 0670 5A10A0E3 		mov	r1, #90
 778 0674 FEFFFFEB 		bl	ds_dreh
 779              	.LVL163:
 208:Top_Cross.c   ****                     fs_dreh(1, 90);
 780              		.loc 1 208 0
 781 0678 0000E0E3 		mvn	r0, #0
 782 067c 5A10A0E3 		mov	r1, #90
 783 0680 FEFFFFEB 		bl	fs_dreh
 784              	.LVL164:
 209:Top_Cross.c   ****                 }else{
 785              		.loc 1 209 0
 786 0684 0100A0E3 		mov	r0, #1
 787 0688 5A10A0E3 		mov	r1, #90
 788 068c FEFFFFEB 		bl	fs_dreh
 789              	.LVL165:
 790 0690 120000EA 		b	.L3
 791              	.LVL166:
 792              	.L47:
 211:Top_Cross.c   ****                     fs_dreh(-1, 90);
 793              		.loc 1 211 0
 794 0694 0100A0E3 		mov	r0, #1
 795              	.LVL167:
 796 0698 5A10A0E3 		mov	r1, #90
 797 069c FEFFFFEB 		bl	ds_dreh
 798              	.LVL168:
 212:Top_Cross.c   ****                     fs_dreh(1, 90);
 799              		.loc 1 212 0
 800 06a0 0000E0E3 		mvn	r0, #0
 801 06a4 5A10A0E3 		mov	r1, #90
 802 06a8 FEFFFFEB 		bl	fs_dreh
 803              	.LVL169:
 213:Top_Cross.c   ****                     rs_dreh(1, 90);
 804              		.loc 1 213 0
 805 06ac 0100A0E3 		mov	r0, #1
 806 06b0 5A10A0E3 		mov	r1, #90
 807 06b4 FEFFFFEB 		bl	fs_dreh
 808              	.LVL170:
 214:Top_Cross.c   ****                 }
 809              		.loc 1 214 0
 810 06b8 0100A0E3 		mov	r0, #1
 811 06bc 5A10A0E3 		mov	r1, #90
 812 06c0 FEFFFFEB 		bl	rs_dreh
 813              	.LVL171:
 814 06c4 050000EA 		b	.L3
 815              	.LVL172:
 816              	.L30:
 219:Top_Cross.c   ****                 rs_dreh(1, 180);
 817              		.loc 1 219 0
 818 06c8 0100A0E3 		mov	r0, #1
 819              	.LVL173:
 820 06cc B410A0E3 		mov	r1, #180
 821 06d0 FEFFFFEB 		bl	ds_dreh
 822              	.LVL174:
 220:Top_Cross.c   ****                 
 823              		.loc 1 220 0
 824 06d4 0100A0E3 		mov	r0, #1
 825 06d8 B410A0E3 		mov	r1, #180
 826 06dc FEFFFFEB 		bl	rs_dreh
 827              	.LVL175:
 828              	.L3:
 829              		.loc 1 226 0
 830 06e0 0900A0E1 		mov	r0, r9
 831 06e4 0410A0E1 		mov	r1, r4
 832 06e8 FEFFFFEB 		bl	printf
 833              	.LVL176:
  22:Top_Cross.c   ****     {
 834              		.loc 1 22 0
 835 06ec 030055E3 		cmp	r5, #3
 836 06f0 50FEFFDA 		ble	.L48
 227:Top_Cross.c   ****     }
 228:Top_Cross.c   ****     change_topface(0);
 837              		.loc 1 228 0
 838 06f4 0000A0E3 		mov	r0, #0
 839 06f8 FEFFFFEB 		bl	change_topface
 840              	.LVL177:
 229:Top_Cross.c   ****     change_rightface(5);
 841              		.loc 1 229 0
 842 06fc 0500A0E3 		mov	r0, #5
 843 0700 FEFFFFEB 		bl	change_rightface
 844              	.LVL178:
 230:Top_Cross.c   ****     int Getpos_k1=0;
 231:Top_Cross.c   ****     Getpos_k1=Kantenstein_suchen(0, 5);
 845              		.loc 1 231 0
 846 0704 0000A0E3 		mov	r0, #0
 847 0708 0510A0E3 		mov	r1, #5
 848 070c FEFFFFEB 		bl	Kantenstein_suchen
 849              	.LVL179:
 232:Top_Cross.c   ****     switch (Getpos_k1) {
 850              		.loc 1 232 0
 851 0710 670050E3 		cmp	r0, #103
 852 0714 0700000A 		beq	.L50
 853 0718 680050E3 		cmp	r0, #104
 854 071c 0900000A 		beq	.L51
 855 0720 650050E3 		cmp	r0, #101
 856 0724 0F00001A 		bne	.L53
 233:Top_Cross.c   ****         case 101:
 234:Top_Cross.c   ****             us_dreh(-1, 90);
 857              		.loc 1 234 0
 858 0728 0000E0E3 		mvn	r0, #0
 859              	.LVL180:
 860 072c 5A10A0E3 		mov	r1, #90
 861 0730 FEFFFFEB 		bl	us_dreh
 862              	.LVL181:
 235:Top_Cross.c   ****             break;
 863              		.loc 1 235 0
 864 0734 0B0000EA 		b	.L53
 865              	.LVL182:
 866              	.L50:
 236:Top_Cross.c   ****         case 103:
 237:Top_Cross.c   ****             us_dreh(1, 90);
 867              		.loc 1 237 0
 868 0738 0100A0E3 		mov	r0, #1
 869              	.LVL183:
 870 073c 5A10A0E3 		mov	r1, #90
 871 0740 FEFFFFEB 		bl	us_dreh
 872              	.LVL184:
 238:Top_Cross.c   ****             break;
 873              		.loc 1 238 0
 874 0744 070000EA 		b	.L53
 875              	.LVL185:
 876              	.L51:
 239:Top_Cross.c   ****         case 104:
 240:Top_Cross.c   ****             us_dreh(1, 180);
 877              		.loc 1 240 0
 878 0748 0100A0E3 		mov	r0, #1
 879              	.LVL186:
 880 074c B410A0E3 		mov	r1, #180
 881 0750 FEFFFFEB 		bl	us_dreh
 882              	.LVL187:
 883 0754 030000EA 		b	.L53
 884              	.LVL188:
 885              	.L35:
 226:Top_Cross.c   ****     }
 886              		.loc 1 226 0
 887 0758 0900A0E1 		mov	r0, r9
 888 075c 0410A0E1 		mov	r1, r4
 889 0760 FEFFFFEB 		bl	printf
 890              	.LVL189:
 891 0764 33FEFFEA 		b	.L48
 892              	.L53:
 241:Top_Cross.c   ****             break;
 242:Top_Cross.c   ****         case 105:
 243:Top_Cross.c   ****             break;
 244:Top_Cross.c   ****             
 245:Top_Cross.c   ****         default:
 246:Top_Cross.c   ****             break;
 247:Top_Cross.c   ****     }
 248:Top_Cross.c   ****     return 0;
 249:Top_Cross.c   **** }
 893              		.loc 1 249 0
 894 0768 0000A0E3 		mov	r0, #0
 895 076c 14D08DE2 		add	sp, sp, #20
 896              		@ sp needed
 897 0770 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 898              	.LVL190:
 899              	.L55:
 900              		.align	2
 901              	.L54:
 902 0774 00000000 		.word	.LANCHOR0
 903 0778 00000000 		.word	.LC1
 904 077c 43010000 		.word	323
 905 0780 56010000 		.word	342
 906 0784 41010000 		.word	321
 907 0788 45010000 		.word	325
 908              		.cfi_endproc
 909              	.LFE11:
 910              		.fnend
 912              		.section	.rodata
 913              		.align	2
 914              	.LANCHOR0 = . + 0
 915              	.LC0:
 916 0000 01000000 		.word	1
 917 0004 04000000 		.word	4
 918 0008 03000000 		.word	3
 919 000c 05000000 		.word	5
 920              		.section	.rodata.str1.4,"aMS",%progbits,1
 921              		.align	2
 922              	.LC1:
 923 0000 47657470 		.ascii	"Getpos_k=%d\000"
 923      6F735F6B 
 923      3D256400 
 924              		.text
 925              	.Letext0:
 926              		.file 2 "/usr/local/carlson-minot/crosscompilers/lib/gcc/arm-none-linux-gnueabi/4.8.3/include/stdd
 927              		.file 3 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 928              		.file 4 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 929              		.file 5 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 930              		.file 6 "Side_dreh.h"
 931              		.file 7 "Color_search.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Top_Cross.c
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccYv00BR.s:16     .text:0000000000000000 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccYv00BR.s:19     .text:0000000000000000 Top_Cross
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccYv00BR.s:902    .text:0000000000000774 $d
                       .ARM.exidx:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccYv00BR.s:913    .rodata:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccYv00BR.s:921    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
change_topface
change_rightface
Kantenstein_suchen
us_dreh
bs_dreh
ls_dreh
rs_dreh
fs_dreh
ds_dreh
printf
__aeabi_unwind_cpp_pr0
