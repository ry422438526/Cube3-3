   1              		.arch armv5te
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"PLL.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	PLL
  19              	PLL:
  20              		.fnstart
  21              	.LFB11:
  22              		.file 1 "PLL.c"
   1:PLL.c         **** //
   2:PLL.c         **** //  PLL.c
   3:PLL.c         **** //  Cube3*3
   4:PLL.c         **** //
   5:PLL.c         **** //  Created by Ryoma on 20.12.15.
   6:PLL.c         **** //  Copyright Â© 2015 Chunxia Yang. All rights reserved.
   7:PLL.c         **** //
   8:PLL.c         **** 
   9:PLL.c         **** #include "PLL.h"
  10:PLL.c         **** #include "Color_search.h"
  11:PLL.c         **** #include "Side_dreh.h"
  12:PLL.c         **** #include "print_mode.h"
  13:PLL.c         **** #include "main.h"
  14:PLL.c         **** 
  15:PLL.c         **** int PLL()
  16:PLL.c         **** {
  23              		.loc 1 16 0
  24              		.cfi_startproc
  25              		@ args = 0, pretend = 0, frame = 24
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  28              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  29              		.cfi_def_cfa_offset 36
  30              		.cfi_offset 4, -36
  31              		.cfi_offset 5, -32
  32              		.cfi_offset 6, -28
  33              		.cfi_offset 7, -24
  34              		.cfi_offset 8, -20
  35              		.cfi_offset 9, -16
  36              		.cfi_offset 10, -12
  37              		.cfi_offset 11, -8
  38              		.cfi_offset 14, -4
  39              		.pad #28
  40 0004 1CD04DE2 		sub	sp, sp, #28
  41              		.cfi_def_cfa_offset 64
  17:PLL.c         ****     change_topface(2);
  42              		.loc 1 17 0
  43 0008 0200A0E3 		mov	r0, #2
  44 000c FEFFFFEB 		bl	change_topface
  45              	.LVL0:
  18:PLL.c         ****     change_rightface(4);
  46              		.loc 1 18 0
  47 0010 0400A0E3 		mov	r0, #4
  48 0014 FEFFFFEB 		bl	change_rightface
  49              	.LVL1:
  19:PLL.c         ****     int i,j;
  20:PLL.c         ****     int Color_col[4]={1,4,3,5};
  50              		.loc 1 20 0
  51 0018 AC379FE5 		ldr	r3, .L34
  52 001c 0F0093E8 		ldmia	r3, {r0, r1, r2, r3}
  53 0020 18C08DE2 		add	ip, sp, #24
  54 0024 0F000CE9 		stmdb	ip, {r0, r1, r2, r3}
  21:PLL.c         ****     
  22:PLL.c         ****     if ((color_data[1][0]!=color_data[1][2])&&(color_data[5][6]!=color_data[5][8])&&(color_data[3][
  55              		.loc 1 22 0
  56 0028 A0379FE5 		ldr	r3, .L34+4
  57 002c 0920D3E5 		ldrb	r2, [r3, #9]	@ zero_extendqisi2
  58 0030 0B30D3E5 		ldrb	r3, [r3, #11]	@ zero_extendqisi2
  59 0034 020053E1 		cmp	r3, r2
  60 0038 2E00000A 		beq	.L2
  61              		.loc 1 22 0 is_stmt 0 discriminator 1
  62 003c 8C379FE5 		ldr	r3, .L34+4
  63 0040 3320D3E5 		ldrb	r2, [r3, #51]	@ zero_extendqisi2
  64 0044 3530D3E5 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
  65 0048 030052E1 		cmp	r2, r3
  66 004c 4B00000A 		beq	.L3
  67 0050 78379FE5 		ldr	r3, .L34+4
  68 0054 2120D3E5 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
  69 0058 2330D3E5 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
  70 005c 030052E1 		cmp	r2, r3
  71 0060 4600000A 		beq	.L3
  72 0064 64379FE5 		ldr	r3, .L34+4
  73 0068 2A20D3E5 		ldrb	r2, [r3, #42]	@ zero_extendqisi2
  74 006c 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
  75 0070 030052E1 		cmp	r2, r3
  76 0074 4100000A 		beq	.L3
  23:PLL.c         ****         rs_dreh(1, 180);
  77              		.loc 1 23 0 is_stmt 1
  78 0078 0100A0E3 		mov	r0, #1
  79 007c B410A0E3 		mov	r1, #180
  80 0080 FEFFFFEB 		bl	rs_dreh
  81              	.LVL2:
  24:PLL.c         ****         fs_dreh(1, 180);
  82              		.loc 1 24 0
  83 0084 0100A0E3 		mov	r0, #1
  84 0088 B410A0E3 		mov	r1, #180
  85 008c FEFFFFEB 		bl	fs_dreh
  86              	.LVL3:
  25:PLL.c         ****         rs_dreh(-1, 90);
  87              		.loc 1 25 0
  88 0090 0000E0E3 		mvn	r0, #0
  89 0094 5A10A0E3 		mov	r1, #90
  90 0098 FEFFFFEB 		bl	rs_dreh
  91              	.LVL4:
  26:PLL.c         ****         rs_dreh(-1, 90);
  92              		.loc 1 26 0
  93 009c 0000E0E3 		mvn	r0, #0
  94 00a0 5A10A0E3 		mov	r1, #90
  95 00a4 FEFFFFEB 		bl	rs_dreh
  96              	.LVL5:
  27:PLL.c         ****         ls_dreh(1, 90);
  97              		.loc 1 27 0
  98 00a8 0100A0E3 		mov	r0, #1
  99 00ac 5A10A0E3 		mov	r1, #90
 100 00b0 FEFFFFEB 		bl	ls_dreh
 101              	.LVL6:
  28:PLL.c         ****         ls_dreh(1, 180);
 102              		.loc 1 28 0
 103 00b4 0100A0E3 		mov	r0, #1
 104 00b8 B410A0E3 		mov	r1, #180
 105 00bc FEFFFFEB 		bl	ls_dreh
 106              	.LVL7:
  29:PLL.c         ****         rs_dreh(-1, 90);
 107              		.loc 1 29 0
 108 00c0 0000E0E3 		mvn	r0, #0
 109 00c4 5A10A0E3 		mov	r1, #90
 110 00c8 FEFFFFEB 		bl	rs_dreh
 111              	.LVL8:
  30:PLL.c         ****         rs_dreh(1, 90);
 112              		.loc 1 30 0
 113 00cc 0100A0E3 		mov	r0, #1
 114 00d0 5A10A0E3 		mov	r1, #90
 115 00d4 FEFFFFEB 		bl	rs_dreh
 116              	.LVL9:
  31:PLL.c         ****         ls_dreh(-1, 90);
 117              		.loc 1 31 0
 118 00d8 0000E0E3 		mvn	r0, #0
 119 00dc 5A10A0E3 		mov	r1, #90
 120 00e0 FEFFFFEB 		bl	ls_dreh
 121              	.LVL10:
  32:PLL.c         ****     }
  33:PLL.c         ****     
  34:PLL.c         ****     if ((color_data[1][0]==color_data[1][2])&&(color_data[5][6]==color_data[5][8])&&(color_data[3][
 122              		.loc 1 34 0
 123 00e4 E4369FE5 		ldr	r3, .L34+4
 124 00e8 0920D3E5 		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 125 00ec 0B30D3E5 		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 126 00f0 020053E1 		cmp	r3, r2
 127 00f4 2100001A 		bne	.L3
 128              	.L2:
 129              		.loc 1 34 0 is_stmt 0 discriminator 1
 130 00f8 D0369FE5 		ldr	r3, .L34+4
 131 00fc 3310D3E5 		ldrb	r1, [r3, #51]	@ zero_extendqisi2
 132 0100 3530D3E5 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 133 0104 030051E1 		cmp	r1, r3
 134 0108 1C00001A 		bne	.L3
 135 010c BC369FE5 		ldr	r3, .L34+4
 136 0110 2110D3E5 		ldrb	r1, [r3, #33]	@ zero_extendqisi2
 137 0114 2330D3E5 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
 138 0118 030051E1 		cmp	r1, r3
 139 011c 1700001A 		bne	.L3
 140 0120 A8369FE5 		ldr	r3, .L34+4
 141 0124 2A10D3E5 		ldrb	r1, [r3, #42]	@ zero_extendqisi2
 142 0128 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 143 012c 030051E1 		cmp	r1, r3
 144 0130 1200001A 		bne	.L3
  35:PLL.c         ****         switch (color_data[1][0]) {
 145              		.loc 1 35 0 is_stmt 1
 146 0134 040052E3 		cmp	r2, #4
 147 0138 0400000A 		beq	.L5
 148 013c 050052E3 		cmp	r2, #5
 149 0140 0A00000A 		beq	.L6
 150 0144 030052E3 		cmp	r2, #3
 151 0148 9701001A 		bne	.L9
 152 014c 030000EA 		b	.L7
 153              	.L5:
  36:PLL.c         ****             case 1:
  37:PLL.c         ****                 break;
  38:PLL.c         ****             case 4:
  39:PLL.c         ****                 us_dreh(-1, 90);
 154              		.loc 1 39 0
 155 0150 0000E0E3 		mvn	r0, #0
 156 0154 5A10A0E3 		mov	r1, #90
 157 0158 FEFFFFEB 		bl	us_dreh
 158              	.LVL11:
  40:PLL.c         ****                 break;
 159              		.loc 1 40 0
 160 015c 920100EA 		b	.L9
 161              	.L7:
  41:PLL.c         ****             case 3:
  42:PLL.c         ****                 us_dreh(-1, 180);
 162              		.loc 1 42 0
 163 0160 0000E0E3 		mvn	r0, #0
 164 0164 B410A0E3 		mov	r1, #180
 165 0168 FEFFFFEB 		bl	us_dreh
 166              	.LVL12:
  43:PLL.c         ****                 break;
 167              		.loc 1 43 0
 168 016c 8E0100EA 		b	.L9
 169              	.L6:
  44:PLL.c         ****             case 5:
  45:PLL.c         ****                 us_dreh(1, 90);
 170              		.loc 1 45 0
 171 0170 0100A0E3 		mov	r0, #1
 172 0174 5A10A0E3 		mov	r1, #90
 173 0178 FEFFFFEB 		bl	us_dreh
 174              	.LVL13:
  46:PLL.c         ****                 break;
 175              		.loc 1 46 0
 176 017c 8A0100EA 		b	.L9
 177              	.L3:
  47:PLL.c         ****             default:
  48:PLL.c         ****                 break;
  49:PLL.c         ****         }
  50:PLL.c         ****         
  51:PLL.c         ****     }else{
  52:PLL.c         ****     wuerfel_print(1);        /////////////
 178              		.loc 1 52 0
 179 0180 0100A0E3 		mov	r0, #1
 180 0184 FEFFFFEB 		bl	wuerfel_print
 181              	.LVL14:
  53:PLL.c         ****     for (i=0; i<=3; i++)
 182              		.loc 1 53 0
 183 0188 0040A0E3 		mov	r4, #0
  54:PLL.c         ****     {
  55:PLL.c         ****         change_topface(2);
 184              		.loc 1 55 0
 185 018c 0270A0E3 		mov	r7, #2
  56:PLL.c         ****         change_rightface(Color_col[(i+1)%4]);
  57:PLL.c         ****         wuerfel_print(1);////////////////
 186              		.loc 1 57 0
 187 0190 0160A0E3 		mov	r6, #1
  58:PLL.c         ****         if(color_data[1][0]==color_data[1][2])
 188              		.loc 1 58 0
 189 0194 34569FE5 		ldr	r5, .L34+4
 190              	.LVL15:
 191              	.L24:
  55:PLL.c         ****         change_rightface(Color_col[(i+1)%4]);
 192              		.loc 1 55 0
 193 0198 0700A0E1 		mov	r0, r7
 194 019c FEFFFFEB 		bl	change_topface
 195              	.LVL16:
  56:PLL.c         ****         change_rightface(Color_col[(i+1)%4]);
 196              		.loc 1 56 0
 197 01a0 014084E2 		add	r4, r4, #1
 198              	.LVL17:
 199 01a4 C43FA0E1 		mov	r3, r4, asr #31
 200 01a8 233FA0E1 		mov	r3, r3, lsr #30
 201 01ac 032084E0 		add	r2, r4, r3
 202 01b0 032002E2 		and	r2, r2, #3
 203 01b4 023063E0 		rsb	r3, r3, r2
 204 01b8 18208DE2 		add	r2, sp, #24
 205 01bc 033182E0 		add	r3, r2, r3, asl #2
 206 01c0 100013E5 		ldr	r0, [r3, #-16]
 207 01c4 FEFFFFEB 		bl	change_rightface
 208              	.LVL18:
  57:PLL.c         ****         if(color_data[1][0]==color_data[1][2])
 209              		.loc 1 57 0
 210 01c8 0600A0E1 		mov	r0, r6
 211 01cc FEFFFFEB 		bl	wuerfel_print
 212              	.LVL19:
 213              		.loc 1 58 0
 214 01d0 0920D5E5 		ldrb	r2, [r5, #9]	@ zero_extendqisi2
 215 01d4 0B30D5E5 		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 216 01d8 030052E1 		cmp	r2, r3
 217 01dc 7800001A 		bne	.L10
 218 01e0 04708DE2 		add	r7, sp, #4
 219 01e4 0140A0E3 		mov	r4, #1
 220              	.LVL20:
  59:PLL.c         ****         {
  60:PLL.c         ****             for (j=0; j<=3; j++)
  61:PLL.c         ****             {
  62:PLL.c         ****                 if ((color_data[1][0]==color_data[Color_col[j]][4])&&(color_data[1][2]==color_data[
 221              		.loc 1 62 0
 222 01e8 E0559FE5 		ldr	r5, .L34+4
 223              	.LBB2:
  63:PLL.c         ****                 {
  64:PLL.c         ****                     int color_c;
  65:PLL.c         ****                     color_c=color_data[Color_col[j]][4];
  66:PLL.c         ****                     switch (j)
  67:PLL.c         ****                     {
  68:PLL.c         ****                         case 0:
  69:PLL.c         ****                             change_rightface(color_c);
  70:PLL.c         ****                             wuerfel_print(1);/////////////////
  71:PLL.c         ****                             break;
  72:PLL.c         ****                         case 1:
  73:PLL.c         ****                             us_dreh(1, 90);
  74:PLL.c         ****                             change_topface(2);
  75:PLL.c         ****                             change_rightface(color_c);
  76:PLL.c         ****                             wuerfel_print(1);/////////////////
  77:PLL.c         ****                             break;
  78:PLL.c         ****                         case 2:
  79:PLL.c         ****                             us_dreh(1, 180);
 224              		.loc 1 79 0
 225 01ec 0480A0E1 		mov	r8, r4
 226 01f0 B4B0A0E3 		mov	fp, #180
  80:PLL.c         ****                             change_topface(2);
 227              		.loc 1 80 0
 228 01f4 0290A0E3 		mov	r9, #2
  73:PLL.c         ****                             change_topface(2);
 229              		.loc 1 73 0
 230 01f8 5AA0A0E3 		mov	r10, #90
 231 01fc 000000EA 		b	.L11
 232              	.L20:
 233 0200 014084E2 		add	r4, r4, #1
 234              	.L11:
 235 0204 012044E2 		sub	r2, r4, #1
 236              	.LVL21:
 237              	.LBE2:
  62:PLL.c         ****                 {
 238              		.loc 1 62 0
 239 0208 0960D5E5 		ldrb	r6, [r5, #9]	@ zero_extendqisi2
 240 020c 0430B7E5 		ldr	r3, [r7, #4]!
 241 0210 833183E0 		add	r3, r3, r3, asl #3
 242 0214 033085E0 		add	r3, r5, r3
 243 0218 0430D3E5 		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 244 021c 060053E1 		cmp	r3, r6
 245 0220 2F00001A 		bne	.L12
  62:PLL.c         ****                 {
 246              		.loc 1 62 0 is_stmt 0 discriminator 1
 247 0224 0B30D5E5 		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 248 0228 060053E1 		cmp	r3, r6
 249 022c 2C00001A 		bne	.L12
 250              	.LBB3:
  65:PLL.c         ****                     switch (j)
 251              		.loc 1 65 0 is_stmt 1
 252 0230 04608DE5 		str	r6, [sp, #4]
 253              	.LVL22:
  66:PLL.c         ****                     {
 254              		.loc 1 66 0
 255 0234 030052E3 		cmp	r2, #3
 256 0238 02F19F97 		ldrls	pc, [pc, r2, asl #2]
 257 023c 280000EA 		b	.L12
 258              	.L14:
 259 0240 50020000 		.word	.L13
 260 0244 64020000 		.word	.L15
 261 0248 8C020000 		.word	.L16
 262 024c BC020000 		.word	.L17
 263              	.L13:
  69:PLL.c         ****                             wuerfel_print(1);/////////////////
 264              		.loc 1 69 0
 265 0250 0600A0E1 		mov	r0, r6
 266 0254 FEFFFFEB 		bl	change_rightface
 267              	.LVL23:
  70:PLL.c         ****                             break;
 268              		.loc 1 70 0
 269 0258 0800A0E1 		mov	r0, r8
 270 025c FEFFFFEB 		bl	wuerfel_print
 271              	.LVL24:
  71:PLL.c         ****                         case 1:
 272              		.loc 1 71 0
 273 0260 E6FFFFEA 		b	.L20
 274              	.LVL25:
 275              	.L15:
  73:PLL.c         ****                             change_topface(2);
 276              		.loc 1 73 0
 277 0264 0800A0E1 		mov	r0, r8
 278 0268 0A10A0E1 		mov	r1, r10
 279 026c FEFFFFEB 		bl	us_dreh
 280              	.LVL26:
  74:PLL.c         ****                             change_rightface(color_c);
 281              		.loc 1 74 0
 282 0270 0900A0E1 		mov	r0, r9
 283 0274 FEFFFFEB 		bl	change_topface
 284              	.LVL27:
  75:PLL.c         ****                             wuerfel_print(1);/////////////////
 285              		.loc 1 75 0
 286 0278 0600A0E1 		mov	r0, r6
 287 027c FEFFFFEB 		bl	change_rightface
 288              	.LVL28:
  76:PLL.c         ****                             break;
 289              		.loc 1 76 0
 290 0280 0800A0E1 		mov	r0, r8
 291 0284 FEFFFFEB 		bl	wuerfel_print
 292              	.LVL29:
  77:PLL.c         ****                         case 2:
 293              		.loc 1 77 0
 294 0288 DCFFFFEA 		b	.L20
 295              	.LVL30:
 296              	.L16:
  79:PLL.c         ****                             change_topface(2);
 297              		.loc 1 79 0
 298 028c 0800A0E1 		mov	r0, r8
 299 0290 0B10A0E1 		mov	r1, fp
 300 0294 FEFFFFEB 		bl	us_dreh
 301              	.LVL31:
 302              		.loc 1 80 0
 303 0298 0900A0E1 		mov	r0, r9
 304 029c FEFFFFEB 		bl	change_topface
 305              	.LVL32:
  81:PLL.c         ****                             wuerfel_print(1);
 306              		.loc 1 81 0
 307 02a0 0800A0E1 		mov	r0, r8
 308 02a4 FEFFFFEB 		bl	wuerfel_print
 309              	.LVL33:
  82:PLL.c         ****                             change_rightface(color_c);
 310              		.loc 1 82 0
 311 02a8 0600A0E1 		mov	r0, r6
 312 02ac FEFFFFEB 		bl	change_rightface
 313              	.LVL34:
  83:PLL.c         ****                             wuerfel_print(1);////////////////
 314              		.loc 1 83 0
 315 02b0 0800A0E1 		mov	r0, r8
 316 02b4 FEFFFFEB 		bl	wuerfel_print
 317              	.LVL35:
  84:PLL.c         ****                             break;
 318              		.loc 1 84 0
 319 02b8 D0FFFFEA 		b	.L20
 320              	.LVL36:
 321              	.L17:
  85:PLL.c         ****                         case 3:
  86:PLL.c         ****                             us_dreh(-1, 90);
 322              		.loc 1 86 0
 323 02bc 0000E0E3 		mvn	r0, #0
 324 02c0 5A10A0E3 		mov	r1, #90
 325 02c4 FEFFFFEB 		bl	us_dreh
 326              	.LVL37:
  87:PLL.c         ****                             change_topface(2);
 327              		.loc 1 87 0
 328 02c8 0200A0E3 		mov	r0, #2
 329 02cc FEFFFFEB 		bl	change_topface
 330              	.LVL38:
  88:PLL.c         ****                             change_rightface(color_c);
 331              		.loc 1 88 0
 332 02d0 04009DE5 		ldr	r0, [sp, #4]
 333 02d4 FEFFFFEB 		bl	change_rightface
 334              	.LVL39:
  89:PLL.c         ****                             wuerfel_print(1);////////////////
 335              		.loc 1 89 0
 336 02d8 0100A0E3 		mov	r0, #1
 337 02dc FEFFFFEB 		bl	wuerfel_print
 338              	.LVL40:
 339 02e0 010000EA 		b	.L19
 340              	.LVL41:
 341              	.L12:
 342              	.LBE3:
  60:PLL.c         ****             {
 343              		.loc 1 60 0
 344 02e4 030054E3 		cmp	r4, #3
 345 02e8 C4FFFFDA 		ble	.L20
 346              	.LVL42:
 347              	.L19:
  90:PLL.c         ****                             break;
  91:PLL.c         ****                         default:
  92:PLL.c         ****                             break;
  93:PLL.c         ****                     }
  94:PLL.c         ****                 }
  95:PLL.c         ****             }
  96:PLL.c         ****             wuerfel_print(1);
 348              		.loc 1 96 0
 349 02ec 0100A0E3 		mov	r0, #1
 350 02f0 FEFFFFEB 		bl	wuerfel_print
 351              	.LVL43:
  97:PLL.c         ****             rs_dreh(1, 180);
 352              		.loc 1 97 0
 353 02f4 0100A0E3 		mov	r0, #1
 354 02f8 B410A0E3 		mov	r1, #180
 355 02fc FEFFFFEB 		bl	rs_dreh
 356              	.LVL44:
  98:PLL.c         ****             fs_dreh(1, 180);
 357              		.loc 1 98 0
 358 0300 0100A0E3 		mov	r0, #1
 359 0304 B410A0E3 		mov	r1, #180
 360 0308 FEFFFFEB 		bl	fs_dreh
 361              	.LVL45:
  99:PLL.c         ****             rs_dreh(-1, 90);
 362              		.loc 1 99 0
 363 030c 0000E0E3 		mvn	r0, #0
 364 0310 5A10A0E3 		mov	r1, #90
 365 0314 FEFFFFEB 		bl	rs_dreh
 366              	.LVL46:
 100:PLL.c         ****             rs_dreh(-1, 90);
 367              		.loc 1 100 0
 368 0318 0000E0E3 		mvn	r0, #0
 369 031c 5A10A0E3 		mov	r1, #90
 370 0320 FEFFFFEB 		bl	rs_dreh
 371              	.LVL47:
 101:PLL.c         ****             ls_dreh(1, 90);
 372              		.loc 1 101 0
 373 0324 0100A0E3 		mov	r0, #1
 374 0328 5A10A0E3 		mov	r1, #90
 375 032c FEFFFFEB 		bl	ls_dreh
 376              	.LVL48:
 102:PLL.c         ****             ls_dreh(1, 180);
 377              		.loc 1 102 0
 378 0330 0100A0E3 		mov	r0, #1
 379 0334 B410A0E3 		mov	r1, #180
 380 0338 FEFFFFEB 		bl	ls_dreh
 381              	.LVL49:
 103:PLL.c         ****             rs_dreh(-1, 90);
 382              		.loc 1 103 0
 383 033c 0000E0E3 		mvn	r0, #0
 384 0340 5A10A0E3 		mov	r1, #90
 385 0344 FEFFFFEB 		bl	rs_dreh
 386              	.LVL50:
 104:PLL.c         ****             rs_dreh(1, 90);
 387              		.loc 1 104 0
 388 0348 0100A0E3 		mov	r0, #1
 389 034c 5A10A0E3 		mov	r1, #90
 390 0350 FEFFFFEB 		bl	rs_dreh
 391              	.LVL51:
 105:PLL.c         ****             ls_dreh(-1, 90);
 392              		.loc 1 105 0
 393 0354 0000E0E3 		mvn	r0, #0
 394 0358 5A10A0E3 		mov	r1, #90
 395 035c FEFFFFEB 		bl	ls_dreh
 396              	.LVL52:
 106:PLL.c         ****             change_topface(2);
 397              		.loc 1 106 0
 398 0360 0200A0E3 		mov	r0, #2
 399 0364 FEFFFFEB 		bl	change_topface
 400              	.LVL53:
 107:PLL.c         ****             change_rightface(4);
 401              		.loc 1 107 0
 402 0368 0400A0E3 		mov	r0, #4
 403 036c FEFFFFEB 		bl	change_rightface
 404              	.LVL54:
 108:PLL.c         ****             switch (color_data[1][0]) {
 405              		.loc 1 108 0
 406 0370 58349FE5 		ldr	r3, .L34+4
 407 0374 0930D3E5 		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 408 0378 040053E3 		cmp	r3, #4
 409 037c 0400000A 		beq	.L21
 410 0380 050053E3 		cmp	r3, #5
 411 0384 0A00000A 		beq	.L22
 412 0388 030053E3 		cmp	r3, #3
 413 038c 0601001A 		bne	.L9
 414 0390 030000EA 		b	.L23
 415              	.L21:
 109:PLL.c         ****                 case 1:
 110:PLL.c         ****                     break;
 111:PLL.c         ****                 case 4:
 112:PLL.c         ****                     us_dreh(-1, 90);
 416              		.loc 1 112 0
 417 0394 0000E0E3 		mvn	r0, #0
 418 0398 5A10A0E3 		mov	r1, #90
 419 039c FEFFFFEB 		bl	us_dreh
 420              	.LVL55:
 113:PLL.c         ****                     break;
 421              		.loc 1 113 0
 422 03a0 010100EA 		b	.L9
 423              	.L23:
 114:PLL.c         ****                 case 3:
 115:PLL.c         ****                     us_dreh(-1, 180);
 424              		.loc 1 115 0
 425 03a4 0000E0E3 		mvn	r0, #0
 426 03a8 B410A0E3 		mov	r1, #180
 427 03ac FEFFFFEB 		bl	us_dreh
 428              	.LVL56:
 116:PLL.c         ****                     break;
 429              		.loc 1 116 0
 430 03b0 FD0000EA 		b	.L9
 431              	.L22:
 117:PLL.c         ****                 case 5:
 118:PLL.c         ****                     us_dreh(1, 90);
 432              		.loc 1 118 0
 433 03b4 0100A0E3 		mov	r0, #1
 434 03b8 5A10A0E3 		mov	r1, #90
 435 03bc FEFFFFEB 		bl	us_dreh
 436              	.LVL57:
 119:PLL.c         ****                     break;
 437              		.loc 1 119 0
 438 03c0 F90000EA 		b	.L9
 439              	.LVL58:
 440              	.L10:
  53:PLL.c         ****     {
 441              		.loc 1 53 0 discriminator 1
 442 03c4 040054E3 		cmp	r4, #4
 443 03c8 72FFFF1A 		bne	.L24
 444 03cc F60000EA 		b	.L9
 445              	.LVL59:
 446              	.L32:
 120:PLL.c         ****                 default:
 121:PLL.c         ****                     break;
 122:PLL.c         ****             }
 123:PLL.c         ****             break;
 124:PLL.c         ****         }
 125:PLL.c         ****     }
 126:PLL.c         **** }
 127:PLL.c         ****     for (i=0; i<=3; i++) {
 128:PLL.c         ****         change_topface(2);
 447              		.loc 1 128 0
 448 03d0 0600A0E1 		mov	r0, r6
 449 03d4 FEFFFFEB 		bl	change_topface
 450              	.LVL60:
 129:PLL.c         ****         change_rightface(Color_col[(i+1)%4]);
 451              		.loc 1 129 0
 452 03d8 015085E2 		add	r5, r5, #1
 453              	.LVL61:
 454 03dc C53FA0E1 		mov	r3, r5, asr #31
 455 03e0 233FA0E1 		mov	r3, r3, lsr #30
 456 03e4 032085E0 		add	r2, r5, r3
 457 03e8 032002E2 		and	r2, r2, #3
 458 03ec 023063E0 		rsb	r3, r3, r2
 459 03f0 18C08DE2 		add	ip, sp, #24
 460 03f4 03318CE0 		add	r3, ip, r3, asl #2
 461 03f8 100013E5 		ldr	r0, [r3, #-16]
 462 03fc FEFFFFEB 		bl	change_rightface
 463              	.LVL62:
 130:PLL.c         ****         if ((color_data[1][0]==color_data[1][1]) && (color_data[1][1]==color_data[1][2])&&(color_da
 464              		.loc 1 130 0
 465 0400 0930D4E5 		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 466 0404 0A20D4E5 		ldrb	r2, [r4, #10]	@ zero_extendqisi2
 467 0408 030052E1 		cmp	r2, r3
 468 040c 6300001A 		bne	.L25
 469              		.loc 1 130 0 is_stmt 0 discriminator 1
 470 0410 0B20D4E5 		ldrb	r2, [r4, #11]	@ zero_extendqisi2
 471 0414 030052E1 		cmp	r2, r3
 472 0418 6000001A 		bne	.L25
 473 041c 0D20D4E5 		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 474 0420 030052E1 		cmp	r2, r3
 475 0424 5D00001A 		bne	.L25
 131:PLL.c         ****                 drehen(1);
 476              		.loc 1 131 0 is_stmt 1
 477 0428 0700A0E1 		mov	r0, r7
 478 042c FEFFFFEB 		bl	drehen
 479              	.LVL63:
 132:PLL.c         ****                 drehen(1);
 480              		.loc 1 132 0
 481 0430 0700A0E1 		mov	r0, r7
 482 0434 FEFFFFEB 		bl	drehen
 483              	.LVL64:
 133:PLL.c         ****             if ((color_data[1][1]==color_data[5][4])&&(color_data[5][7]==color_data[4][4])&&(color_
 484              		.loc 1 133 0
 485 0438 0A30D4E5 		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 486 043c 3120D4E5 		ldrb	r2, [r4, #49]	@ zero_extendqisi2
 487 0440 020053E1 		cmp	r3, r2
 488 0444 2900001A 		bne	.L26
 489              		.loc 1 133 0 is_stmt 0 discriminator 1
 490 0448 3400D4E5 		ldrb	r0, [r4, #52]	@ zero_extendqisi2
 491 044c 2810D4E5 		ldrb	r1, [r4, #40]	@ zero_extendqisi2
 492 0450 010050E1 		cmp	r0, r1
 493 0454 2500001A 		bne	.L26
 494 0458 2B00D4E5 		ldrb	r0, [r4, #43]	@ zero_extendqisi2
 495 045c 0D10D4E5 		ldrb	r1, [r4, #13]	@ zero_extendqisi2
 496 0460 010050E1 		cmp	r0, r1
 497 0464 2100001A 		bne	.L26
 134:PLL.c         ****                 rs_dreh(1, 90);
 498              		.loc 1 134 0 is_stmt 1
 499 0468 0100A0E3 		mov	r0, #1
 500 046c 5A10A0E3 		mov	r1, #90
 501 0470 FEFFFFEB 		bl	rs_dreh
 502              	.LVL65:
 135:PLL.c         ****                 rs_dreh(-1, 90);
 503              		.loc 1 135 0
 504 0474 0000E0E3 		mvn	r0, #0
 505 0478 5A10A0E3 		mov	r1, #90
 506 047c FEFFFFEB 		bl	rs_dreh
 507              	.LVL66:
 136:PLL.c         ****                 ls_dreh(1, 90);
 508              		.loc 1 136 0
 509 0480 0100A0E3 		mov	r0, #1
 510 0484 5A10A0E3 		mov	r1, #90
 511 0488 FEFFFFEB 		bl	ls_dreh
 512              	.LVL67:
 137:PLL.c         ****                 rs_dreh(1, 90);
 513              		.loc 1 137 0
 514 048c 0100A0E3 		mov	r0, #1
 515 0490 5A10A0E3 		mov	r1, #90
 516 0494 FEFFFFEB 		bl	rs_dreh
 517              	.LVL68:
 138:PLL.c         ****                 ls_dreh(1, 90);
 518              		.loc 1 138 0
 519 0498 0100A0E3 		mov	r0, #1
 520 049c 5A10A0E3 		mov	r1, #90
 521 04a0 FEFFFFEB 		bl	ls_dreh
 522              	.LVL69:
 139:PLL.c         ****                 rs_dreh(1, 90);
 523              		.loc 1 139 0
 524 04a4 0100A0E3 		mov	r0, #1
 525 04a8 5A10A0E3 		mov	r1, #90
 526 04ac FEFFFFEB 		bl	rs_dreh
 527              	.LVL70:
 140:PLL.c         ****                 ls_dreh(1, 90);
 528              		.loc 1 140 0
 529 04b0 0100A0E3 		mov	r0, #1
 530 04b4 5A10A0E3 		mov	r1, #90
 531 04b8 FEFFFFEB 		bl	ls_dreh
 532              	.LVL71:
 141:PLL.c         ****                 rs_dreh(-1, 90);
 533              		.loc 1 141 0
 534 04bc 0000E0E3 		mvn	r0, #0
 535 04c0 5A10A0E3 		mov	r1, #90
 536 04c4 FEFFFFEB 		bl	rs_dreh
 537              	.LVL72:
 142:PLL.c         ****                 ls_dreh(-1, 90);
 538              		.loc 1 142 0
 539 04c8 0000E0E3 		mvn	r0, #0
 540 04cc 5A10A0E3 		mov	r1, #90
 541 04d0 FEFFFFEB 		bl	ls_dreh
 542              	.LVL73:
 143:PLL.c         ****                 rs_dreh(-1, 90);
 543              		.loc 1 143 0
 544 04d4 0000E0E3 		mvn	r0, #0
 545 04d8 5A10A0E3 		mov	r1, #90
 546 04dc FEFFFFEB 		bl	rs_dreh
 547              	.LVL74:
 144:PLL.c         ****                 ls_dreh(1, 180);
 548              		.loc 1 144 0
 549 04e0 0100A0E3 		mov	r0, #1
 550 04e4 B410A0E3 		mov	r1, #180
 551 04e8 FEFFFFEB 		bl	ls_dreh
 552              	.LVL75:
 145:PLL.c         ****                 goto fertig;
 553              		.loc 1 145 0
 554 04ec B30000EA 		b	.L33
 555              	.L26:
 146:PLL.c         ****             }
 147:PLL.c         ****             
 148:PLL.c         ****             
 149:PLL.c         ****             if ((color_data[1][1]==color_data[4][4])&&(color_data[5][7]==color_data[1][4])&&(color_
 556              		.loc 1 149 0
 557 04f0 2810D4E5 		ldrb	r1, [r4, #40]	@ zero_extendqisi2
 558 04f4 030051E1 		cmp	r1, r3
 559 04f8 2800001A 		bne	.L25
 560              		.loc 1 149 0 is_stmt 0 discriminator 1
 561 04fc 3410D4E5 		ldrb	r1, [r4, #52]	@ zero_extendqisi2
 562 0500 0D30D4E5 		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 563 0504 030051E1 		cmp	r1, r3
 564 0508 2400001A 		bne	.L25
 565 050c 2B30D4E5 		ldrb	r3, [r4, #43]	@ zero_extendqisi2
 566 0510 020053E1 		cmp	r3, r2
 567 0514 2100001A 		bne	.L25
 150:PLL.c         ****                 rs_dreh(-1, 180);
 568              		.loc 1 150 0 is_stmt 1
 569 0518 0000E0E3 		mvn	r0, #0
 570 051c B410A0E3 		mov	r1, #180
 571 0520 FEFFFFEB 		bl	rs_dreh
 572              	.LVL76:
 151:PLL.c         ****                 rs_dreh(1, 90);
 573              		.loc 1 151 0
 574 0524 0100A0E3 		mov	r0, #1
 575 0528 5A10A0E3 		mov	r1, #90
 576 052c FEFFFFEB 		bl	rs_dreh
 577              	.LVL77:
 152:PLL.c         ****                 ls_dreh(1, 90);
 578              		.loc 1 152 0
 579 0530 0100A0E3 		mov	r0, #1
 580 0534 5A10A0E3 		mov	r1, #90
 581 0538 FEFFFFEB 		bl	ls_dreh
 582              	.LVL78:
 153:PLL.c         ****                 rs_dreh(1, 90);
 583              		.loc 1 153 0
 584 053c 0100A0E3 		mov	r0, #1
 585 0540 5A10A0E3 		mov	r1, #90
 586 0544 FEFFFFEB 		bl	rs_dreh
 587              	.LVL79:
 154:PLL.c         ****                 ls_dreh(-1, 90);
 588              		.loc 1 154 0
 589 0548 0000E0E3 		mvn	r0, #0
 590 054c 5A10A0E3 		mov	r1, #90
 591 0550 FEFFFFEB 		bl	ls_dreh
 592              	.LVL80:
 155:PLL.c         ****                 rs_dreh(-1, 90);
 593              		.loc 1 155 0
 594 0554 0000E0E3 		mvn	r0, #0
 595 0558 5A10A0E3 		mov	r1, #90
 596 055c FEFFFFEB 		bl	rs_dreh
 597              	.LVL81:
 156:PLL.c         ****                 ls_dreh(-1, 90);
 598              		.loc 1 156 0
 599 0560 0000E0E3 		mvn	r0, #0
 600 0564 5A10A0E3 		mov	r1, #90
 601 0568 FEFFFFEB 		bl	ls_dreh
 602              	.LVL82:
 157:PLL.c         ****                 rs_dreh(-1, 90);
 603              		.loc 1 157 0
 604 056c 0000E0E3 		mvn	r0, #0
 605 0570 5A10A0E3 		mov	r1, #90
 606 0574 FEFFFFEB 		bl	rs_dreh
 607              	.LVL83:
 158:PLL.c         ****                 ls_dreh(-1, 90);
 608              		.loc 1 158 0
 609 0578 0000E0E3 		mvn	r0, #0
 610 057c 5A10A0E3 		mov	r1, #90
 611 0580 FEFFFFEB 		bl	ls_dreh
 612              	.LVL84:
 159:PLL.c         ****                 rs_dreh(1, 90);
 613              		.loc 1 159 0
 614 0584 0100A0E3 		mov	r0, #1
 615 0588 5A10A0E3 		mov	r1, #90
 616 058c FEFFFFEB 		bl	rs_dreh
 617              	.LVL85:
 160:PLL.c         ****                 ls_dreh(-1, 90);
 618              		.loc 1 160 0
 619 0590 0000E0E3 		mvn	r0, #0
 620 0594 5A10A0E3 		mov	r1, #90
 621 0598 FEFFFFEB 		bl	ls_dreh
 622              	.LVL86:
 161:PLL.c         ****                 goto fertig;
 623              		.loc 1 161 0
 624 059c 870000EA 		b	.L33
 625              	.L25:
 162:PLL.c         ****             }
 163:PLL.c         ****         
 164:PLL.c         ****         }
 165:PLL.c         ****         
 166:PLL.c         ****         if ((color_data[1][1]==color_data[3][4])&&(color_data[4][7]==color_data[5][4])&&(color_data
 626              		.loc 1 166 0
 627 05a0 0A30D4E5 		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 628 05a4 1F20D4E5 		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 629 05a8 020053E1 		cmp	r3, r2
 630 05ac 2D00001A 		bne	.L28
 631              		.loc 1 166 0 is_stmt 0 discriminator 1
 632 05b0 2B00D4E5 		ldrb	r0, [r4, #43]	@ zero_extendqisi2
 633 05b4 3110D4E5 		ldrb	r1, [r4, #49]	@ zero_extendqisi2
 634 05b8 010050E1 		cmp	r0, r1
 635 05bc 2900001A 		bne	.L28
 636 05c0 2200D4E5 		ldrb	r0, [r4, #34]	@ zero_extendqisi2
 637 05c4 0D10D4E5 		ldrb	r1, [r4, #13]	@ zero_extendqisi2
 638 05c8 010050E1 		cmp	r0, r1
 639 05cc 2500001A 		bne	.L28
 640 05d0 3400D4E5 		ldrb	r0, [r4, #52]	@ zero_extendqisi2
 641 05d4 2810D4E5 		ldrb	r1, [r4, #40]	@ zero_extendqisi2
 642 05d8 010050E1 		cmp	r0, r1
 643 05dc 2100001A 		bne	.L28
 167:PLL.c         ****             ls_dreh(1, 180);
 644              		.loc 1 167 0 is_stmt 1
 645 05e0 0100A0E3 		mov	r0, #1
 646 05e4 B410A0E3 		mov	r1, #180
 647 05e8 FEFFFFEB 		bl	ls_dreh
 648              	.LVL87:
 168:PLL.c         ****             us_dreh(1, 180);
 649              		.loc 1 168 0
 650 05ec 0100A0E3 		mov	r0, #1
 651 05f0 B410A0E3 		mov	r1, #180
 652 05f4 FEFFFFEB 		bl	us_dreh
 653              	.LVL88:
 169:PLL.c         ****             ls_dreh(1, 90);
 654              		.loc 1 169 0
 655 05f8 0100A0E3 		mov	r0, #1
 656 05fc 5A10A0E3 		mov	r1, #90
 657 0600 FEFFFFEB 		bl	ls_dreh
 658              	.LVL89:
 170:PLL.c         ****             ls_dreh(1, 180);
 659              		.loc 1 170 0
 660 0604 0100A0E3 		mov	r0, #1
 661 0608 B410A0E3 		mov	r1, #180
 662 060c FEFFFFEB 		bl	ls_dreh
 663              	.LVL90:
 171:PLL.c         ****             us_dreh(1, 180);
 664              		.loc 1 171 0
 665 0610 0100A0E3 		mov	r0, #1
 666 0614 B410A0E3 		mov	r1, #180
 667 0618 FEFFFFEB 		bl	us_dreh
 668              	.LVL91:
 172:PLL.c         ****             rs_dreh(1, 180);
 669              		.loc 1 172 0
 670 061c 0100A0E3 		mov	r0, #1
 671 0620 B410A0E3 		mov	r1, #180
 672 0624 FEFFFFEB 		bl	rs_dreh
 673              	.LVL92:
 173:PLL.c         ****             ls_dreh(1, 180);
 674              		.loc 1 173 0
 675 0628 0100A0E3 		mov	r0, #1
 676 062c B410A0E3 		mov	r1, #180
 677 0630 FEFFFFEB 		bl	ls_dreh
 678              	.LVL93:
 174:PLL.c         ****             us_dreh(1, 180);
 679              		.loc 1 174 0
 680 0634 0100A0E3 		mov	r0, #1
 681 0638 B410A0E3 		mov	r1, #180
 682 063c FEFFFFEB 		bl	us_dreh
 683              	.LVL94:
 175:PLL.c         ****             rs_dreh(1, 90);
 684              		.loc 1 175 0
 685 0640 0100A0E3 		mov	r0, #1
 686 0644 5A10A0E3 		mov	r1, #90
 687 0648 FEFFFFEB 		bl	rs_dreh
 688              	.LVL95:
 176:PLL.c         ****             ls_dreh(1, 180);
 689              		.loc 1 176 0
 690 064c 0100A0E3 		mov	r0, #1
 691 0650 B410A0E3 		mov	r1, #180
 692 0654 FEFFFFEB 		bl	ls_dreh
 693              	.LVL96:
 177:PLL.c         ****             us_dreh(1, 180);
 694              		.loc 1 177 0
 695 0658 0100A0E3 		mov	r0, #1
 696 065c B410A0E3 		mov	r1, #180
 697 0660 FEFFFFEB 		bl	us_dreh
 698              	.LVL97:
 178:PLL.c         ****             goto fertig;
 699              		.loc 1 178 0
 700 0664 550000EA 		b	.L33
 701              	.L28:
 179:PLL.c         ****         }
 180:PLL.c         ****         if ((color_data[1][1]==color_data[4][4])&&(color_data[4][7]==color_data[1][4])&&(color_data
 702              		.loc 1 180 0
 703 0668 2810D4E5 		ldrb	r1, [r4, #40]	@ zero_extendqisi2
 704 066c 030051E1 		cmp	r1, r3
 705 0670 0C00001A 		bne	.L29
 706              		.loc 1 180 0 is_stmt 0 discriminator 1
 707 0674 2B10D4E5 		ldrb	r1, [r4, #43]	@ zero_extendqisi2
 708 0678 0D30D4E5 		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 709 067c 030051E1 		cmp	r1, r3
 710 0680 0800001A 		bne	.L29
 711 0684 2210D4E5 		ldrb	r1, [r4, #34]	@ zero_extendqisi2
 712 0688 3130D4E5 		ldrb	r3, [r4, #49]	@ zero_extendqisi2
 713 068c 030051E1 		cmp	r1, r3
 714 0690 0400001A 		bne	.L29
 715 0694 3430D4E5 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 716 0698 020053E1 		cmp	r3, r2
 717 069c 0100001A 		bne	.L29
 181:PLL.c         ****             drehen(1);
 718              		.loc 1 181 0 is_stmt 1
 719 06a0 0700A0E1 		mov	r0, r7
 720 06a4 FEFFFFEB 		bl	drehen
 721              	.LVL98:
 722              	.L29:
 182:PLL.c         ****         }
 183:PLL.c         ****         
 184:PLL.c         ****         if ((color_data[1][1]==color_data[5][4])&&(color_data[4][7]==color_data[3][4])&&(color_data
 723              		.loc 1 184 0
 724 06a8 0A20D4E5 		ldrb	r2, [r4, #10]	@ zero_extendqisi2
 725 06ac 3130D4E5 		ldrb	r3, [r4, #49]	@ zero_extendqisi2
 726 06b0 030052E1 		cmp	r2, r3
 727 06b4 3900001A 		bne	.L30
 728              		.loc 1 184 0 is_stmt 0 discriminator 1
 729 06b8 2B20D4E5 		ldrb	r2, [r4, #43]	@ zero_extendqisi2
 730 06bc 1F30D4E5 		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 731 06c0 030052E1 		cmp	r2, r3
 732 06c4 3500001A 		bne	.L30
 733 06c8 2220D4E5 		ldrb	r2, [r4, #34]	@ zero_extendqisi2
 734 06cc 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 735 06d0 030052E1 		cmp	r2, r3
 736 06d4 3100001A 		bne	.L30
 737 06d8 3420D4E5 		ldrb	r2, [r4, #52]	@ zero_extendqisi2
 738 06dc 0D30D4E5 		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 739 06e0 030052E1 		cmp	r2, r3
 740 06e4 2D00001A 		bne	.L30
 185:PLL.c         ****             ls_dreh(1, 180);
 741              		.loc 1 185 0 is_stmt 1
 742 06e8 0100A0E3 		mov	r0, #1
 743 06ec B410A0E3 		mov	r1, #180
 744 06f0 FEFFFFEB 		bl	ls_dreh
 745              	.LVL99:
 186:PLL.c         ****             us_dreh(1, 180);
 746              		.loc 1 186 0
 747 06f4 0100A0E3 		mov	r0, #1
 748 06f8 B410A0E3 		mov	r1, #180
 749 06fc FEFFFFEB 		bl	us_dreh
 750              	.LVL100:
 187:PLL.c         ****             ls_dreh(1, 90);
 751              		.loc 1 187 0
 752 0700 0100A0E3 		mov	r0, #1
 753 0704 5A10A0E3 		mov	r1, #90
 754 0708 FEFFFFEB 		bl	ls_dreh
 755              	.LVL101:
 188:PLL.c         ****             ls_dreh(1, 180);
 756              		.loc 1 188 0
 757 070c 0100A0E3 		mov	r0, #1
 758 0710 B410A0E3 		mov	r1, #180
 759 0714 FEFFFFEB 		bl	ls_dreh
 760              	.LVL102:
 189:PLL.c         ****             us_dreh(1, 180);
 761              		.loc 1 189 0
 762 0718 0100A0E3 		mov	r0, #1
 763 071c B410A0E3 		mov	r1, #180
 764 0720 FEFFFFEB 		bl	us_dreh
 765              	.LVL103:
 190:PLL.c         ****             rs_dreh(1, 90);
 766              		.loc 1 190 0
 767 0724 0100A0E3 		mov	r0, #1
 768 0728 5A10A0E3 		mov	r1, #90
 769 072c FEFFFFEB 		bl	rs_dreh
 770              	.LVL104:
 191:PLL.c         ****             ls_dreh(1, 90);
 771              		.loc 1 191 0
 772 0730 0100A0E3 		mov	r0, #1
 773 0734 5A10A0E3 		mov	r1, #90
 774 0738 FEFFFFEB 		bl	ls_dreh
 775              	.LVL105:
 192:PLL.c         ****             us_dreh(-1, 90);
 776              		.loc 1 192 0
 777 073c 0000E0E3 		mvn	r0, #0
 778 0740 5A10A0E3 		mov	r1, #90
 779 0744 FEFFFFEB 		bl	us_dreh
 780              	.LVL106:
 193:PLL.c         ****             fs_dreh(1, 180);
 781              		.loc 1 193 0
 782 0748 0100A0E3 		mov	r0, #1
 783 074c B410A0E3 		mov	r1, #180
 784 0750 FEFFFFEB 		bl	fs_dreh
 785              	.LVL107:
 194:PLL.c         ****             ls_dreh(1, 180);
 786              		.loc 1 194 0
 787 0754 0100A0E3 		mov	r0, #1
 788 0758 B410A0E3 		mov	r1, #180
 789 075c FEFFFFEB 		bl	ls_dreh
 790              	.LVL108:
 195:PLL.c         ****             us_dreh(1, 180);
 791              		.loc 1 195 0
 792 0760 0100A0E3 		mov	r0, #1
 793 0764 B410A0E3 		mov	r1, #180
 794 0768 FEFFFFEB 		bl	us_dreh
 795              	.LVL109:
 196:PLL.c         ****             rs_dreh(1, 180);
 796              		.loc 1 196 0
 797 076c 0100A0E3 		mov	r0, #1
 798 0770 B410A0E3 		mov	r1, #180
 799 0774 FEFFFFEB 		bl	rs_dreh
 800              	.LVL110:
 197:PLL.c         ****             ls_dreh(-1, 90);
 801              		.loc 1 197 0
 802 0778 0000E0E3 		mvn	r0, #0
 803 077c 5A10A0E3 		mov	r1, #90
 804 0780 FEFFFFEB 		bl	ls_dreh
 805              	.LVL111:
 198:PLL.c         ****             us_dreh(1, 90);
 806              		.loc 1 198 0
 807 0784 0100A0E3 		mov	r0, #1
 808 0788 5A10A0E3 		mov	r1, #90
 809 078c FEFFFFEB 		bl	us_dreh
 810              	.LVL112:
 199:PLL.c         ****             bs_dreh(1, 180);
 811              		.loc 1 199 0
 812 0790 0100A0E3 		mov	r0, #1
 813 0794 B410A0E3 		mov	r1, #180
 814 0798 FEFFFFEB 		bl	bs_dreh
 815              	.LVL113:
 200:PLL.c         ****             goto fertig;
 816              		.loc 1 200 0
 817 079c 070000EA 		b	.L33
 818              	.L30:
 819              	.LVL114:
 127:PLL.c         ****         change_topface(2);
 820              		.loc 1 127 0 discriminator 1
 821 07a0 040055E3 		cmp	r5, #4
 822 07a4 09FFFF1A 		bne	.L32
 823              	.L27:
 824 07a8 040000EA 		b	.L33
 825              	.LVL115:
 826              	.L9:
  58:PLL.c         ****         {
 827              		.loc 1 58 0
 828 07ac 0050A0E3 		mov	r5, #0
 128:PLL.c         ****         change_rightface(Color_col[(i+1)%4]);
 829              		.loc 1 128 0
 830 07b0 0260A0E3 		mov	r6, #2
 130:PLL.c         ****                 drehen(1);
 831              		.loc 1 130 0
 832 07b4 14409FE5 		ldr	r4, .L34+4
 131:PLL.c         ****                 drehen(1);
 833              		.loc 1 131 0
 834 07b8 0170A0E3 		mov	r7, #1
 835 07bc 03FFFFEA 		b	.L32
 836              	.L33:
 201:PLL.c         ****         }
 202:PLL.c         ****         
 203:PLL.c         ****     }
 204:PLL.c         ****     
 205:PLL.c         **** fertig:return 0;
 206:PLL.c         **** }...
 837              		.loc 1 206 0
 838 07c0 0000A0E3 		mov	r0, #0
 839 07c4 1CD08DE2 		add	sp, sp, #28
 840              		@ sp needed
 841 07c8 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 842              	.L35:
 843              		.align	2
 844              	.L34:
 845 07cc 00000000 		.word	.LANCHOR0
 846 07d0 00000000 		.word	color_data
 847              		.cfi_endproc
 848              	.LFE11:
 849              		.fnend
 851              		.section	.rodata
 852              		.align	2
 853              	.LANCHOR0 = . + 0
 854              	.LC0:
 855 0000 01000000 		.word	1
 856 0004 04000000 		.word	4
 857 0008 03000000 		.word	3
 858 000c 05000000 		.word	5
 859              		.text
 860              	.Letext0:
 861              		.file 2 "/usr/local/carlson-minot/crosscompilers/lib/gcc/arm-none-linux-gnueabi/4.8.3/include/stdd
 862              		.file 3 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 863              		.file 4 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 864              		.file 5 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 865              		.file 6 "main.h"
 866              		.file 7 "print_mode.h"
 867              		.file 8 "Side_dreh.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 PLL.c
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbwmeef.s:16     .text:0000000000000000 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbwmeef.s:19     .text:0000000000000000 PLL
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbwmeef.s:259    .text:0000000000000240 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbwmeef.s:265    .text:0000000000000250 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbwmeef.s:845    .text:00000000000007cc $d
                       .ARM.exidx:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccbwmeef.s:852    .rodata:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
change_topface
change_rightface
rs_dreh
fs_dreh
ls_dreh
us_dreh
wuerfel_print
drehen
bs_dreh
color_data
__aeabi_unwind_cpp_pr0
