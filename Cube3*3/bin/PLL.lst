   1              		.arch armv5te
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"PLL.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	PLL
  19              	PLL:
  20              		.fnstart
  21              	.LFB11:
  22              		.file 1 "PLL.c"
   1:PLL.c         **** //
   2:PLL.c         **** //  PLL.c
   3:PLL.c         **** //  Cube3*3
   4:PLL.c         **** //
   5:PLL.c         **** //  Created by Ryoma on 20.12.15.
   6:PLL.c         **** //  Copyright Â© 2015 Chunxia Yang. All rights reserved.
   7:PLL.c         **** //
   8:PLL.c         **** 
   9:PLL.c         **** #include "PLL.h"
  10:PLL.c         **** #include "Color_search.h"
  11:PLL.c         **** #include "Side_dreh.h"
  12:PLL.c         **** #include "print_mode.h"
  13:PLL.c         **** #include "main.h"
  14:PLL.c         **** 
  15:PLL.c         **** int PLL()
  16:PLL.c         **** {
  23              		.loc 1 16 0
  24              		.cfi_startproc
  25              		@ args = 0, pretend = 0, frame = 24
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  28              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  29              		.cfi_def_cfa_offset 36
  30              		.cfi_offset 4, -36
  31              		.cfi_offset 5, -32
  32              		.cfi_offset 6, -28
  33              		.cfi_offset 7, -24
  34              		.cfi_offset 8, -20
  35              		.cfi_offset 9, -16
  36              		.cfi_offset 10, -12
  37              		.cfi_offset 11, -8
  38              		.cfi_offset 14, -4
  39              		.pad #28
  40 0004 1CD04DE2 		sub	sp, sp, #28
  41              		.cfi_def_cfa_offset 64
  17:PLL.c         ****     change_topface(2);
  42              		.loc 1 17 0
  43 0008 0200A0E3 		mov	r0, #2
  44 000c FEFFFFEB 		bl	change_topface
  45              	.LVL0:
  18:PLL.c         ****     change_rightface(4);
  46              		.loc 1 18 0
  47 0010 0400A0E3 		mov	r0, #4
  48 0014 FEFFFFEB 		bl	change_rightface
  49              	.LVL1:
  19:PLL.c         ****     int i,j;
  20:PLL.c         ****     int Color_col[4]={1,4,3,5};
  50              		.loc 1 20 0
  51 0018 7C379FE5 		ldr	r3, .L35
  52 001c 0F0093E8 		ldmia	r3, {r0, r1, r2, r3}
  53 0020 18C08DE2 		add	ip, sp, #24
  54 0024 0F000CE9 		stmdb	ip, {r0, r1, r2, r3}
  21:PLL.c         ****     
  22:PLL.c         ****     if ((color_data[1][0]!=color_data[1][2])&&(color_data[5][6]!=color_data[5][8])&&(color_data[3][
  55              		.loc 1 22 0
  56 0028 70379FE5 		ldr	r3, .L35+4
  57 002c 0920D3E5 		ldrb	r2, [r3, #9]	@ zero_extendqisi2
  58 0030 0B30D3E5 		ldrb	r3, [r3, #11]	@ zero_extendqisi2
  59 0034 020053E1 		cmp	r3, r2
  60 0038 2E00000A 		beq	.L2
  61              		.loc 1 22 0 is_stmt 0 discriminator 1
  62 003c 5C379FE5 		ldr	r3, .L35+4
  63 0040 3320D3E5 		ldrb	r2, [r3, #51]	@ zero_extendqisi2
  64 0044 3530D3E5 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
  65 0048 030052E1 		cmp	r2, r3
  66 004c CB01000A 		beq	.L3
  67 0050 48379FE5 		ldr	r3, .L35+4
  68 0054 2120D3E5 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
  69 0058 2330D3E5 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
  70 005c 030052E1 		cmp	r2, r3
  71 0060 C601000A 		beq	.L3
  72 0064 34379FE5 		ldr	r3, .L35+4
  73 0068 2A20D3E5 		ldrb	r2, [r3, #42]	@ zero_extendqisi2
  74 006c 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
  75 0070 030052E1 		cmp	r2, r3
  76 0074 C101000A 		beq	.L3
  23:PLL.c         ****         rs_dreh(1, 180);
  77              		.loc 1 23 0 is_stmt 1
  78 0078 0100A0E3 		mov	r0, #1
  79 007c B410A0E3 		mov	r1, #180
  80 0080 FEFFFFEB 		bl	rs_dreh
  81              	.LVL2:
  24:PLL.c         ****         fs_dreh(1, 180);
  82              		.loc 1 24 0
  83 0084 0100A0E3 		mov	r0, #1
  84 0088 B410A0E3 		mov	r1, #180
  85 008c FEFFFFEB 		bl	fs_dreh
  86              	.LVL3:
  25:PLL.c         ****         rs_dreh(-1, 90);
  87              		.loc 1 25 0
  88 0090 0000E0E3 		mvn	r0, #0
  89 0094 5A10A0E3 		mov	r1, #90
  90 0098 FEFFFFEB 		bl	rs_dreh
  91              	.LVL4:
  26:PLL.c         ****         rs_dreh(-1, 90);
  92              		.loc 1 26 0
  93 009c 0000E0E3 		mvn	r0, #0
  94 00a0 5A10A0E3 		mov	r1, #90
  95 00a4 FEFFFFEB 		bl	rs_dreh
  96              	.LVL5:
  27:PLL.c         ****         ls_dreh(1, 90);
  97              		.loc 1 27 0
  98 00a8 0100A0E3 		mov	r0, #1
  99 00ac 5A10A0E3 		mov	r1, #90
 100 00b0 FEFFFFEB 		bl	ls_dreh
 101              	.LVL6:
  28:PLL.c         ****         ls_dreh(1, 180);
 102              		.loc 1 28 0
 103 00b4 0100A0E3 		mov	r0, #1
 104 00b8 B410A0E3 		mov	r1, #180
 105 00bc FEFFFFEB 		bl	ls_dreh
 106              	.LVL7:
  29:PLL.c         ****         rs_dreh(-1, 90);
 107              		.loc 1 29 0
 108 00c0 0000E0E3 		mvn	r0, #0
 109 00c4 5A10A0E3 		mov	r1, #90
 110 00c8 FEFFFFEB 		bl	rs_dreh
 111              	.LVL8:
  30:PLL.c         ****         rs_dreh(1, 90);
 112              		.loc 1 30 0
 113 00cc 0100A0E3 		mov	r0, #1
 114 00d0 5A10A0E3 		mov	r1, #90
 115 00d4 FEFFFFEB 		bl	rs_dreh
 116              	.LVL9:
  31:PLL.c         ****         ls_dreh(-1, 90);
 117              		.loc 1 31 0
 118 00d8 0000E0E3 		mvn	r0, #0
 119 00dc 5A10A0E3 		mov	r1, #90
 120 00e0 FEFFFFEB 		bl	ls_dreh
 121              	.LVL10:
  32:PLL.c         ****     }
  33:PLL.c         ****     
  34:PLL.c         ****     if ((color_data[1][0]==color_data[1][2])&&(color_data[5][6]==color_data[5][8])&&(color_data[3][
 122              		.loc 1 34 0
 123 00e4 B4369FE5 		ldr	r3, .L35+4
 124 00e8 0920D3E5 		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 125 00ec 0B30D3E5 		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 126 00f0 020053E1 		cmp	r3, r2
 127 00f4 A101001A 		bne	.L3
 128              	.L2:
 129              		.loc 1 34 0 is_stmt 0 discriminator 1
 130 00f8 A0369FE5 		ldr	r3, .L35+4
 131 00fc 3310D3E5 		ldrb	r1, [r3, #51]	@ zero_extendqisi2
 132 0100 3530D3E5 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 133 0104 030051E1 		cmp	r1, r3
 134 0108 9C01001A 		bne	.L3
 135 010c 8C369FE5 		ldr	r3, .L35+4
 136 0110 2110D3E5 		ldrb	r1, [r3, #33]	@ zero_extendqisi2
 137 0114 2330D3E5 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
 138 0118 030051E1 		cmp	r1, r3
 139 011c 9701001A 		bne	.L3
 140 0120 78369FE5 		ldr	r3, .L35+4
 141 0124 2A10D3E5 		ldrb	r1, [r3, #42]	@ zero_extendqisi2
 142 0128 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 143 012c 030051E1 		cmp	r1, r3
 144 0130 9201001A 		bne	.L3
  35:PLL.c         ****         switch (color_data[1][0]) {
 145              		.loc 1 35 0 is_stmt 1
 146 0134 040052E3 		cmp	r2, #4
 147 0138 0400000A 		beq	.L5
 148 013c 050052E3 		cmp	r2, #5
 149 0140 0A00000A 		beq	.L6
 150 0144 030052E3 		cmp	r2, #3
 151 0148 8701001A 		bne	.L9
 152 014c 030000EA 		b	.L7
 153              	.L5:
  36:PLL.c         ****             case 1:
  37:PLL.c         ****                 break;
  38:PLL.c         ****             case 4:
  39:PLL.c         ****                 us_dreh(-1, 90);
 154              		.loc 1 39 0
 155 0150 0000E0E3 		mvn	r0, #0
 156 0154 5A10A0E3 		mov	r1, #90
 157 0158 FEFFFFEB 		bl	us_dreh
 158              	.LVL11:
  40:PLL.c         ****                 break;
 159              		.loc 1 40 0
 160 015c 820100EA 		b	.L9
 161              	.L7:
  41:PLL.c         ****             case 3:
  42:PLL.c         ****                 us_dreh(-1, 180);
 162              		.loc 1 42 0
 163 0160 0000E0E3 		mvn	r0, #0
 164 0164 B410A0E3 		mov	r1, #180
 165 0168 FEFFFFEB 		bl	us_dreh
 166              	.LVL12:
  43:PLL.c         ****                 break;
 167              		.loc 1 43 0
 168 016c 7E0100EA 		b	.L9
 169              	.L6:
  44:PLL.c         ****             case 5:
  45:PLL.c         ****                 us_dreh(1, 90);
 170              		.loc 1 45 0
 171 0170 0100A0E3 		mov	r0, #1
 172 0174 5A10A0E3 		mov	r1, #90
 173 0178 FEFFFFEB 		bl	us_dreh
 174              	.LVL13:
  46:PLL.c         ****                 break;
 175              		.loc 1 46 0
 176 017c 7A0100EA 		b	.L9
 177              	.L33:
 178              	.LVL14:
  47:PLL.c         ****             default:
  48:PLL.c         ****                 break;
  49:PLL.c         ****         }
  50:PLL.c         ****         
  51:PLL.c         ****     }else{
  52:PLL.c         ****     for (i=0; i<=3; i++)
  53:PLL.c         ****     {
  54:PLL.c         ****         change_topface(2);
 179              		.loc 1 54 0
 180 0180 0600A0E1 		mov	r0, r6
 181 0184 FEFFFFEB 		bl	change_topface
 182              	.LVL15:
  55:PLL.c         ****         change_rightface(Color_col[(i+1)%4]);
 183              		.loc 1 55 0
 184 0188 014084E2 		add	r4, r4, #1
 185              	.LVL16:
 186 018c C43FA0E1 		mov	r3, r4, asr #31
 187 0190 233FA0E1 		mov	r3, r3, lsr #30
 188 0194 032084E0 		add	r2, r4, r3
 189 0198 032002E2 		and	r2, r2, #3
 190 019c 023063E0 		rsb	r3, r3, r2
 191 01a0 18208DE2 		add	r2, sp, #24
 192 01a4 033182E0 		add	r3, r2, r3, asl #2
 193 01a8 100013E5 		ldr	r0, [r3, #-16]
 194 01ac FEFFFFEB 		bl	change_rightface
 195              	.LVL17:
  56:PLL.c         ****         if(color_data[1][0]==color_data[1][2])
 196              		.loc 1 56 0
 197 01b0 0920D5E5 		ldrb	r2, [r5, #9]	@ zero_extendqisi2
 198 01b4 0B30D5E5 		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 199 01b8 030052E1 		cmp	r2, r3
 200 01bc 7000001A 		bne	.L10
 201 01c0 04708DE2 		add	r7, sp, #4
 202 01c4 0140A0E3 		mov	r4, #1
 203              	.LVL18:
  57:PLL.c         ****         {
  58:PLL.c         ****             for (j=0; j<=3; j++)
  59:PLL.c         ****             {
  60:PLL.c         ****                 if ((color_data[1][0]==color_data[Color_col[j]][4])&&(color_data[1][2]==color_data[
 204              		.loc 1 60 0
 205 01c8 D0559FE5 		ldr	r5, .L35+4
 206              	.LBB2:
  61:PLL.c         ****                 {
  62:PLL.c         ****                     int color_c;
  63:PLL.c         ****                     color_c=color_data[Color_col[j]][4];
  64:PLL.c         ****                     switch (j)
  65:PLL.c         ****                     {
  66:PLL.c         ****                         case 0:
  67:PLL.c         ****                             change_rightface(color_c);
  68:PLL.c         ****                             break;
  69:PLL.c         ****                         case 1:
  70:PLL.c         ****                             us_dreh(1, 90);
  71:PLL.c         ****                             change_topface(2);
  72:PLL.c         ****                             change_rightface(color_c);
  73:PLL.c         ****                             break;
  74:PLL.c         ****                         case 2:
  75:PLL.c         ****                             us_dreh(1, 180);
 207              		.loc 1 75 0
 208 01cc 0480A0E1 		mov	r8, r4
 209 01d0 B4B0A0E3 		mov	fp, #180
  76:PLL.c         ****                             change_topface(2);
 210              		.loc 1 76 0
 211 01d4 0290A0E3 		mov	r9, #2
  70:PLL.c         ****                             change_topface(2);
 212              		.loc 1 70 0
 213 01d8 5AA0A0E3 		mov	r10, #90
 214 01dc 000000EA 		b	.L11
 215              	.L20:
 216 01e0 014084E2 		add	r4, r4, #1
 217              	.L11:
 218 01e4 012044E2 		sub	r2, r4, #1
 219              	.LVL19:
 220              	.LBE2:
  60:PLL.c         ****                 {
 221              		.loc 1 60 0
 222 01e8 0960D5E5 		ldrb	r6, [r5, #9]	@ zero_extendqisi2
 223 01ec 0430B7E5 		ldr	r3, [r7, #4]!
 224 01f0 833183E0 		add	r3, r3, r3, asl #3
 225 01f4 033085E0 		add	r3, r5, r3
 226 01f8 0430D3E5 		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 227 01fc 060053E1 		cmp	r3, r6
 228 0200 2700001A 		bne	.L12
  60:PLL.c         ****                 {
 229              		.loc 1 60 0 is_stmt 0 discriminator 1
 230 0204 0B30D5E5 		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 231 0208 060053E1 		cmp	r3, r6
 232 020c 2400001A 		bne	.L12
 233              	.LBB3:
  63:PLL.c         ****                     switch (j)
 234              		.loc 1 63 0 is_stmt 1
 235 0210 04608DE5 		str	r6, [sp, #4]
 236              	.LVL20:
  64:PLL.c         ****                     {
 237              		.loc 1 64 0
 238 0214 030052E3 		cmp	r2, #3
 239 0218 02F19F97 		ldrls	pc, [pc, r2, asl #2]
 240 021c 200000EA 		b	.L12
 241              	.L14:
 242 0220 30020000 		.word	.L13
 243 0224 3C020000 		.word	.L15
 244 0228 5C020000 		.word	.L16
 245 022c 84020000 		.word	.L17
 246              	.L13:
  67:PLL.c         ****                             break;
 247              		.loc 1 67 0
 248 0230 0600A0E1 		mov	r0, r6
 249 0234 FEFFFFEB 		bl	change_rightface
 250              	.LVL21:
  68:PLL.c         ****                         case 1:
 251              		.loc 1 68 0
 252 0238 E8FFFFEA 		b	.L20
 253              	.LVL22:
 254              	.L15:
  70:PLL.c         ****                             change_topface(2);
 255              		.loc 1 70 0
 256 023c 0800A0E1 		mov	r0, r8
 257 0240 0A10A0E1 		mov	r1, r10
 258 0244 FEFFFFEB 		bl	us_dreh
 259              	.LVL23:
  71:PLL.c         ****                             change_rightface(color_c);
 260              		.loc 1 71 0
 261 0248 0900A0E1 		mov	r0, r9
 262 024c FEFFFFEB 		bl	change_topface
 263              	.LVL24:
  72:PLL.c         ****                             break;
 264              		.loc 1 72 0
 265 0250 0600A0E1 		mov	r0, r6
 266 0254 FEFFFFEB 		bl	change_rightface
 267              	.LVL25:
  73:PLL.c         ****                         case 2:
 268              		.loc 1 73 0
 269 0258 E0FFFFEA 		b	.L20
 270              	.LVL26:
 271              	.L16:
  75:PLL.c         ****                             change_topface(2);
 272              		.loc 1 75 0
 273 025c 0800A0E1 		mov	r0, r8
 274 0260 0B10A0E1 		mov	r1, fp
 275 0264 FEFFFFEB 		bl	us_dreh
 276              	.LVL27:
 277              		.loc 1 76 0
 278 0268 0900A0E1 		mov	r0, r9
 279 026c FEFFFFEB 		bl	change_topface
 280              	.LVL28:
  77:PLL.c         ****                             wuerfel_print(1);
 281              		.loc 1 77 0
 282 0270 0800A0E1 		mov	r0, r8
 283 0274 FEFFFFEB 		bl	wuerfel_print
 284              	.LVL29:
  78:PLL.c         ****                             change_rightface(color_c);
 285              		.loc 1 78 0
 286 0278 0600A0E1 		mov	r0, r6
 287 027c FEFFFFEB 		bl	change_rightface
 288              	.LVL30:
  79:PLL.c         ****                             break;
 289              		.loc 1 79 0
 290 0280 D6FFFFEA 		b	.L20
 291              	.LVL31:
 292              	.L17:
  80:PLL.c         ****                         case 3:
  81:PLL.c         ****                             us_dreh(-1, 90);
 293              		.loc 1 81 0
 294 0284 0000E0E3 		mvn	r0, #0
 295 0288 5A10A0E3 		mov	r1, #90
 296 028c FEFFFFEB 		bl	us_dreh
 297              	.LVL32:
  82:PLL.c         ****                             change_topface(2);
 298              		.loc 1 82 0
 299 0290 0200A0E3 		mov	r0, #2
 300 0294 FEFFFFEB 		bl	change_topface
 301              	.LVL33:
  83:PLL.c         ****                             change_rightface(color_c);
 302              		.loc 1 83 0
 303 0298 04009DE5 		ldr	r0, [sp, #4]
 304 029c FEFFFFEB 		bl	change_rightface
 305              	.LVL34:
 306 02a0 010000EA 		b	.L19
 307              	.LVL35:
 308              	.L12:
 309              	.LBE3:
  58:PLL.c         ****             {
 310              		.loc 1 58 0
 311 02a4 030054E3 		cmp	r4, #3
 312 02a8 CCFFFFDA 		ble	.L20
 313              	.LVL36:
 314              	.L19:
  84:PLL.c         ****                             break;
  85:PLL.c         ****                         default:
  86:PLL.c         ****                             break;
  87:PLL.c         ****                     }
  88:PLL.c         ****                 }
  89:PLL.c         ****             }
  90:PLL.c         ****             wuerfel_print(1);
 315              		.loc 1 90 0
 316 02ac 0100A0E3 		mov	r0, #1
 317 02b0 FEFFFFEB 		bl	wuerfel_print
 318              	.LVL37:
  91:PLL.c         ****             rs_dreh(1, 180);
 319              		.loc 1 91 0
 320 02b4 0100A0E3 		mov	r0, #1
 321 02b8 B410A0E3 		mov	r1, #180
 322 02bc FEFFFFEB 		bl	rs_dreh
 323              	.LVL38:
  92:PLL.c         ****             fs_dreh(1, 180);
 324              		.loc 1 92 0
 325 02c0 0100A0E3 		mov	r0, #1
 326 02c4 B410A0E3 		mov	r1, #180
 327 02c8 FEFFFFEB 		bl	fs_dreh
 328              	.LVL39:
  93:PLL.c         ****             rs_dreh(-1, 90);
 329              		.loc 1 93 0
 330 02cc 0000E0E3 		mvn	r0, #0
 331 02d0 5A10A0E3 		mov	r1, #90
 332 02d4 FEFFFFEB 		bl	rs_dreh
 333              	.LVL40:
  94:PLL.c         ****             rs_dreh(-1, 90);
 334              		.loc 1 94 0
 335 02d8 0000E0E3 		mvn	r0, #0
 336 02dc 5A10A0E3 		mov	r1, #90
 337 02e0 FEFFFFEB 		bl	rs_dreh
 338              	.LVL41:
  95:PLL.c         ****             ls_dreh(1, 90);
 339              		.loc 1 95 0
 340 02e4 0100A0E3 		mov	r0, #1
 341 02e8 5A10A0E3 		mov	r1, #90
 342 02ec FEFFFFEB 		bl	ls_dreh
 343              	.LVL42:
  96:PLL.c         ****             ls_dreh(1, 180);
 344              		.loc 1 96 0
 345 02f0 0100A0E3 		mov	r0, #1
 346 02f4 B410A0E3 		mov	r1, #180
 347 02f8 FEFFFFEB 		bl	ls_dreh
 348              	.LVL43:
  97:PLL.c         ****             rs_dreh(-1, 90);
 349              		.loc 1 97 0
 350 02fc 0000E0E3 		mvn	r0, #0
 351 0300 5A10A0E3 		mov	r1, #90
 352 0304 FEFFFFEB 		bl	rs_dreh
 353              	.LVL44:
  98:PLL.c         ****             rs_dreh(1, 90);
 354              		.loc 1 98 0
 355 0308 0100A0E3 		mov	r0, #1
 356 030c 5A10A0E3 		mov	r1, #90
 357 0310 FEFFFFEB 		bl	rs_dreh
 358              	.LVL45:
  99:PLL.c         ****             ls_dreh(-1, 90);
 359              		.loc 1 99 0
 360 0314 0000E0E3 		mvn	r0, #0
 361 0318 5A10A0E3 		mov	r1, #90
 362 031c FEFFFFEB 		bl	ls_dreh
 363              	.LVL46:
 100:PLL.c         ****             change_topface(2);
 364              		.loc 1 100 0
 365 0320 0200A0E3 		mov	r0, #2
 366 0324 FEFFFFEB 		bl	change_topface
 367              	.LVL47:
 101:PLL.c         ****             change_rightface(4);
 368              		.loc 1 101 0
 369 0328 0400A0E3 		mov	r0, #4
 370 032c FEFFFFEB 		bl	change_rightface
 371              	.LVL48:
 102:PLL.c         ****             switch (color_data[1][0]) {
 372              		.loc 1 102 0
 373 0330 68349FE5 		ldr	r3, .L35+4
 374 0334 0930D3E5 		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 375 0338 040053E3 		cmp	r3, #4
 376 033c 0400000A 		beq	.L21
 377 0340 050053E3 		cmp	r3, #5
 378 0344 0A00000A 		beq	.L22
 379 0348 030053E3 		cmp	r3, #3
 380 034c 0601001A 		bne	.L9
 381 0350 030000EA 		b	.L23
 382              	.L21:
 103:PLL.c         ****                 case 1:
 104:PLL.c         ****                     break;
 105:PLL.c         ****                 case 4:
 106:PLL.c         ****                     us_dreh(-1, 90);
 383              		.loc 1 106 0
 384 0354 0000E0E3 		mvn	r0, #0
 385 0358 5A10A0E3 		mov	r1, #90
 386 035c FEFFFFEB 		bl	us_dreh
 387              	.LVL49:
 107:PLL.c         ****                     break;
 388              		.loc 1 107 0
 389 0360 010100EA 		b	.L9
 390              	.L23:
 108:PLL.c         ****                 case 3:
 109:PLL.c         ****                     us_dreh(-1, 180);
 391              		.loc 1 109 0
 392 0364 0000E0E3 		mvn	r0, #0
 393 0368 B410A0E3 		mov	r1, #180
 394 036c FEFFFFEB 		bl	us_dreh
 395              	.LVL50:
 110:PLL.c         ****                     break;
 396              		.loc 1 110 0
 397 0370 FD0000EA 		b	.L9
 398              	.L22:
 111:PLL.c         ****                 case 5:
 112:PLL.c         ****                     us_dreh(1, 90);
 399              		.loc 1 112 0
 400 0374 0100A0E3 		mov	r0, #1
 401 0378 5A10A0E3 		mov	r1, #90
 402 037c FEFFFFEB 		bl	us_dreh
 403              	.LVL51:
 113:PLL.c         ****                     break;
 404              		.loc 1 113 0
 405 0380 F90000EA 		b	.L9
 406              	.LVL52:
 407              	.L10:
  52:PLL.c         ****     {
 408              		.loc 1 52 0 discriminator 1
 409 0384 040054E3 		cmp	r4, #4
 410 0388 7CFFFF1A 		bne	.L33
 411 038c F60000EA 		b	.L9
 412              	.LVL53:
 413              	.L32:
 114:PLL.c         ****                 default:
 115:PLL.c         ****                     break;
 116:PLL.c         ****             }
 117:PLL.c         ****             break;
 118:PLL.c         ****         }
 119:PLL.c         ****     }
 120:PLL.c         **** }
 121:PLL.c         ****     for (i=0; i<=3; i++) {
 122:PLL.c         ****         change_topface(2);
 414              		.loc 1 122 0
 415 0390 0600A0E1 		mov	r0, r6
 416 0394 FEFFFFEB 		bl	change_topface
 417              	.LVL54:
 123:PLL.c         ****         change_rightface(Color_col[(i+1)%4]);
 418              		.loc 1 123 0
 419 0398 015085E2 		add	r5, r5, #1
 420              	.LVL55:
 421 039c C53FA0E1 		mov	r3, r5, asr #31
 422 03a0 233FA0E1 		mov	r3, r3, lsr #30
 423 03a4 032085E0 		add	r2, r5, r3
 424 03a8 032002E2 		and	r2, r2, #3
 425 03ac 023063E0 		rsb	r3, r3, r2
 426 03b0 18C08DE2 		add	ip, sp, #24
 427 03b4 03318CE0 		add	r3, ip, r3, asl #2
 428 03b8 100013E5 		ldr	r0, [r3, #-16]
 429 03bc FEFFFFEB 		bl	change_rightface
 430              	.LVL56:
 124:PLL.c         ****         if ((color_data[1][0]==color_data[1][1]) && (color_data[1][1]==color_data[1][2])&&(color_da
 431              		.loc 1 124 0
 432 03c0 0930D4E5 		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 433 03c4 0A20D4E5 		ldrb	r2, [r4, #10]	@ zero_extendqisi2
 434 03c8 030052E1 		cmp	r2, r3
 435 03cc 6300001A 		bne	.L25
 436              		.loc 1 124 0 is_stmt 0 discriminator 1
 437 03d0 0B20D4E5 		ldrb	r2, [r4, #11]	@ zero_extendqisi2
 438 03d4 030052E1 		cmp	r2, r3
 439 03d8 6000001A 		bne	.L25
 440 03dc 0D20D4E5 		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 441 03e0 030052E1 		cmp	r2, r3
 442 03e4 5D00001A 		bne	.L25
 125:PLL.c         ****                 drehen(1);
 443              		.loc 1 125 0 is_stmt 1
 444 03e8 0700A0E1 		mov	r0, r7
 445 03ec FEFFFFEB 		bl	drehen
 446              	.LVL57:
 126:PLL.c         ****                 drehen(1);
 447              		.loc 1 126 0
 448 03f0 0700A0E1 		mov	r0, r7
 449 03f4 FEFFFFEB 		bl	drehen
 450              	.LVL58:
 127:PLL.c         ****             if ((color_data[1][1]==color_data[5][4])&&(color_data[5][7]==color_data[4][4])&&(color_
 451              		.loc 1 127 0
 452 03f8 0A30D4E5 		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 453 03fc 3120D4E5 		ldrb	r2, [r4, #49]	@ zero_extendqisi2
 454 0400 020053E1 		cmp	r3, r2
 455 0404 2900001A 		bne	.L26
 456              		.loc 1 127 0 is_stmt 0 discriminator 1
 457 0408 3400D4E5 		ldrb	r0, [r4, #52]	@ zero_extendqisi2
 458 040c 2810D4E5 		ldrb	r1, [r4, #40]	@ zero_extendqisi2
 459 0410 010050E1 		cmp	r0, r1
 460 0414 2500001A 		bne	.L26
 461 0418 2B00D4E5 		ldrb	r0, [r4, #43]	@ zero_extendqisi2
 462 041c 0D10D4E5 		ldrb	r1, [r4, #13]	@ zero_extendqisi2
 463 0420 010050E1 		cmp	r0, r1
 464 0424 2100001A 		bne	.L26
 128:PLL.c         ****                 rs_dreh(1, 90);
 465              		.loc 1 128 0 is_stmt 1
 466 0428 0100A0E3 		mov	r0, #1
 467 042c 5A10A0E3 		mov	r1, #90
 468 0430 FEFFFFEB 		bl	rs_dreh
 469              	.LVL59:
 129:PLL.c         ****                 rs_dreh(-1, 90);
 470              		.loc 1 129 0
 471 0434 0000E0E3 		mvn	r0, #0
 472 0438 5A10A0E3 		mov	r1, #90
 473 043c FEFFFFEB 		bl	rs_dreh
 474              	.LVL60:
 130:PLL.c         ****                 ls_dreh(1, 90);
 475              		.loc 1 130 0
 476 0440 0100A0E3 		mov	r0, #1
 477 0444 5A10A0E3 		mov	r1, #90
 478 0448 FEFFFFEB 		bl	ls_dreh
 479              	.LVL61:
 131:PLL.c         ****                 rs_dreh(1, 90);
 480              		.loc 1 131 0
 481 044c 0100A0E3 		mov	r0, #1
 482 0450 5A10A0E3 		mov	r1, #90
 483 0454 FEFFFFEB 		bl	rs_dreh
 484              	.LVL62:
 132:PLL.c         ****                 ls_dreh(1, 90);
 485              		.loc 1 132 0
 486 0458 0100A0E3 		mov	r0, #1
 487 045c 5A10A0E3 		mov	r1, #90
 488 0460 FEFFFFEB 		bl	ls_dreh
 489              	.LVL63:
 133:PLL.c         ****                 rs_dreh(1, 90);
 490              		.loc 1 133 0
 491 0464 0100A0E3 		mov	r0, #1
 492 0468 5A10A0E3 		mov	r1, #90
 493 046c FEFFFFEB 		bl	rs_dreh
 494              	.LVL64:
 134:PLL.c         ****                 ls_dreh(1, 90);
 495              		.loc 1 134 0
 496 0470 0100A0E3 		mov	r0, #1
 497 0474 5A10A0E3 		mov	r1, #90
 498 0478 FEFFFFEB 		bl	ls_dreh
 499              	.LVL65:
 135:PLL.c         ****                 rs_dreh(-1, 90);
 500              		.loc 1 135 0
 501 047c 0000E0E3 		mvn	r0, #0
 502 0480 5A10A0E3 		mov	r1, #90
 503 0484 FEFFFFEB 		bl	rs_dreh
 504              	.LVL66:
 136:PLL.c         ****                 ls_dreh(-1, 90);
 505              		.loc 1 136 0
 506 0488 0000E0E3 		mvn	r0, #0
 507 048c 5A10A0E3 		mov	r1, #90
 508 0490 FEFFFFEB 		bl	ls_dreh
 509              	.LVL67:
 137:PLL.c         ****                 rs_dreh(-1, 90);
 510              		.loc 1 137 0
 511 0494 0000E0E3 		mvn	r0, #0
 512 0498 5A10A0E3 		mov	r1, #90
 513 049c FEFFFFEB 		bl	rs_dreh
 514              	.LVL68:
 138:PLL.c         ****                 ls_dreh(1, 180);
 515              		.loc 1 138 0
 516 04a0 0100A0E3 		mov	r0, #1
 517 04a4 B410A0E3 		mov	r1, #180
 518 04a8 FEFFFFEB 		bl	ls_dreh
 519              	.LVL69:
 139:PLL.c         ****                 goto fertig;
 520              		.loc 1 139 0
 521 04ac B70000EA 		b	.L34
 522              	.L26:
 140:PLL.c         ****             }
 141:PLL.c         ****             
 142:PLL.c         ****             
 143:PLL.c         ****             if ((color_data[1][1]==color_data[4][4])&&(color_data[5][7]==color_data[1][4])&&(color_
 523              		.loc 1 143 0
 524 04b0 2810D4E5 		ldrb	r1, [r4, #40]	@ zero_extendqisi2
 525 04b4 030051E1 		cmp	r1, r3
 526 04b8 2800001A 		bne	.L25
 527              		.loc 1 143 0 is_stmt 0 discriminator 1
 528 04bc 3410D4E5 		ldrb	r1, [r4, #52]	@ zero_extendqisi2
 529 04c0 0D30D4E5 		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 530 04c4 030051E1 		cmp	r1, r3
 531 04c8 2400001A 		bne	.L25
 532 04cc 2B30D4E5 		ldrb	r3, [r4, #43]	@ zero_extendqisi2
 533 04d0 020053E1 		cmp	r3, r2
 534 04d4 2100001A 		bne	.L25
 144:PLL.c         ****                 rs_dreh(-1, 180);
 535              		.loc 1 144 0 is_stmt 1
 536 04d8 0000E0E3 		mvn	r0, #0
 537 04dc B410A0E3 		mov	r1, #180
 538 04e0 FEFFFFEB 		bl	rs_dreh
 539              	.LVL70:
 145:PLL.c         ****                 rs_dreh(1, 90);
 540              		.loc 1 145 0
 541 04e4 0100A0E3 		mov	r0, #1
 542 04e8 5A10A0E3 		mov	r1, #90
 543 04ec FEFFFFEB 		bl	rs_dreh
 544              	.LVL71:
 146:PLL.c         ****                 ls_dreh(1, 90);
 545              		.loc 1 146 0
 546 04f0 0100A0E3 		mov	r0, #1
 547 04f4 5A10A0E3 		mov	r1, #90
 548 04f8 FEFFFFEB 		bl	ls_dreh
 549              	.LVL72:
 147:PLL.c         ****                 rs_dreh(1, 90);
 550              		.loc 1 147 0
 551 04fc 0100A0E3 		mov	r0, #1
 552 0500 5A10A0E3 		mov	r1, #90
 553 0504 FEFFFFEB 		bl	rs_dreh
 554              	.LVL73:
 148:PLL.c         ****                 ls_dreh(-1, 90);
 555              		.loc 1 148 0
 556 0508 0000E0E3 		mvn	r0, #0
 557 050c 5A10A0E3 		mov	r1, #90
 558 0510 FEFFFFEB 		bl	ls_dreh
 559              	.LVL74:
 149:PLL.c         ****                 rs_dreh(-1, 90);
 560              		.loc 1 149 0
 561 0514 0000E0E3 		mvn	r0, #0
 562 0518 5A10A0E3 		mov	r1, #90
 563 051c FEFFFFEB 		bl	rs_dreh
 564              	.LVL75:
 150:PLL.c         ****                 ls_dreh(-1, 90);
 565              		.loc 1 150 0
 566 0520 0000E0E3 		mvn	r0, #0
 567 0524 5A10A0E3 		mov	r1, #90
 568 0528 FEFFFFEB 		bl	ls_dreh
 569              	.LVL76:
 151:PLL.c         ****                 rs_dreh(-1, 90);
 570              		.loc 1 151 0
 571 052c 0000E0E3 		mvn	r0, #0
 572 0530 5A10A0E3 		mov	r1, #90
 573 0534 FEFFFFEB 		bl	rs_dreh
 574              	.LVL77:
 152:PLL.c         ****                 ls_dreh(-1, 90);
 575              		.loc 1 152 0
 576 0538 0000E0E3 		mvn	r0, #0
 577 053c 5A10A0E3 		mov	r1, #90
 578 0540 FEFFFFEB 		bl	ls_dreh
 579              	.LVL78:
 153:PLL.c         ****                 rs_dreh(1, 90);
 580              		.loc 1 153 0
 581 0544 0100A0E3 		mov	r0, #1
 582 0548 5A10A0E3 		mov	r1, #90
 583 054c FEFFFFEB 		bl	rs_dreh
 584              	.LVL79:
 154:PLL.c         ****                 ls_dreh(-1, 90);
 585              		.loc 1 154 0
 586 0550 0000E0E3 		mvn	r0, #0
 587 0554 5A10A0E3 		mov	r1, #90
 588 0558 FEFFFFEB 		bl	ls_dreh
 589              	.LVL80:
 155:PLL.c         ****                 goto fertig;
 590              		.loc 1 155 0
 591 055c 8B0000EA 		b	.L34
 592              	.L25:
 156:PLL.c         ****             }
 157:PLL.c         ****         
 158:PLL.c         ****         }
 159:PLL.c         ****         
 160:PLL.c         ****         if ((color_data[1][1]==color_data[3][4])&&(color_data[4][7]==color_data[5][4])&&(color_data
 593              		.loc 1 160 0
 594 0560 0A30D4E5 		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 595 0564 1F20D4E5 		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 596 0568 020053E1 		cmp	r3, r2
 597 056c 2D00001A 		bne	.L28
 598              		.loc 1 160 0 is_stmt 0 discriminator 1
 599 0570 2B00D4E5 		ldrb	r0, [r4, #43]	@ zero_extendqisi2
 600 0574 3110D4E5 		ldrb	r1, [r4, #49]	@ zero_extendqisi2
 601 0578 010050E1 		cmp	r0, r1
 602 057c 2900001A 		bne	.L28
 603 0580 2200D4E5 		ldrb	r0, [r4, #34]	@ zero_extendqisi2
 604 0584 0D10D4E5 		ldrb	r1, [r4, #13]	@ zero_extendqisi2
 605 0588 010050E1 		cmp	r0, r1
 606 058c 2500001A 		bne	.L28
 607 0590 3400D4E5 		ldrb	r0, [r4, #52]	@ zero_extendqisi2
 608 0594 2810D4E5 		ldrb	r1, [r4, #40]	@ zero_extendqisi2
 609 0598 010050E1 		cmp	r0, r1
 610 059c 2100001A 		bne	.L28
 161:PLL.c         ****             ls_dreh(1, 180);
 611              		.loc 1 161 0 is_stmt 1
 612 05a0 0100A0E3 		mov	r0, #1
 613 05a4 B410A0E3 		mov	r1, #180
 614 05a8 FEFFFFEB 		bl	ls_dreh
 615              	.LVL81:
 162:PLL.c         ****             us_dreh(1, 180);
 616              		.loc 1 162 0
 617 05ac 0100A0E3 		mov	r0, #1
 618 05b0 B410A0E3 		mov	r1, #180
 619 05b4 FEFFFFEB 		bl	us_dreh
 620              	.LVL82:
 163:PLL.c         ****             ls_dreh(1, 90);
 621              		.loc 1 163 0
 622 05b8 0100A0E3 		mov	r0, #1
 623 05bc 5A10A0E3 		mov	r1, #90
 624 05c0 FEFFFFEB 		bl	ls_dreh
 625              	.LVL83:
 164:PLL.c         ****             ls_dreh(1, 180);
 626              		.loc 1 164 0
 627 05c4 0100A0E3 		mov	r0, #1
 628 05c8 B410A0E3 		mov	r1, #180
 629 05cc FEFFFFEB 		bl	ls_dreh
 630              	.LVL84:
 165:PLL.c         ****             us_dreh(1, 180);
 631              		.loc 1 165 0
 632 05d0 0100A0E3 		mov	r0, #1
 633 05d4 B410A0E3 		mov	r1, #180
 634 05d8 FEFFFFEB 		bl	us_dreh
 635              	.LVL85:
 166:PLL.c         ****             rs_dreh(1, 180);
 636              		.loc 1 166 0
 637 05dc 0100A0E3 		mov	r0, #1
 638 05e0 B410A0E3 		mov	r1, #180
 639 05e4 FEFFFFEB 		bl	rs_dreh
 640              	.LVL86:
 167:PLL.c         ****             ls_dreh(1, 180);
 641              		.loc 1 167 0
 642 05e8 0100A0E3 		mov	r0, #1
 643 05ec B410A0E3 		mov	r1, #180
 644 05f0 FEFFFFEB 		bl	ls_dreh
 645              	.LVL87:
 168:PLL.c         ****             us_dreh(1, 180);
 646              		.loc 1 168 0
 647 05f4 0100A0E3 		mov	r0, #1
 648 05f8 B410A0E3 		mov	r1, #180
 649 05fc FEFFFFEB 		bl	us_dreh
 650              	.LVL88:
 169:PLL.c         ****             rs_dreh(1, 90);
 651              		.loc 1 169 0
 652 0600 0100A0E3 		mov	r0, #1
 653 0604 5A10A0E3 		mov	r1, #90
 654 0608 FEFFFFEB 		bl	rs_dreh
 655              	.LVL89:
 170:PLL.c         ****             ls_dreh(1, 180);
 656              		.loc 1 170 0
 657 060c 0100A0E3 		mov	r0, #1
 658 0610 B410A0E3 		mov	r1, #180
 659 0614 FEFFFFEB 		bl	ls_dreh
 660              	.LVL90:
 171:PLL.c         ****             us_dreh(1, 180);
 661              		.loc 1 171 0
 662 0618 0100A0E3 		mov	r0, #1
 663 061c B410A0E3 		mov	r1, #180
 664 0620 FEFFFFEB 		bl	us_dreh
 665              	.LVL91:
 172:PLL.c         ****             goto fertig;
 666              		.loc 1 172 0
 667 0624 590000EA 		b	.L34
 668              	.L28:
 173:PLL.c         ****         }
 174:PLL.c         ****         if ((color_data[1][1]==color_data[4][4])&&(color_data[4][7]==color_data[1][4])&&(color_data
 669              		.loc 1 174 0
 670 0628 2810D4E5 		ldrb	r1, [r4, #40]	@ zero_extendqisi2
 671 062c 030051E1 		cmp	r1, r3
 672 0630 0C00001A 		bne	.L29
 673              		.loc 1 174 0 is_stmt 0 discriminator 1
 674 0634 2B10D4E5 		ldrb	r1, [r4, #43]	@ zero_extendqisi2
 675 0638 0D30D4E5 		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 676 063c 030051E1 		cmp	r1, r3
 677 0640 0800001A 		bne	.L29
 678 0644 2210D4E5 		ldrb	r1, [r4, #34]	@ zero_extendqisi2
 679 0648 3130D4E5 		ldrb	r3, [r4, #49]	@ zero_extendqisi2
 680 064c 030051E1 		cmp	r1, r3
 681 0650 0400001A 		bne	.L29
 682 0654 3430D4E5 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 683 0658 020053E1 		cmp	r3, r2
 684 065c 0100001A 		bne	.L29
 175:PLL.c         ****             drehen(1);
 685              		.loc 1 175 0 is_stmt 1
 686 0660 0700A0E1 		mov	r0, r7
 687 0664 FEFFFFEB 		bl	drehen
 688              	.LVL92:
 689              	.L29:
 176:PLL.c         ****         }
 177:PLL.c         ****         
 178:PLL.c         ****         if ((color_data[1][1]==color_data[5][4])&&(color_data[4][7]==color_data[3][4])&&(color_data
 690              		.loc 1 178 0
 691 0668 0A20D4E5 		ldrb	r2, [r4, #10]	@ zero_extendqisi2
 692 066c 3130D4E5 		ldrb	r3, [r4, #49]	@ zero_extendqisi2
 693 0670 030052E1 		cmp	r2, r3
 694 0674 3900001A 		bne	.L30
 695              		.loc 1 178 0 is_stmt 0 discriminator 1
 696 0678 2B20D4E5 		ldrb	r2, [r4, #43]	@ zero_extendqisi2
 697 067c 1F30D4E5 		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 698 0680 030052E1 		cmp	r2, r3
 699 0684 3500001A 		bne	.L30
 700 0688 2220D4E5 		ldrb	r2, [r4, #34]	@ zero_extendqisi2
 701 068c 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 702 0690 030052E1 		cmp	r2, r3
 703 0694 3100001A 		bne	.L30
 704 0698 3420D4E5 		ldrb	r2, [r4, #52]	@ zero_extendqisi2
 705 069c 0D30D4E5 		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 706 06a0 030052E1 		cmp	r2, r3
 707 06a4 2D00001A 		bne	.L30
 179:PLL.c         ****             ls_dreh(1, 180);
 708              		.loc 1 179 0 is_stmt 1
 709 06a8 0100A0E3 		mov	r0, #1
 710 06ac B410A0E3 		mov	r1, #180
 711 06b0 FEFFFFEB 		bl	ls_dreh
 712              	.LVL93:
 180:PLL.c         ****             us_dreh(1, 180);
 713              		.loc 1 180 0
 714 06b4 0100A0E3 		mov	r0, #1
 715 06b8 B410A0E3 		mov	r1, #180
 716 06bc FEFFFFEB 		bl	us_dreh
 717              	.LVL94:
 181:PLL.c         ****             ls_dreh(1, 90);
 718              		.loc 1 181 0
 719 06c0 0100A0E3 		mov	r0, #1
 720 06c4 5A10A0E3 		mov	r1, #90
 721 06c8 FEFFFFEB 		bl	ls_dreh
 722              	.LVL95:
 182:PLL.c         ****             ls_dreh(1, 180);
 723              		.loc 1 182 0
 724 06cc 0100A0E3 		mov	r0, #1
 725 06d0 B410A0E3 		mov	r1, #180
 726 06d4 FEFFFFEB 		bl	ls_dreh
 727              	.LVL96:
 183:PLL.c         ****             us_dreh(1, 180);
 728              		.loc 1 183 0
 729 06d8 0100A0E3 		mov	r0, #1
 730 06dc B410A0E3 		mov	r1, #180
 731 06e0 FEFFFFEB 		bl	us_dreh
 732              	.LVL97:
 184:PLL.c         ****             rs_dreh(1, 90);
 733              		.loc 1 184 0
 734 06e4 0100A0E3 		mov	r0, #1
 735 06e8 5A10A0E3 		mov	r1, #90
 736 06ec FEFFFFEB 		bl	rs_dreh
 737              	.LVL98:
 185:PLL.c         ****             ls_dreh(1, 90);
 738              		.loc 1 185 0
 739 06f0 0100A0E3 		mov	r0, #1
 740 06f4 5A10A0E3 		mov	r1, #90
 741 06f8 FEFFFFEB 		bl	ls_dreh
 742              	.LVL99:
 186:PLL.c         ****             us_dreh(-1, 90);
 743              		.loc 1 186 0
 744 06fc 0000E0E3 		mvn	r0, #0
 745 0700 5A10A0E3 		mov	r1, #90
 746 0704 FEFFFFEB 		bl	us_dreh
 747              	.LVL100:
 187:PLL.c         ****             fs_dreh(1, 180);
 748              		.loc 1 187 0
 749 0708 0100A0E3 		mov	r0, #1
 750 070c B410A0E3 		mov	r1, #180
 751 0710 FEFFFFEB 		bl	fs_dreh
 752              	.LVL101:
 188:PLL.c         ****             ls_dreh(1, 180);
 753              		.loc 1 188 0
 754 0714 0100A0E3 		mov	r0, #1
 755 0718 B410A0E3 		mov	r1, #180
 756 071c FEFFFFEB 		bl	ls_dreh
 757              	.LVL102:
 189:PLL.c         ****             us_dreh(1, 180);
 758              		.loc 1 189 0
 759 0720 0100A0E3 		mov	r0, #1
 760 0724 B410A0E3 		mov	r1, #180
 761 0728 FEFFFFEB 		bl	us_dreh
 762              	.LVL103:
 190:PLL.c         ****             rs_dreh(1, 180);
 763              		.loc 1 190 0
 764 072c 0100A0E3 		mov	r0, #1
 765 0730 B410A0E3 		mov	r1, #180
 766 0734 FEFFFFEB 		bl	rs_dreh
 767              	.LVL104:
 191:PLL.c         ****             ls_dreh(-1, 90);
 768              		.loc 1 191 0
 769 0738 0000E0E3 		mvn	r0, #0
 770 073c 5A10A0E3 		mov	r1, #90
 771 0740 FEFFFFEB 		bl	ls_dreh
 772              	.LVL105:
 192:PLL.c         ****             us_dreh(1, 90);
 773              		.loc 1 192 0
 774 0744 0100A0E3 		mov	r0, #1
 775 0748 5A10A0E3 		mov	r1, #90
 776 074c FEFFFFEB 		bl	us_dreh
 777              	.LVL106:
 193:PLL.c         ****             bs_dreh(1, 180);
 778              		.loc 1 193 0
 779 0750 0100A0E3 		mov	r0, #1
 780 0754 B410A0E3 		mov	r1, #180
 781 0758 FEFFFFEB 		bl	bs_dreh
 782              	.LVL107:
 194:PLL.c         ****             goto fertig;
 783              		.loc 1 194 0
 784 075c 0B0000EA 		b	.L34
 785              	.L30:
 786              	.LVL108:
 121:PLL.c         ****         change_topface(2);
 787              		.loc 1 121 0 discriminator 1
 788 0760 040055E3 		cmp	r5, #4
 789 0764 09FFFF1A 		bne	.L32
 790              	.L27:
 791 0768 080000EA 		b	.L34
 792              	.LVL109:
 793              	.L9:
  56:PLL.c         ****         {
 794              		.loc 1 56 0
 795 076c 0050A0E3 		mov	r5, #0
 122:PLL.c         ****         change_rightface(Color_col[(i+1)%4]);
 796              		.loc 1 122 0
 797 0770 0260A0E3 		mov	r6, #2
 124:PLL.c         ****                 drehen(1);
 798              		.loc 1 124 0
 799 0774 24409FE5 		ldr	r4, .L35+4
 125:PLL.c         ****                 drehen(1);
 800              		.loc 1 125 0
 801 0778 0170A0E3 		mov	r7, #1
 802 077c 03FFFFEA 		b	.L32
 803              	.L3:
 804              	.LVL110:
  16:PLL.c         ****     change_topface(2);
 805              		.loc 1 16 0
 806 0780 0040A0E3 		mov	r4, #0
  54:PLL.c         ****         change_rightface(Color_col[(i+1)%4]);
 807              		.loc 1 54 0
 808 0784 0260A0E3 		mov	r6, #2
  56:PLL.c         ****         {
 809              		.loc 1 56 0
 810 0788 10509FE5 		ldr	r5, .L35+4
 811 078c 7BFEFFEA 		b	.L33
 812              	.LVL111:
 813              	.L34:
 195:PLL.c         ****         }
 196:PLL.c         ****         
 197:PLL.c         ****     }
 198:PLL.c         ****     
 199:PLL.c         **** fertig:return 0;
 200:PLL.c         **** }...
 814              		.loc 1 200 0
 815 0790 0000A0E3 		mov	r0, #0
 816 0794 1CD08DE2 		add	sp, sp, #28
 817              		@ sp needed
 818 0798 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 819              	.L36:
 820              		.align	2
 821              	.L35:
 822 079c 00000000 		.word	.LANCHOR0
 823 07a0 00000000 		.word	color_data
 824              		.cfi_endproc
 825              	.LFE11:
 826              		.fnend
 828              		.section	.rodata
 829              		.align	2
 830              	.LANCHOR0 = . + 0
 831              	.LC0:
 832 0000 01000000 		.word	1
 833 0004 04000000 		.word	4
 834 0008 03000000 		.word	3
 835 000c 05000000 		.word	5
 836              		.text
 837              	.Letext0:
 838              		.file 2 "/usr/local/carlson-minot/crosscompilers/lib/gcc/arm-none-linux-gnueabi/4.8.3/include/stdd
 839              		.file 3 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 840              		.file 4 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 841              		.file 5 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 842              		.file 6 "main.h"
 843              		.file 7 "Side_dreh.h"
 844              		.file 8 "print_mode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 PLL.c
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccANA7iu.s:16     .text:0000000000000000 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccANA7iu.s:19     .text:0000000000000000 PLL
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccANA7iu.s:242    .text:0000000000000220 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccANA7iu.s:248    .text:0000000000000230 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccANA7iu.s:822    .text:000000000000079c $d
                       .ARM.exidx:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//ccANA7iu.s:829    .rodata:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
change_topface
change_rightface
rs_dreh
fs_dreh
ls_dreh
us_dreh
wuerfel_print
drehen
bs_dreh
color_data
__aeabi_unwind_cpp_pr0
