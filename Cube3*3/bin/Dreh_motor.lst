   1              		.arch armv5te
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"Dreh_motor.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	DrehTel_setpos
  19              	DrehTel_setpos:
  20              		.fnstart
  21              	.LFB12:
  22              		.file 1 "Dreh_motor.c"
   1:Dreh_motor.c  **** //
   2:Dreh_motor.c  **** //  Dreh_motor.c
   3:Dreh_motor.c  **** //  Cube3*3
   4:Dreh_motor.c  **** //
   5:Dreh_motor.c  **** //  Created by 杨春霞 on 12.11.15.
   6:Dreh_motor.c  **** //  Copyright © 2015 Chunxia Yang. All rights reserved.
   7:Dreh_motor.c  **** //
   8:Dreh_motor.c  **** 
   9:Dreh_motor.c  **** #include <fcntl.h>
  10:Dreh_motor.c  **** #include <stdio.h>
  11:Dreh_motor.c  **** #include <sys/mman.h>
  12:Dreh_motor.c  **** #ifdef __linux__
  13:Dreh_motor.c  **** #include "lms2012.h"
  14:Dreh_motor.c  **** #include "../lms2012/c_output.h"
  15:Dreh_motor.c  **** #include <unistd.h>
  16:Dreh_motor.c  **** #endif
  17:Dreh_motor.c  **** #include "Dreh_motor.h"
  18:Dreh_motor.c  **** 
  19:Dreh_motor.c  **** #ifdef __linux__
  20:Dreh_motor.c  **** const int MOTOR_SPEED_B=35;
  21:Dreh_motor.c  **** const char MOTOR_PORT_B=0x02; //Drehteller Motor;
  22:Dreh_motor.c  **** OUTPUT_GLOBALS OutputInstance;
  23:Dreh_motor.c  **** int Tel_ist=0;
  24:Dreh_motor.c  **** int Tel_soll=0;
  25:Dreh_motor.c  **** int Tel_referenz=0;
  26:Dreh_motor.c  **** const int dreh_winkel[]={0*90*3,1*90*3,-1*90*3,2*90*3,-2*90*3};//274
  27:Dreh_motor.c  **** const int dreh_Korr_Winkel=30;  //Korrigieren Winkel
  28:Dreh_motor.c  **** #endif
  29:Dreh_motor.c  **** 
  30:Dreh_motor.c  **** 
  31:Dreh_motor.c  **** int DrehTel_init()
  32:Dreh_motor.c  **** {
  33:Dreh_motor.c  **** #ifdef __linux__
  34:Dreh_motor.c  ****     cOutputInit();
  35:Dreh_motor.c  ****     Tel_referenz=cOutputGetCount(1);
  36:Dreh_motor.c  ****     Tel_ist=0;
  37:Dreh_motor.c  ****     DrehTel_setpos(0);
  38:Dreh_motor.c  **** #endif
  39:Dreh_motor.c  ****     return 0;
  40:Dreh_motor.c  **** }
  41:Dreh_motor.c  **** 
  42:Dreh_motor.c  **** int DrehTel_setpos(int Tel_soll)
  43:Dreh_motor.c  **** {
  23              		.loc 1 43 0
  24              		.cfi_startproc
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27              	.LVL0:
  28 0000 F84F2DE9 		stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  29              		.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  30              		.cfi_def_cfa_offset 40
  31              		.cfi_offset 3, -40
  32              		.cfi_offset 4, -36
  33              		.cfi_offset 5, -32
  34              		.cfi_offset 6, -28
  35              		.cfi_offset 7, -24
  36              		.cfi_offset 8, -20
  37              		.cfi_offset 9, -16
  38              		.cfi_offset 10, -12
  39              		.cfi_offset 11, -8
  40              		.cfi_offset 14, -4
  41 0004 0090A0E1 		mov	r9, r0
  42              	.LVL1:
  44:Dreh_motor.c  **** #ifdef __linux__
  45:Dreh_motor.c  **** #if 1
  46:Dreh_motor.c  ****     int Old_Tel_referenz=0;
  47:Dreh_motor.c  ****     Old_Tel_referenz=cOutputGetCount(1);
  43              		.loc 1 47 0
  44 0008 0100A0E3 		mov	r0, #1
  45              	.LVL2:
  46 000c FEFFFFEB 		bl	cOutputGetCount
  47              	.LVL3:
  48 0010 0080A0E1 		mov	r8, r0
  49              	.LVL4:
  48:Dreh_motor.c  ****     if (dreh_winkel[Tel_soll]<=0)
  50              		.loc 1 48 0
  51 0014 50329FE5 		ldr	r3, .L20
  52 0018 094193E7 		ldr	r4, [r3, r9, asl #2]
  53 001c 000054E3 		cmp	r4, #0
  54 0020 2A0000CA 		bgt	.L2
  49:Dreh_motor.c  ****     {
  50:Dreh_motor.c  ****         cOutputSpeed(MOTOR_PORT_B,-MOTOR_SPEED_B);
  55              		.loc 1 50 0
  56 0024 0200A0E3 		mov	r0, #2
  57              	.LVL5:
  58 0028 2210E0E3 		mvn	r1, #34
  59 002c FEFFFFEB 		bl	cOutputSpeed
  60              	.LVL6:
  51:Dreh_motor.c  ****         cOutputStart(MOTOR_PORT_B);
  61              		.loc 1 51 0
  62 0030 0200A0E3 		mov	r0, #2
  63 0034 FEFFFFEB 		bl	cOutputStart
  64              	.LVL7:
  52:Dreh_motor.c  ****         while((cOutputGetCount(1)-Old_Tel_referenz) >= (dreh_winkel[Tel_soll]-dreh_Korr_Winkel))
  65              		.loc 1 52 0
  66 0038 0150A0E3 		mov	r5, #1
  67 003c 1E4044E2 		sub	r4, r4, #30
  53:Dreh_motor.c  ****         {
  54:Dreh_motor.c  ****             usleep(1000);
  68              		.loc 1 54 0
  69 0040 FA6FA0E3 		mov	r6, #1000
  52:Dreh_motor.c  ****         while((cOutputGetCount(1)-Old_Tel_referenz) >= (dreh_winkel[Tel_soll]-dreh_Korr_Winkel))
  70              		.loc 1 52 0
  71 0044 010000EA 		b	.L3
  72              	.L4:
  73              		.loc 1 54 0
  74 0048 0600A0E1 		mov	r0, r6
  75 004c FEFFFFEB 		bl	usleep
  76              	.LVL8:
  77              	.L3:
  52:Dreh_motor.c  ****         while((cOutputGetCount(1)-Old_Tel_referenz) >= (dreh_winkel[Tel_soll]-dreh_Korr_Winkel))
  78              		.loc 1 52 0 discriminator 1
  79 0050 0500A0E1 		mov	r0, r5
  80 0054 FEFFFFEB 		bl	cOutputGetCount
  81              	.LVL9:
  82 0058 000068E0 		rsb	r0, r8, r0
  83 005c 040050E1 		cmp	r0, r4
  84 0060 F8FFFFAA 		bge	.L4
  55:Dreh_motor.c  ****         }
  56:Dreh_motor.c  ****         cOutputStop(MOTOR_PORT_B,1);
  85              		.loc 1 56 0
  86 0064 0200A0E3 		mov	r0, #2
  87 0068 0110A0E3 		mov	r1, #1
  88 006c FEFFFFEB 		bl	cOutputStop
  89              	.LVL10:
  57:Dreh_motor.c  ****         
  58:Dreh_motor.c  ****         Tel_referenz=cOutputGetCount(1);
  90              		.loc 1 58 0
  91 0070 0100A0E3 		mov	r0, #1
  92 0074 FEFFFFEB 		bl	cOutputGetCount
  93              	.LVL11:
  94 0078 F0319FE5 		ldr	r3, .L20+4
  95 007c 000083E5 		str	r0, [r3]
  59:Dreh_motor.c  ****         
  60:Dreh_motor.c  ****         cOutputSpeed(MOTOR_PORT_B,MOTOR_SPEED_B);
  96              		.loc 1 60 0
  97 0080 0200A0E3 		mov	r0, #2
  98 0084 2310A0E3 		mov	r1, #35
  99 0088 FEFFFFEB 		bl	cOutputSpeed
 100              	.LVL12:
  61:Dreh_motor.c  ****         cOutputStart(MOTOR_PORT_B);
 101              		.loc 1 61 0
 102 008c 0200A0E3 		mov	r0, #2
 103 0090 FEFFFFEB 		bl	cOutputStart
 104              	.LVL13:
  62:Dreh_motor.c  ****         usleep(10000);
 105              		.loc 1 62 0
 106 0094 D8019FE5 		ldr	r0, .L20+8
 107 0098 FEFFFFEB 		bl	usleep
 108              	.LVL14:
  63:Dreh_motor.c  ****         while(cOutputGetCount(1)-Tel_referenz<dreh_Korr_Winkel)
 109              		.loc 1 63 0
 110 009c 0150A0E3 		mov	r5, #1
 111 00a0 C8419FE5 		ldr	r4, .L20+4
  64:Dreh_motor.c  ****         {
  65:Dreh_motor.c  ****             usleep(100);
 112              		.loc 1 65 0
 113 00a4 6460A0E3 		mov	r6, #100
  63:Dreh_motor.c  ****         while(cOutputGetCount(1)-Tel_referenz<dreh_Korr_Winkel)
 114              		.loc 1 63 0
 115 00a8 010000EA 		b	.L5
 116              	.L6:
 117              		.loc 1 65 0
 118 00ac 0600A0E1 		mov	r0, r6
 119 00b0 FEFFFFEB 		bl	usleep
 120              	.LVL15:
 121              	.L5:
  63:Dreh_motor.c  ****         while(cOutputGetCount(1)-Tel_referenz<dreh_Korr_Winkel)
 122              		.loc 1 63 0 discriminator 1
 123 00b4 0500A0E1 		mov	r0, r5
 124 00b8 FEFFFFEB 		bl	cOutputGetCount
 125              	.LVL16:
 126 00bc 003094E5 		ldr	r3, [r4]
 127 00c0 000063E0 		rsb	r0, r3, r0
 128 00c4 1D0050E3 		cmp	r0, #29
 129 00c8 F7FFFFDA 		ble	.L6
 130 00cc 290000EA 		b	.L7
 131              	.LVL17:
 132              	.L2:
  66:Dreh_motor.c  ****         }
  67:Dreh_motor.c  ****         
  68:Dreh_motor.c  ****     }
  69:Dreh_motor.c  ****     else
  70:Dreh_motor.c  ****         
  71:Dreh_motor.c  ****     {
  72:Dreh_motor.c  ****         cOutputSpeed(MOTOR_PORT_B,MOTOR_SPEED_B);
 133              		.loc 1 72 0
 134 00d0 0200A0E3 		mov	r0, #2
 135              	.LVL18:
 136 00d4 2310A0E3 		mov	r1, #35
 137 00d8 FEFFFFEB 		bl	cOutputSpeed
 138              	.LVL19:
  73:Dreh_motor.c  ****         cOutputStart(MOTOR_PORT_B);
 139              		.loc 1 73 0
 140 00dc 0200A0E3 		mov	r0, #2
 141 00e0 FEFFFFEB 		bl	cOutputStart
 142              	.LVL20:
  74:Dreh_motor.c  ****         
  75:Dreh_motor.c  ****         while((cOutputGetCount(1)-Old_Tel_referenz) < (dreh_winkel[Tel_soll]+dreh_Korr_Winkel))
 143              		.loc 1 75 0
 144 00e4 0150A0E3 		mov	r5, #1
 145 00e8 1E4084E2 		add	r4, r4, #30
  76:Dreh_motor.c  ****         {
  77:Dreh_motor.c  ****             usleep(1000);
 146              		.loc 1 77 0
 147 00ec FA6FA0E3 		mov	r6, #1000
  75:Dreh_motor.c  ****         {
 148              		.loc 1 75 0
 149 00f0 010000EA 		b	.L8
 150              	.L9:
 151              		.loc 1 77 0
 152 00f4 0600A0E1 		mov	r0, r6
 153 00f8 FEFFFFEB 		bl	usleep
 154              	.LVL21:
 155              	.L8:
  75:Dreh_motor.c  ****         {
 156              		.loc 1 75 0 discriminator 1
 157 00fc 0500A0E1 		mov	r0, r5
 158 0100 FEFFFFEB 		bl	cOutputGetCount
 159              	.LVL22:
 160 0104 000068E0 		rsb	r0, r8, r0
 161 0108 040050E1 		cmp	r0, r4
 162 010c F8FFFFBA 		blt	.L9
  78:Dreh_motor.c  ****         }
  79:Dreh_motor.c  ****         
  80:Dreh_motor.c  ****         cOutputStop(MOTOR_PORT_B,1);
 163              		.loc 1 80 0
 164 0110 0200A0E3 		mov	r0, #2
 165 0114 0110A0E3 		mov	r1, #1
 166 0118 FEFFFFEB 		bl	cOutputStop
 167              	.LVL23:
  81:Dreh_motor.c  ****         
  82:Dreh_motor.c  ****         Tel_referenz=cOutputGetCount(1);
 168              		.loc 1 82 0
 169 011c 0100A0E3 		mov	r0, #1
 170 0120 FEFFFFEB 		bl	cOutputGetCount
 171              	.LVL24:
 172 0124 44319FE5 		ldr	r3, .L20+4
 173 0128 000083E5 		str	r0, [r3]
  83:Dreh_motor.c  ****         
  84:Dreh_motor.c  ****         cOutputSpeed(MOTOR_PORT_B,-MOTOR_SPEED_B);
 174              		.loc 1 84 0
 175 012c 0200A0E3 		mov	r0, #2
 176 0130 2210E0E3 		mvn	r1, #34
 177 0134 FEFFFFEB 		bl	cOutputSpeed
 178              	.LVL25:
  85:Dreh_motor.c  ****         cOutputStart(MOTOR_PORT_B);
 179              		.loc 1 85 0
 180 0138 0200A0E3 		mov	r0, #2
 181 013c FEFFFFEB 		bl	cOutputStart
 182              	.LVL26:
  86:Dreh_motor.c  ****         usleep(10000);
 183              		.loc 1 86 0
 184 0140 2C019FE5 		ldr	r0, .L20+8
 185 0144 FEFFFFEB 		bl	usleep
 186              	.LVL27:
  87:Dreh_motor.c  ****         while(cOutputGetCount(1)-Tel_referenz>-dreh_Korr_Winkel)
 187              		.loc 1 87 0
 188 0148 0150A0E3 		mov	r5, #1
 189 014c 1C419FE5 		ldr	r4, .L20+4
  88:Dreh_motor.c  ****         {
  89:Dreh_motor.c  ****             usleep(100);
 190              		.loc 1 89 0
 191 0150 6460A0E3 		mov	r6, #100
  87:Dreh_motor.c  ****         while(cOutputGetCount(1)-Tel_referenz>-dreh_Korr_Winkel)
 192              		.loc 1 87 0
 193 0154 010000EA 		b	.L10
 194              	.L11:
 195              		.loc 1 89 0
 196 0158 0600A0E1 		mov	r0, r6
 197 015c FEFFFFEB 		bl	usleep
 198              	.LVL28:
 199              	.L10:
  87:Dreh_motor.c  ****         while(cOutputGetCount(1)-Tel_referenz>-dreh_Korr_Winkel)
 200              		.loc 1 87 0 discriminator 1
 201 0160 0500A0E1 		mov	r0, r5
 202 0164 FEFFFFEB 		bl	cOutputGetCount
 203              	.LVL29:
 204 0168 003094E5 		ldr	r3, [r4]
 205 016c 000063E0 		rsb	r0, r3, r0
 206 0170 1D0070E3 		cmn	r0, #29
 207 0174 F7FFFFAA 		bge	.L11
 208              	.L7:
  90:Dreh_motor.c  ****         }
  91:Dreh_motor.c  ****         
  92:Dreh_motor.c  ****     }
  93:Dreh_motor.c  ****     cOutputStop(MOTOR_PORT_B,1);
 209              		.loc 1 93 0
 210 0178 0200A0E3 		mov	r0, #2
 211 017c 0110A0E3 		mov	r1, #1
 212 0180 FEFFFFEB 		bl	cOutputStop
 213              	.LVL30:
  94:Dreh_motor.c  ****     while(cOutputGetCount(1)!=dreh_winkel[Tel_soll]+Old_Tel_referenz){
 214              		.loc 1 94 0
 215 0184 0140A0E3 		mov	r4, #1
 216 0188 DCA09FE5 		ldr	r10, .L20
  95:Dreh_motor.c  ****         if((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Old_Tel_referenz))<0){
  96:Dreh_motor.c  ****             cOutputSpeed(MOTOR_PORT_B,MOTOR_SPEED_B);
  97:Dreh_motor.c  ****             cOutputStart(MOTOR_PORT_B);
  98:Dreh_motor.c  ****             while((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Old_Tel_referenz))<0)
  99:Dreh_motor.c  ****             {
 100:Dreh_motor.c  ****                 usleep(10);
 101:Dreh_motor.c  ****             }
 102:Dreh_motor.c  ****             cOutputStop(MOTOR_PORT_B,1);
 103:Dreh_motor.c  ****         }else{
 104:Dreh_motor.c  ****             cOutputSpeed(MOTOR_PORT_B,-MOTOR_SPEED_B);
 217              		.loc 1 104 0
 218 018c 0270A0E3 		mov	r7, #2
 219 0190 22B0E0E3 		mvn	fp, #34
 105:Dreh_motor.c  ****             cOutputStart(MOTOR_PORT_B);
 106:Dreh_motor.c  ****             while((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Old_Tel_referenz))>0)
 107:Dreh_motor.c  ****             {
 108:Dreh_motor.c  ****                 usleep(10);
 220              		.loc 1 108 0
 221 0194 0A60A0E3 		mov	r6, #10
  94:Dreh_motor.c  ****         if((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Old_Tel_referenz))<0){
 222              		.loc 1 94 0
 223 0198 250000EA 		b	.L12
 224              	.L19:
  95:Dreh_motor.c  ****         if((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Old_Tel_referenz))<0){
 225              		.loc 1 95 0
 226 019c 0400A0E1 		mov	r0, r4
 227 01a0 FEFFFFEB 		bl	cOutputGetCount
 228              	.LVL31:
 229 01a4 000065E0 		rsb	r0, r5, r0
 230 01a8 000050E3 		cmp	r0, #0
 231 01ac 100000AA 		bge	.L13
  96:Dreh_motor.c  ****             cOutputStart(MOTOR_PORT_B);
 232              		.loc 1 96 0
 233 01b0 0700A0E1 		mov	r0, r7
 234 01b4 2310A0E3 		mov	r1, #35
 235 01b8 FEFFFFEB 		bl	cOutputSpeed
 236              	.LVL32:
  97:Dreh_motor.c  ****             while((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Old_Tel_referenz))<0)
 237              		.loc 1 97 0
 238 01bc 0700A0E1 		mov	r0, r7
 239 01c0 FEFFFFEB 		bl	cOutputStart
 240              	.LVL33:
  98:Dreh_motor.c  ****             {
 241              		.loc 1 98 0
 242 01c4 010000EA 		b	.L14
 243              	.L15:
 100:Dreh_motor.c  ****             }
 244              		.loc 1 100 0
 245 01c8 0600A0E1 		mov	r0, r6
 246 01cc FEFFFFEB 		bl	usleep
 247              	.LVL34:
 248              	.L14:
  98:Dreh_motor.c  ****             {
 249              		.loc 1 98 0 discriminator 1
 250 01d0 0400A0E1 		mov	r0, r4
 251 01d4 FEFFFFEB 		bl	cOutputGetCount
 252              	.LVL35:
 253 01d8 000065E0 		rsb	r0, r5, r0
 254 01dc 000050E3 		cmp	r0, #0
 255 01e0 F8FFFFBA 		blt	.L15
 102:Dreh_motor.c  ****         }else{
 256              		.loc 1 102 0
 257 01e4 0700A0E1 		mov	r0, r7
 258 01e8 0410A0E1 		mov	r1, r4
 259 01ec FEFFFFEB 		bl	cOutputStop
 260              	.LVL36:
 261 01f0 0F0000EA 		b	.L12
 262              	.L13:
 104:Dreh_motor.c  ****             cOutputStart(MOTOR_PORT_B);
 263              		.loc 1 104 0
 264 01f4 0700A0E1 		mov	r0, r7
 265 01f8 0B10A0E1 		mov	r1, fp
 266 01fc FEFFFFEB 		bl	cOutputSpeed
 267              	.LVL37:
 105:Dreh_motor.c  ****             while((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Old_Tel_referenz))>0)
 268              		.loc 1 105 0
 269 0200 0700A0E1 		mov	r0, r7
 270 0204 FEFFFFEB 		bl	cOutputStart
 271              	.LVL38:
 106:Dreh_motor.c  ****             {
 272              		.loc 1 106 0
 273 0208 010000EA 		b	.L17
 274              	.L18:
 275              		.loc 1 108 0
 276 020c 0600A0E1 		mov	r0, r6
 277 0210 FEFFFFEB 		bl	usleep
 278              	.LVL39:
 279              	.L17:
 106:Dreh_motor.c  ****             {
 280              		.loc 1 106 0 discriminator 1
 281 0214 0400A0E1 		mov	r0, r4
 282 0218 FEFFFFEB 		bl	cOutputGetCount
 283              	.LVL40:
 284 021c 000065E0 		rsb	r0, r5, r0
 285 0220 000050E3 		cmp	r0, #0
 286 0224 F8FFFFCA 		bgt	.L18
 109:Dreh_motor.c  ****             }
 110:Dreh_motor.c  ****             cOutputStop(MOTOR_PORT_B,1);
 287              		.loc 1 110 0
 288 0228 0700A0E1 		mov	r0, r7
 289 022c 0410A0E1 		mov	r1, r4
 290 0230 FEFFFFEB 		bl	cOutputStop
 291              	.LVL41:
 292              	.L12:
  94:Dreh_motor.c  ****         if((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Old_Tel_referenz))<0){
 293              		.loc 1 94 0 discriminator 1
 294 0234 0400A0E1 		mov	r0, r4
 295 0238 FEFFFFEB 		bl	cOutputGetCount
 296              	.LVL42:
 297 023c 09519AE7 		ldr	r5, [r10, r9, asl #2]
 298 0240 055088E0 		add	r5, r8, r5
 299 0244 050050E1 		cmp	r0, r5
 300 0248 D3FFFF1A 		bne	.L19
 111:Dreh_motor.c  ****             
 112:Dreh_motor.c  ****         }
 113:Dreh_motor.c  ****     }
 114:Dreh_motor.c  **** 
 115:Dreh_motor.c  ****     Tel_ist=Tel_soll;
 301              		.loc 1 115 0
 302 024c 1C309FE5 		ldr	r3, .L20+4
 303 0250 049083E5 		str	r9, [r3, #4]
 116:Dreh_motor.c  ****     Old_Tel_referenz=cOutputGetCount(1);
 304              		.loc 1 116 0
 305 0254 0100A0E3 		mov	r0, #1
 306 0258 FEFFFFEB 		bl	cOutputGetCount
 307              	.LVL43:
 117:Dreh_motor.c  **** #else
 118:Dreh_motor.c  ****     Tel_referenz=cOutputGetCount(1);
 119:Dreh_motor.c  ****     cOutputStepSpeed(MOTOR_PORT_B,MOTOR_SPEED_B,((dreh_winkel[Tel_soll]+dreh_Korr_Winkel)/9),(((dre
 120:Dreh_motor.c  ****     usleep(1000);
 121:Dreh_motor.c  ****     cOutputStepSpeed(MOTOR_PORT_B,-MOTOR_SPEED_B,(dreh_Korr_Winkel/10),((dreh_Korr_Winkel/10)*8),(d
 122:Dreh_motor.c  ****     cOutputStop(MOTOR_PORT_B,1);
 123:Dreh_motor.c  ****     while(cOutputGetCount(1)!=dreh_winkel[Tel_soll]+Tel_referenz){
 124:Dreh_motor.c  ****         if((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Tel_referenz))<0){
 125:Dreh_motor.c  ****             cOutputSpeed(MOTOR_PORT_B,MOTOR_SPEED_B);
 126:Dreh_motor.c  ****             cOutputStart(MOTOR_PORT_B);
 127:Dreh_motor.c  ****             while((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Tel_referenz))<0)
 128:Dreh_motor.c  ****             {
 129:Dreh_motor.c  ****                 usleep(10);
 130:Dreh_motor.c  ****             }
 131:Dreh_motor.c  ****             cOutputStop(MOTOR_PORT_B,1);
 132:Dreh_motor.c  ****         }else{
 133:Dreh_motor.c  ****             cOutputSpeed(MOTOR_PORT_B,-MOTOR_SPEED_B);
 134:Dreh_motor.c  ****             cOutputStart(MOTOR_PORT_B);
 135:Dreh_motor.c  ****             while((cOutputGetCount(1)-(dreh_winkel[Tel_soll]+Tel_referenz))>0)
 136:Dreh_motor.c  ****             {
 137:Dreh_motor.c  ****                 usleep(10);
 138:Dreh_motor.c  ****             }
 139:Dreh_motor.c  ****             cOutputStop(MOTOR_PORT_B,1);
 140:Dreh_motor.c  ****             
 141:Dreh_motor.c  ****         }
 142:Dreh_motor.c  ****     }
 143:Dreh_motor.c  ****     Tel_ist=Tel_soll;
 144:Dreh_motor.c  ****     Tel_referenz=cOutputGetCount(1);
 145:Dreh_motor.c  ****     
 146:Dreh_motor.c  **** #endif
 147:Dreh_motor.c  ****     sleep(1);
 308              		.loc 1 147 0
 309 025c 0100A0E3 		mov	r0, #1
 310 0260 FEFFFFEB 		bl	sleep
 311              	.LVL44:
 148:Dreh_motor.c  **** #endif
 149:Dreh_motor.c  ****     return 0;
 150:Dreh_motor.c  **** }
 312              		.loc 1 150 0
 313 0264 0000A0E3 		mov	r0, #0
 314 0268 F88FBDE8 		ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 315              	.L21:
 316              		.align	2
 317              	.L20:
 318 026c 00000000 		.word	.LANCHOR0
 319 0270 00000000 		.word	.LANCHOR1
 320 0274 10270000 		.word	10000
 321              		.cfi_endproc
 322              	.LFE12:
 323              		.fnend
 325              		.align	2
 326              		.global	DrehTel_init
 328              	DrehTel_init:
 329              		.fnstart
 330              	.LFB11:
  32:Dreh_motor.c  **** #ifdef __linux__
 331              		.loc 1 32 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335 0278 10402DE9 		stmfd	sp!, {r4, lr}
 336              		.save {r4, lr}
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 4, -8
 339              		.cfi_offset 14, -4
  34:Dreh_motor.c  ****     Tel_referenz=cOutputGetCount(1);
 340              		.loc 1 34 0
 341 027c FEFFFFEB 		bl	cOutputInit
 342              	.LVL45:
  35:Dreh_motor.c  ****     Tel_ist=0;
 343              		.loc 1 35 0
 344 0280 0100A0E3 		mov	r0, #1
 345 0284 FEFFFFEB 		bl	cOutputGetCount
 346              	.LVL46:
 347 0288 18309FE5 		ldr	r3, .L23
 348 028c 000083E5 		str	r0, [r3]
  36:Dreh_motor.c  ****     DrehTel_setpos(0);
 349              		.loc 1 36 0
 350 0290 0040A0E3 		mov	r4, #0
 351 0294 044083E5 		str	r4, [r3, #4]
  37:Dreh_motor.c  **** #endif
 352              		.loc 1 37 0
 353 0298 0400A0E1 		mov	r0, r4
 354 029c FEFFFFEB 		bl	DrehTel_setpos
 355              	.LVL47:
  40:Dreh_motor.c  **** 
 356              		.loc 1 40 0
 357 02a0 0400A0E1 		mov	r0, r4
 358 02a4 1080BDE8 		ldmfd	sp!, {r4, pc}
 359              	.L24:
 360              		.align	2
 361              	.L23:
 362 02a8 00000000 		.word	.LANCHOR1
 363              		.cfi_endproc
 364              	.LFE11:
 365              		.fnend
 367              		.align	2
 368              		.global	DrehTel_dreh
 370              	DrehTel_dreh:
 371              		.fnstart
 372              	.LFB13:
 151:Dreh_motor.c  **** #ifdef __linux__
 152:Dreh_motor.c  **** int DrehTel_dreh(){
 373              		.loc 1 152 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377 02ac 04E02DE5 		str	lr, [sp, #-4]!
 378              		.save {lr}
 379              		.cfi_def_cfa_offset 4
 380              		.cfi_offset 14, -4
 381              		.pad #12
 382 02b0 0CD04DE2 		sub	sp, sp, #12
 383              		.cfi_def_cfa_offset 16
 153:Dreh_motor.c  ****     cOutputStepSpeed(MOTOR_PORT_B,MOTOR_SPEED_B, 15,105,15,1);
 384              		.loc 1 153 0
 385 02b4 0F20A0E3 		mov	r2, #15
 386 02b8 00208DE5 		str	r2, [sp]
 387 02bc 0130A0E3 		mov	r3, #1
 388 02c0 04308DE5 		str	r3, [sp, #4]
 389 02c4 0200A0E3 		mov	r0, #2
 390 02c8 2310A0E3 		mov	r1, #35
 391 02cc 6930A0E3 		mov	r3, #105
 392 02d0 FEFFFFEB 		bl	cOutputStepSpeed
 393              	.LVL48:
 154:Dreh_motor.c  ****     return 0;
 155:Dreh_motor.c  **** }
 394              		.loc 1 155 0
 395 02d4 0000A0E3 		mov	r0, #0
 396 02d8 0CD08DE2 		add	sp, sp, #12
 397              		@ sp needed
 398 02dc 04F09DE4 		ldr	pc, [sp], #4
 399              		.cfi_endproc
 400              	.LFE13:
 401              		.fnend
 403              		.align	2
 404              		.global	DrehTel_close
 406              	DrehTel_close:
 407              		.fnstart
 408              	.LFB14:
 156:Dreh_motor.c  **** 
 157:Dreh_motor.c  **** 
 158:Dreh_motor.c  **** int DrehTel_close(){
 409              		.loc 1 158 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 02e0 08402DE9 		stmfd	sp!, {r3, lr}
 414              		.save {r3, lr}
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 3, -8
 417              		.cfi_offset 14, -4
 159:Dreh_motor.c  ****     cOutputExit();
 418              		.loc 1 159 0
 419 02e4 FEFFFFEB 		bl	cOutputExit
 420              	.LVL49:
 160:Dreh_motor.c  ****     return 0;
 161:Dreh_motor.c  **** }
 421              		.loc 1 161 0
 422 02e8 0000A0E3 		mov	r0, #0
 423 02ec 0880BDE8 		ldmfd	sp!, {r3, pc}
 424              		.cfi_endproc
 425              	.LFE14:
 426              		.fnend
 428              		.global	dreh_Korr_Winkel
 429              		.global	dreh_winkel
 430              		.global	Tel_referenz
 431              		.global	Tel_soll
 432              		.global	Tel_ist
 433              		.comm	OutputInstance,64,4
 434              		.global	MOTOR_PORT_B
 435              		.global	MOTOR_SPEED_B
 436              		.section	.rodata
 437              		.align	2
 438              	.LANCHOR0 = . + 0
 441              	dreh_winkel:
 442 0000 00000000 		.word	0
 443 0004 0E010000 		.word	270
 444 0008 F2FEFFFF 		.word	-270
 445 000c 1C020000 		.word	540
 446 0010 E4FDFFFF 		.word	-540
 449              	dreh_Korr_Winkel:
 450 0014 1E000000 		.word	30
 453              	MOTOR_PORT_B:
 454 0018 02       		.byte	2
 455 0019 000000   		.space	3
 458              	MOTOR_SPEED_B:
 459 001c 23000000 		.word	35
 460              		.bss
 461              		.align	2
 462              	.LANCHOR1 = . + 0
 465              	Tel_referenz:
 466 0000 00000000 		.space	4
 469              	Tel_ist:
 470 0004 00000000 		.space	4
 473              	Tel_soll:
 474 0008 00000000 		.space	4
 475              		.text
 476              	.Letext0:
 477              		.file 2 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 478              		.file 3 "/usr/local/carlson-minot/crosscompilers/lib/gcc/arm-none-linux-gnueabi/4.8.3/include/stdd
 479              		.file 4 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 480              		.file 5 "lmstypes.h"
 481              		.file 6 "bytecodes.h"
 482              		.file 7 "lms2012.h"
 483              		.file 8 "../lms2012/c_output.h"
 484              		.file 9 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/us
 485              		.file 10 "/usr/local/carlson-minot/crosscompilers/arm-none-linux-gnueabi/libc-2014.05-29-sysroot/u
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Dreh_motor.c
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:16     .text:0000000000000000 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:19     .text:0000000000000000 DrehTel_setpos
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:318    .text:000000000000026c $d
                       .ARM.exidx:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:325    .text:0000000000000278 $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:328    .text:0000000000000278 DrehTel_init
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:362    .text:00000000000002a8 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:367    .text:00000000000002ac $a
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:370    .text:00000000000002ac DrehTel_dreh
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:406    .text:00000000000002e0 DrehTel_close
                       .ARM.extab:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:449    .rodata:0000000000000014 dreh_Korr_Winkel
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:441    .rodata:0000000000000000 dreh_winkel
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:465    .bss:0000000000000000 Tel_referenz
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:473    .bss:0000000000000008 Tel_soll
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:469    .bss:0000000000000004 Tel_ist
                            *COM*:0000000000000040 OutputInstance
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:453    .rodata:0000000000000018 MOTOR_PORT_B
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:458    .rodata:000000000000001c MOTOR_SPEED_B
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:437    .rodata:0000000000000000 $d
/var/folders/x0/118sfpkj75v4t4_qgl0ndwr00000gn/T//cc8GujXc.s:461    .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
cOutputGetCount
cOutputSpeed
cOutputStart
usleep
cOutputStop
sleep
__aeabi_unwind_cpp_pr0
cOutputInit
cOutputStepSpeed
cOutputExit
__aeabi_unwind_cpp_pr1
